/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
    }
}(this, function () {

/**
 * Brings an environment as close to ECMAScript 5 compliance
 * as is possible with the facilities of erstwhile engines.
 *
 * Annotated ES5: http://es5.github.com/ (specific links below)
 * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
 * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
 */

// Shortcut to an often accessed properties, in order to avoid multiple
// dereference that costs universally. This also holds a reference to known-good
// functions.
var $Array = Array;
var ArrayPrototype = $Array.prototype;
var $Object = Object;
var ObjectPrototype = $Object.prototype;
var $Function = Function;
var FunctionPrototype = $Function.prototype;
var $String = String;
var StringPrototype = $String.prototype;
var $Number = Number;
var NumberPrototype = $Number.prototype;
var array_slice = ArrayPrototype.slice;
var array_splice = ArrayPrototype.splice;
var array_push = ArrayPrototype.push;
var array_unshift = ArrayPrototype.unshift;
var array_concat = ArrayPrototype.concat;
var array_join = ArrayPrototype.join;
var call = FunctionPrototype.call;
var apply = FunctionPrototype.apply;
var max = Math.max;
var min = Math.min;

// Having a toString local variable name breaks in Opera so use to_string.
var to_string = ObjectPrototype.toString;

/* global Symbol */
/* eslint-disable one-var-declaration-per-line, no-redeclare */
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\/\/.*\n/g, ''); var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ''); var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };

var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };
var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };
/* eslint-enable one-var-declaration-per-line, no-redeclare */

/* inlined from http://npmjs.com/define-properties */
var supportsDescriptors = $Object.defineProperty && (function () {
    try {
        var obj = {};
        $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        for (var _ in obj) { return false; }
        return obj.x === obj;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());
var defineProperties = (function (has) {
  // Define configurable, writable, and non-enumerable props
  // if they don't exist.
  var defineProperty;
  if (supportsDescriptors) {
      defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && (name in object)) { return; }
          $Object.defineProperty(object, name, {
              configurable: true,
              enumerable: false,
              writable: true,
              value: method
          });
      };
  } else {
      defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && (name in object)) { return; }
          object[name] = method;
      };
  }
  return function defineProperties(object, map, forceAssign) {
      for (var name in map) {
          if (has.call(map, name)) {
            defineProperty(object, name, map[name], forceAssign);
          }
      }
  };
}(ObjectPrototype.hasOwnProperty));

//
// Util
// ======
//

/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */
var isPrimitive = function isPrimitive(input) {
    var type = typeof input;
    return input === null || (type !== 'object' && type !== 'function');
};

var isActualNaN = $Number.isNaN || function (x) { return x !== x; };

var ES = {
    // ES5 9.4
    // http://es5.github.com/#x9.4
    // http://jsperf.com/to-integer
    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */
    ToInteger: function ToInteger(num) {
        var n = +num;
        if (isActualNaN(n)) {
            n = 0;
        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
            n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
        return n;
    },

    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */
    ToPrimitive: function ToPrimitive(input) {
        var val, valueOf, toStr;
        if (isPrimitive(input)) {
            return input;
        }
        valueOf = input.valueOf;
        if (isCallable(valueOf)) {
            val = valueOf.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        toStr = input.toString;
        if (isCallable(toStr)) {
            val = toStr.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        throw new TypeError();
    },

    // ES5 9.9
    // http://es5.github.com/#x9.9
    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */
    ToObject: function (o) {
        if (o == null) { // this matches both null and undefined
            throw new TypeError("can't convert " + o + ' to object');
        }
        return $Object(o);
    },

    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */
    ToUint32: function ToUint32(x) {
        return x >>> 0;
    }
};

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

var Empty = function Empty() {};

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isCallable(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var bound;
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = apply.call(
                    target,
                    this,
                    array_concat.call(args, array_slice.call(arguments))
                );
                if ($Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return apply.call(
                    target,
                    that,
                    array_concat.call(args, array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            array_push.call(boundArgs, '$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

// _Please note: Shortcuts are defined after `Function.prototype.bind` as we
// use it in defining shortcuts.
var owns = call.bind(ObjectPrototype.hasOwnProperty);
var toStr = call.bind(ObjectPrototype.toString);
var arraySlice = call.bind(array_slice);
var arraySliceApply = apply.bind(array_slice);
var strSlice = call.bind(StringPrototype.slice);
var strSplit = call.bind(StringPrototype.split);
var strIndexOf = call.bind(StringPrototype.indexOf);
var pushCall = call.bind(array_push);
var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);
var arraySort = call.bind(ArrayPrototype.sort);

//
// Array
// =====
//

var isArray = $Array.isArray || function isArray(obj) {
    return toStr(obj) === '[object Array]';
};

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.13
// Return len+argCount.
// [bugfix, ielt8]
// IE < 8 bug: [].unshift(0) === undefined but should be "1"
var hasUnshiftReturnValueBug = [].unshift(0) !== 1;
defineProperties(ArrayPrototype, {
    unshift: function () {
        array_unshift.apply(this, arguments);
        return this.length;
    }
}, hasUnshiftReturnValueBug);

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties($Array, { isArray: isArray });

// The IsCallable() check in the Array functions
// has been replaced with a strict check on the
// internal class of the object to trap cases where
// the provided function was actually a regular
// expression literal, which in V8 and
// JavaScriptCore is a typeof "function".  Only in
// V8 are regular expression literals permitted as
// reduce parameters, so it is desirable in the
// general case for the shim to match the more
// strict and common behavior of rejecting regular
// expressions.

// ES5 15.4.4.18
// http://es5.github.com/#x15.4.4.18
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach

// Check failure of by-index access of string characters (IE < 9)
// and failure of `0 in boxedString` (Rhino)
var boxedString = $Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    var threwException = false;
    if (method) {
        try {
            method.call('foo', function (_, __, context) {
                if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
            });

            method.call([1], function () {
                'use strict';

                properlyBoxesStrict = typeof this === 'string';
            }, 'x');
        } catch (e) {
            threwException = true;
        }
    }
    return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var i = -1;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
          T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.forEach callback must be a function');
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                if (typeof T === 'undefined') {
                    callbackfn(self[i], i, object);
                } else {
                    callbackfn.call(T, self[i], i, object);
                }
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.19
// http://es5.github.com/#x15.4.4.19
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
defineProperties(ArrayPrototype, {
    map: function map(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var result = $Array(length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.map callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                if (typeof T === 'undefined') {
                    result[i] = callbackfn(self[i], i, object);
                } else {
                    result[i] = callbackfn.call(T, self[i], i, object);
                }
            }
        }
        return result;
    }
}, !properlyBoxesContext(ArrayPrototype.map));

// ES5 15.4.4.20
// http://es5.github.com/#x15.4.4.20
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
defineProperties(ArrayPrototype, {
    filter: function filter(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var result = [];
        var value;
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.filter callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                value = self[i];
                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
                    pushCall(result, value);
                }
            }
        }
        return result;
    }
}, !properlyBoxesContext(ArrayPrototype.filter));

// ES5 15.4.4.16
// http://es5.github.com/#x15.4.4.16
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
defineProperties(ArrayPrototype, {
    every: function every(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.every callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                return false;
            }
        }
        return true;
    }
}, !properlyBoxesContext(ArrayPrototype.every));

// ES5 15.4.4.17
// http://es5.github.com/#x15.4.4.17
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
defineProperties(ArrayPrototype, {
    some: function some(callbackfn/*, thisArg */) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.some callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                return true;
            }
        }
        return false;
    }
}, !properlyBoxesContext(ArrayPrototype.some));

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
var reduceCoercesToObject = false;
if (ArrayPrototype.reduce) {
    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';
}
defineProperties(ArrayPrototype, {
    reduce: function reduce(callbackfn/*, initialValue*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.reduce callback must be a function');
        }

        // no value to return if no initial value and an empty array
        if (length === 0 && arguments.length === 1) {
            throw new TypeError('reduce of empty array with no initial value');
        }

        var i = 0;
        var result;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i++];
                    break;
                }

                // if array contains no values, no initial value to return
                if (++i >= length) {
                    throw new TypeError('reduce of empty array with no initial value');
                }
            } while (true);
        }

        for (; i < length; i++) {
            if (i in self) {
                result = callbackfn(result, self[i], i, object);
            }
        }

        return result;
    }
}, !reduceCoercesToObject);

// ES5 15.4.4.22
// http://es5.github.com/#x15.4.4.22
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
var reduceRightCoercesToObject = false;
if (ArrayPrototype.reduceRight) {
    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';
}
defineProperties(ArrayPrototype, {
    reduceRight: function reduceRight(callbackfn/*, initial*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.reduceRight callback must be a function');
        }

        // no value to return if no initial value, empty array
        if (length === 0 && arguments.length === 1) {
            throw new TypeError('reduceRight of empty array with no initial value');
        }

        var result;
        var i = length - 1;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i--];
                    break;
                }

                // if array contains no values, no initial value to return
                if (--i < 0) {
                    throw new TypeError('reduceRight of empty array with no initial value');
                }
            } while (true);
        }

        if (i < 0) {
            return result;
        }

        do {
            if (i in self) {
                result = callbackfn(result, self[i], i, object);
            }
        } while (i--);

        return result;
    }
}, !reduceRightCoercesToObject);

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(searchElement/*, fromIndex */) {
        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
        var length = ES.ToUint32(self.length);

        if (length === 0) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = ES.ToInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === searchElement) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

// ES5 15.4.4.15
// http://es5.github.com/#x15.4.4.15
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;
defineProperties(ArrayPrototype, {
    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {
        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
        var length = ES.ToUint32(self.length);

        if (length === 0) {
            return -1;
        }
        var i = length - 1;
        if (arguments.length > 1) {
            i = min(i, ES.ToInteger(arguments[1]));
        }
        // handle negative indices
        i = i >= 0 ? i : length - Math.abs(i);
        for (; i >= 0; i--) {
            if (i in self && searchElement === self[i]) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2LastIndexOfBug);

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.12
var spliceNoopReturnsEmptyArray = (function () {
    var a = [1, 2];
    var result = a.splice();
    return a.length === 2 && isArray(result) && result.length === 0;
}());
defineProperties(ArrayPrototype, {
    // Safari 5.0 bug where .splice() returns undefined
    splice: function splice(start, deleteCount) {
        if (arguments.length === 0) {
            return [];
        } else {
            return array_splice.apply(this, arguments);
        }
    }
}, !spliceNoopReturnsEmptyArray);

var spliceWorksWithEmptyObject = (function () {
    var obj = {};
    ArrayPrototype.splice.call(obj, 0, 0, 1);
    return obj.length === 1;
}());
defineProperties(ArrayPrototype, {
    splice: function splice(start, deleteCount) {
        if (arguments.length === 0) { return []; }
        var args = arguments;
        this.length = max(ES.ToInteger(this.length), 0);
        if (arguments.length > 0 && typeof deleteCount !== 'number') {
            args = arraySlice(arguments);
            if (args.length < 2) {
                pushCall(args, this.length - start);
            } else {
                args[1] = ES.ToInteger(deleteCount);
            }
        }
        return array_splice.apply(this, args);
    }
}, !spliceWorksWithEmptyObject);
var spliceWorksWithLargeSparseArrays = (function () {
    // Per https://github.com/es-shims/es5-shim/issues/295
    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater
    var arr = new $Array(1e5);
    // note: the index MUST be 8 or larger or the test will false pass
    arr[8] = 'x';
    arr.splice(1, 1);
    // note: this test must be defined *after* the indexOf shim
    // per https://github.com/es-shims/es5-shim/issues/313
    return arr.indexOf('x') === 7;
}());
var spliceWorksWithSmallSparseArrays = (function () {
    // Per https://github.com/es-shims/es5-shim/issues/295
    // Opera 12.15 breaks on this, no idea why.
    var n = 256;
    var arr = [];
    arr[n] = 'a';
    arr.splice(n + 1, 0, 'b');
    return arr[n] === 'a';
}());
defineProperties(ArrayPrototype, {
    splice: function splice(start, deleteCount) {
        var O = ES.ToObject(this);
        var A = [];
        var len = ES.ToUint32(O.length);
        var relativeStart = ES.ToInteger(start);
        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);
        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);

        var k = 0;
        var from;
        while (k < actualDeleteCount) {
            from = $String(actualStart + k);
            if (owns(O, from)) {
                A[k] = O[from];
            }
            k += 1;
        }

        var items = arraySlice(arguments, 2);
        var itemCount = items.length;
        var to;
        if (itemCount < actualDeleteCount) {
            k = actualStart;
            var maxK = len - actualDeleteCount;
            while (k < maxK) {
                from = $String(k + actualDeleteCount);
                to = $String(k + itemCount);
                if (owns(O, from)) {
                    O[to] = O[from];
                } else {
                    delete O[to];
                }
                k += 1;
            }
            k = len;
            var minK = len - actualDeleteCount + itemCount;
            while (k > minK) {
                delete O[k - 1];
                k -= 1;
            }
        } else if (itemCount > actualDeleteCount) {
            k = len - actualDeleteCount;
            while (k > actualStart) {
                from = $String(k + actualDeleteCount - 1);
                to = $String(k + itemCount - 1);
                if (owns(O, from)) {
                    O[to] = O[from];
                } else {
                    delete O[to];
                }
                k -= 1;
            }
        }
        k = actualStart;
        for (var i = 0; i < items.length; ++i) {
            O[k] = items[i];
            k += 1;
        }
        O.length = len - actualDeleteCount + itemCount;

        return A;
    }
}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);

var originalJoin = ArrayPrototype.join;
var hasStringJoinBug;
try {
    hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';
} catch (e) {
    hasStringJoinBug = true;
}
if (hasStringJoinBug) {
    defineProperties(ArrayPrototype, {
        join: function join(separator) {
            var sep = typeof separator === 'undefined' ? ',' : separator;
            return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);
        }
    }, hasStringJoinBug);
}

var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';
if (hasJoinUndefinedBug) {
    defineProperties(ArrayPrototype, {
        join: function join(separator) {
            var sep = typeof separator === 'undefined' ? ',' : separator;
            return originalJoin.call(this, sep);
        }
    }, hasJoinUndefinedBug);
}

var pushShim = function push(item) {
    var O = ES.ToObject(this);
    var n = ES.ToUint32(O.length);
    var i = 0;
    while (i < arguments.length) {
        O[n + i] = arguments[i];
        i += 1;
    }
    O.length = n + i;
    return n + i;
};

var pushIsNotGeneric = (function () {
    var obj = {};
    var result = Array.prototype.push.call(obj, undefined);
    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);
}());
defineProperties(ArrayPrototype, {
    push: function push(item) {
        if (isArray(this)) {
            return array_push.apply(this, arguments);
        }
        return pushShim.apply(this, arguments);
    }
}, pushIsNotGeneric);

// This fixes a very weird bug in Opera 10.6 when pushing `undefined
var pushUndefinedIsWeird = (function () {
    var arr = [];
    var result = arr.push(undefined);
    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);
}());
defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);

// ES5 15.2.3.14
// http://es5.github.io/#x15.4.4.10
// Fix boxed string bug
defineProperties(ArrayPrototype, {
    slice: function (start, end) {
        var arr = isString(this) ? strSplit(this, '') : this;
        return arraySliceApply(arr, arguments);
    }
}, splitString);

var sortIgnoresNonFunctions = (function () {
    try {
        [1, 2].sort(null);
        [1, 2].sort({});
        return true;
    } catch (e) { /**/ }
    return false;
}());
var sortThrowsOnRegex = (function () {
    // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`
    try {
        [1, 2].sort(/a/);
        return false;
    } catch (e) { /**/ }
    return true;
}());
var sortIgnoresUndefined = (function () {
    // applies in IE 8, for one.
    try {
        [1, 2].sort(undefined);
        return true;
    } catch (e) { /**/ }
    return false;
}());
defineProperties(ArrayPrototype, {
    sort: function sort(compareFn) {
        if (typeof compareFn === 'undefined') {
            return arraySort(this);
        }
        if (!isCallable(compareFn)) {
            throw new TypeError('Array.prototype.sort callback must be a function');
        }
        return arraySort(this, compareFn);
    }
}, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);

//
// Object
// ======
//

// ES5 15.2.3.14
// http://es5.github.com/#x15.2.3.14

// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
var hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');
var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
var hasStringEnumBug = !owns('x', '0');
var equalsConstructorPrototype = function (o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
};
var blacklistedKeys = {
    $window: true,
    $console: true,
    $parent: true,
    $self: true,
    $frame: true,
    $frames: true,
    $frameElement: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $external: true
};
var hasAutomationEqualityBug = (function () {
    /* globals window */
    if (typeof window === 'undefined') { return false; }
    for (var k in window) {
        try {
            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
                equalsConstructorPrototype(window[k]);
            }
        } catch (e) {
            return true;
        }
    }
    return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (object) {
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }
    try {
        return equalsConstructorPrototype(object);
    } catch (e) {
        return false;
    }
};
var dontEnums = [
    'toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'
];
var dontEnumsLength = dontEnums.length;

// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
// can be replaced with require('is-arguments') if we ever use a build process instead
var isStandardArguments = function isArguments(value) {
    return toStr(value) === '[object Arguments]';
};
var isLegacyArguments = function isArguments(value) {
    return value !== null &&
        typeof value === 'object' &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        !isArray(value) &&
        isCallable(value.callee);
};
var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;

defineProperties($Object, {
    keys: function keys(object) {
        var isFn = isCallable(object);
        var isArgs = isArguments(object);
        var isObject = object !== null && typeof object === 'object';
        var isStr = isObject && isString(object);

        if (!isObject && !isFn && !isArgs) {
            throw new TypeError('Object.keys called on a non-object');
        }

        var theKeys = [];
        var skipProto = hasProtoEnumBug && isFn;
        if ((isStr && hasStringEnumBug) || isArgs) {
            for (var i = 0; i < object.length; ++i) {
                pushCall(theKeys, $String(i));
            }
        }

        if (!isArgs) {
            for (var name in object) {
                if (!(skipProto && name === 'prototype') && owns(object, name)) {
                    pushCall(theKeys, $String(name));
                }
            }
        }

        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for (var j = 0; j < dontEnumsLength; j++) {
                var dontEnum = dontEnums[j];
                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                    pushCall(theKeys, dontEnum);
                }
            }
        }
        return theKeys;
    }
});

var keysWorksWithArguments = $Object.keys && (function () {
    // Safari 5.0 bug
    return $Object.keys(arguments).length === 2;
}(1, 2));
var keysHasArgumentsLengthBug = $Object.keys && (function () {
    var argKeys = $Object.keys(arguments);
    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
}(1));
var originalKeys = $Object.keys;
defineProperties($Object, {
    keys: function keys(object) {
        if (isArguments(object)) {
            return originalKeys(arraySlice(object));
        } else {
            return originalKeys(object);
        }
    }
}, !keysWorksWithArguments || keysHasArgumentsLengthBug);

//
// Date
// ====
//

var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;
var aNegativeTestDate = new Date(-1509842289600292);
var aPositiveTestDate = new Date(1449662400000);
var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';
var hasToDateStringFormatBug;
var hasToStringFormatBug;
var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();
if (timeZoneOffset < -720) {
    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';
    hasToStringFormatBug = !(/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
} else {
    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';
    hasToStringFormatBug = !(/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
}

var originalGetFullYear = call.bind(Date.prototype.getFullYear);
var originalGetMonth = call.bind(Date.prototype.getMonth);
var originalGetDate = call.bind(Date.prototype.getDate);
var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);
var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);
var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);
var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);
var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);
var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);
var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);
var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);
var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var daysInMonth = function daysInMonth(month, year) {
    return originalGetDate(new Date(year, month, 0));
};

defineProperties(Date.prototype, {
    getFullYear: function getFullYear() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        if (year < 0 && originalGetMonth(this) > 11) {
            return year + 1;
        }
        return year;
    },
    getMonth: function getMonth() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        var month = originalGetMonth(this);
        if (year < 0 && month > 11) {
            return 0;
        }
        return month;
    },
    getDate: function getDate() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        var month = originalGetMonth(this);
        var date = originalGetDate(this);
        if (year < 0 && month > 11) {
            if (month === 12) {
                return date;
            }
            var days = daysInMonth(0, year + 1);
            return (days - date) + 1;
        }
        return date;
    },
    getUTCFullYear: function getUTCFullYear() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        if (year < 0 && originalGetUTCMonth(this) > 11) {
            return year + 1;
        }
        return year;
    },
    getUTCMonth: function getUTCMonth() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        var month = originalGetUTCMonth(this);
        if (year < 0 && month > 11) {
            return 0;
        }
        return month;
    },
    getUTCDate: function getUTCDate() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        var month = originalGetUTCMonth(this);
        var date = originalGetUTCDate(this);
        if (year < 0 && month > 11) {
            if (month === 12) {
                return date;
            }
            var days = daysInMonth(0, year + 1);
            return (days - date) + 1;
        }
        return date;
    }
}, hasNegativeMonthYearBug);

defineProperties(Date.prototype, {
    toUTCString: function toUTCString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = originalGetUTCDay(this);
        var date = originalGetUTCDate(this);
        var month = originalGetUTCMonth(this);
        var year = originalGetUTCFullYear(this);
        var hour = originalGetUTCHours(this);
        var minute = originalGetUTCMinutes(this);
        var second = originalGetUTCSeconds(this);
        return dayName[day] + ', ' +
            (date < 10 ? '0' + date : date) + ' ' +
            monthName[month] + ' ' +
            year + ' ' +
            (hour < 10 ? '0' + hour : hour) + ':' +
            (minute < 10 ? '0' + minute : minute) + ':' +
            (second < 10 ? '0' + second : second) + ' GMT';
    }
}, hasNegativeMonthYearBug || hasToUTCStringFormatBug);

// Opera 12 has `,`
defineProperties(Date.prototype, {
    toDateString: function toDateString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = this.getDay();
        var date = this.getDate();
        var month = this.getMonth();
        var year = this.getFullYear();
        return dayName[day] + ' ' +
            monthName[month] + ' ' +
            (date < 10 ? '0' + date : date) + ' ' +
            year;
    }
}, hasNegativeMonthYearBug || hasToDateStringFormatBug);

// can't use defineProperties here because of toString enumeration issue in IE <= 8
if (hasNegativeMonthYearBug || hasToStringFormatBug) {
    Date.prototype.toString = function toString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = this.getDay();
        var date = this.getDate();
        var month = this.getMonth();
        var year = this.getFullYear();
        var hour = this.getHours();
        var minute = this.getMinutes();
        var second = this.getSeconds();
        var timezoneOffset = this.getTimezoneOffset();
        var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);
        var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);
        return dayName[day] + ' ' +
            monthName[month] + ' ' +
            (date < 10 ? '0' + date : date) + ' ' +
            year + ' ' +
            (hour < 10 ? '0' + hour : hour) + ':' +
            (minute < 10 ? '0' + minute : minute) + ':' +
            (second < 10 ? '0' + second : second) + ' GMT' +
            (timezoneOffset > 0 ? '-' : '+') +
            (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +
            (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);
    };
    if (supportsDescriptors) {
        $Object.defineProperty(Date.prototype, 'toString', {
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
}

// ES5 15.9.5.43
// http://es5.github.com/#x15.9.5.43
// This function returns a String value represent the instance in time
// represented by this Date object. The format of the String is the Date Time
// string format defined in 15.9.1.15. All fields are present in the String.
// The time zone is always UTC, denoted by the suffix Z. If the time value of
// this object is not a finite Number a RangeError exception is thrown.
var negativeDate = -62198755200000;
var negativeYearString = '-000001';
var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';

var getTime = call.bind(Date.prototype.getTime);

defineProperties(Date.prototype, {
    toISOString: function toISOString() {
        if (!isFinite(this) || !isFinite(getTime(this))) {
            // Adope Photoshop requires the second check.
            throw new RangeError('Date.prototype.toISOString called on non-finite value.');
        }

        var year = originalGetUTCFullYear(this);

        var month = originalGetUTCMonth(this);
        // see https://github.com/es-shims/es5-shim/issues/111
        year += Math.floor(month / 12);
        month = (month % 12 + 12) % 12;

        // the date time string format is specified in 15.9.1.15.
        var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
        year = (
            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +
            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)
        );

        for (var i = 0; i < result.length; ++i) {
          // pad months, days, hours, minutes, and seconds to have two digits.
          result[i] = strSlice('00' + result[i], -2);
        }
        // pad milliseconds to have three digits.
        return (
            year + '-' + arraySlice(result, 0, 2).join('-') +
            'T' + arraySlice(result, 2).join(':') + '.' +
            strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'
        );
    }
}, hasNegativeDateBug || hasSafari51DateBug);

// ES5 15.9.5.44
// http://es5.github.com/#x15.9.5.44
// This function provides a String representation of a Date object for use by
// JSON.stringify (15.12.3).
var dateToJSONIsSupported = (function () {
    try {
        return Date.prototype.toJSON &&
            new Date(NaN).toJSON() === null &&
            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
            Date.prototype.toJSON.call({ // generic
                toISOString: function () { return true; }
            });
    } catch (e) {
        return false;
    }
}());
if (!dateToJSONIsSupported) {
    Date.prototype.toJSON = function toJSON(key) {
        // When the toJSON method is called with argument key, the following
        // steps are taken:

        // 1.  Let O be the result of calling ToObject, giving it the this
        // value as its argument.
        // 2. Let tv be ES.ToPrimitive(O, hint Number).
        var O = $Object(this);
        var tv = ES.ToPrimitive(O);
        // 3. If tv is a Number and is not finite, return null.
        if (typeof tv === 'number' && !isFinite(tv)) {
            return null;
        }
        // 4. Let toISO be the result of calling the [[Get]] internal method of
        // O with argument "toISOString".
        var toISO = O.toISOString;
        // 5. If IsCallable(toISO) is false, throw a TypeError exception.
        if (!isCallable(toISO)) {
            throw new TypeError('toISOString property is not callable');
        }
        // 6. Return the result of calling the [[Call]] internal method of
        //  toISO with O as the this value and an empty argument list.
        return toISO.call(O);

        // NOTE 1 The argument is ignored.

        // NOTE 2 The toJSON function is intentionally generic; it does not
        // require that its this value be a Date object. Therefore, it can be
        // transferred to other kinds of objects for use as a method. However,
        // it does require that any such object have a toISOString method. An
        // object is free to use the argument key to filter its
        // stringification.
    };
}

// ES5 15.9.4.2
// http://es5.github.com/#x15.9.4.2
// based on work shared by Daniel Friesen (dantman)
// http://gist.github.com/303249
var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;
var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));
if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
    // XXX global assignment won't work in embeddings that use
    // an alternate object for the context.
    /* global Date: true */
    /* eslint-disable no-undef */
    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;
    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());
    /* eslint-disable no-implicit-globals */
    Date = (function (NativeDate) {
    /* eslint-enable no-implicit-globals */
    /* eslint-enable no-undef */
        // Date.length === 7
        var DateShim = function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            var date;
            if (this instanceof NativeDate) {
                var seconds = s;
                var millis = ms;
                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
                    // work around a Safari 8/9 bug where it treats the seconds as signed
                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                    var sToShift = Math.floor(msToShift / 1e3);
                    seconds += sToShift;
                    millis -= sToShift * 1e3;
                }
                date = length === 1 && $String(Y) === Y ? // isString(Y)
                    // We explicitly pass it through parse:
                    new NativeDate(DateShim.parse(Y)) :
                    // We have to manually make calls depending on argument
                    // length here
                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :
                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :
                    length >= 5 ? new NativeDate(Y, M, D, h, m) :
                    length >= 4 ? new NativeDate(Y, M, D, h) :
                    length >= 3 ? new NativeDate(Y, M, D) :
                    length >= 2 ? new NativeDate(Y, M) :
                    length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :
                                  new NativeDate();
            } else {
                date = NativeDate.apply(this, arguments);
            }
            if (!isPrimitive(date)) {
              // Prevent mixups with unfixed Date object
              defineProperties(date, { constructor: DateShim }, true);
            }
            return date;
        };

        // 15.9.1.15 Date Time String Format.
        var isoDateExpression = new RegExp('^' +
            '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +
                                      // 6-digit extended year
            '(?:-(\\d{2})' + // optional month capture
            '(?:-(\\d{2})' + // optional day capture
            '(?:' + // capture hours:minutes:seconds.milliseconds
                'T(\\d{2})' + // hours capture
                ':(\\d{2})' + // minutes capture
                '(?:' + // optional :seconds.milliseconds
                    ':(\\d{2})' + // seconds capture
                    '(?:(\\.\\d{1,}))?' + // milliseconds capture
                ')?' +
            '(' + // capture UTC offset component
                'Z|' + // UTC capture
                '(?:' + // offset specifier +/-hours:minutes
                    '([-+])' + // sign capture
                    '(\\d{2})' + // hours offset capture
                    ':(\\d{2})' + // minutes offset capture
                ')' +
            ')?)?)?)?' +
        '$');

        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];

        var dayFromMonth = function dayFromMonth(year, month) {
            var t = month > 1 ? 1 : 0;
            return (
                months[month] +
                Math.floor((year - 1969 + t) / 4) -
                Math.floor((year - 1901 + t) / 100) +
                Math.floor((year - 1601 + t) / 400) +
                365 * (year - 1970)
            );
        };

        var toUTC = function toUTC(t) {
            var s = 0;
            var ms = t;
            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
                // work around a Safari 8/9 bug where it treats the seconds as signed
                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                var sToShift = Math.floor(msToShift / 1e3);
                s += sToShift;
                ms -= sToShift * 1e3;
            }
            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));
        };

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            if (owns(NativeDate, key)) {
                DateShim[key] = NativeDate[key];
            }
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        defineProperties(DateShim, {
            now: NativeDate.now,
            UTC: NativeDate.UTC
        }, true);
        DateShim.prototype = NativeDate.prototype;
        defineProperties(DateShim.prototype, {
            constructor: DateShim
        }, true);

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        var parseShim = function parse(string) {
            var match = isoDateExpression.exec(string);
            if (match) {
                // parse months, days, hours, minutes, seconds, and milliseconds
                // provide default values if necessary
                // parse the UTC offset component
                var year = $Number(match[1]),
                    month = $Number(match[2] || 1) - 1,
                    day = $Number(match[3] || 1) - 1,
                    hour = $Number(match[4] || 0),
                    minute = $Number(match[5] || 0),
                    second = $Number(match[6] || 0),
                    millisecond = Math.floor($Number(match[7] || 0) * 1000),
                    // When time zone is missed, local offset should be used
                    // (ES 5.1 bug)
                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                    isLocalTime = Boolean(match[4] && !match[8]),
                    signOffset = match[9] === '-' ? 1 : -1,
                    hourOffset = $Number(match[10] || 0),
                    minuteOffset = $Number(match[11] || 0),
                    result;
                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;
                if (
                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&
                    minute < 60 && second < 60 && millisecond < 1000 &&
                    month > -1 && month < 12 && hourOffset < 24 &&
                    minuteOffset < 60 && // detect invalid offsets
                    day > -1 &&
                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))
                ) {
                    result = (
                        (dayFromMonth(year, month) + day) * 24 +
                        hour +
                        hourOffset * signOffset
                    ) * 60;
                    result = (
                        (result + minute + minuteOffset * signOffset) * 60 +
                        second
                    ) * 1000 + millisecond;
                    if (isLocalTime) {
                        result = toUTC(result);
                    }
                    if (-8.64e15 <= result && result <= 8.64e15) {
                        return result;
                    }
                }
                return NaN;
            }
            return NativeDate.parse.apply(this, arguments);
        };
        defineProperties(DateShim, { parse: parseShim });

        return DateShim;
    }(Date));
    /* global Date: false */
}

// ES5 15.9.4.4
// http://es5.github.com/#x15.9.4.4
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}

//
// Number
// ======
//

// ES5.1 15.7.4.5
// http://es5.github.com/#x15.7.4.5
var hasToFixedBugs = NumberPrototype.toFixed && (
  (0.00008).toFixed(3) !== '0.000' ||
  (0.9).toFixed(0) !== '1' ||
  (1.255).toFixed(2) !== '1.25' ||
  (1000000000000000128).toFixed(0) !== '1000000000000000128'
);

var toFixedHelpers = {
  base: 1e7,
  size: 6,
  data: [0, 0, 0, 0, 0, 0],
  multiply: function multiply(n, c) {
      var i = -1;
      var c2 = c;
      while (++i < toFixedHelpers.size) {
          c2 += n * toFixedHelpers.data[i];
          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;
          c2 = Math.floor(c2 / toFixedHelpers.base);
      }
  },
  divide: function divide(n) {
      var i = toFixedHelpers.size;
      var c = 0;
      while (--i >= 0) {
          c += toFixedHelpers.data[i];
          toFixedHelpers.data[i] = Math.floor(c / n);
          c = (c % n) * toFixedHelpers.base;
      }
  },
  numToString: function numToString() {
      var i = toFixedHelpers.size;
      var s = '';
      while (--i >= 0) {
          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
              var t = $String(toFixedHelpers.data[i]);
              if (s === '') {
                  s = t;
              } else {
                  s += strSlice('0000000', 0, 7 - t.length) + t;
              }
          }
      }
      return s;
  },
  pow: function pow(x, n, acc) {
      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
  },
  log: function log(x) {
      var n = 0;
      var x2 = x;
      while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
      }
      while (x2 >= 2) {
          n += 1;
          x2 /= 2;
      }
      return n;
  }
};

var toFixedShim = function toFixed(fractionDigits) {
    var f, x, s, m, e, z, j, k;

    // Test for NaN and round fractionDigits down
    f = $Number(fractionDigits);
    f = isActualNaN(f) ? 0 : Math.floor(f);

    if (f < 0 || f > 20) {
        throw new RangeError('Number.toFixed called with invalid number of decimals');
    }

    x = $Number(this);

    if (isActualNaN(x)) {
        return 'NaN';
    }

    // If it is too big or small, return the string value of the number
    if (x <= -1e21 || x >= 1e21) {
        return $String(x);
    }

    s = '';

    if (x < 0) {
        s = '-';
        x = -x;
    }

    m = '0';

    if (x > 1e-21) {
        // 1e-21 < x < 1e21
        // -70 < log2(x) < 70
        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;
        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));
        z *= 0x10000000000000; // Math.pow(2, 52);
        e = 52 - e;

        // -18 < e < 122
        // x = z / 2 ^ e
        if (e > 0) {
            toFixedHelpers.multiply(0, z);
            j = f;

            while (j >= 7) {
                toFixedHelpers.multiply(1e7, 0);
                j -= 7;
            }

            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);
            j = e - 1;

            while (j >= 23) {
                toFixedHelpers.divide(1 << 23);
                j -= 23;
            }

            toFixedHelpers.divide(1 << j);
            toFixedHelpers.multiply(1, 1);
            toFixedHelpers.divide(2);
            m = toFixedHelpers.numToString();
        } else {
            toFixedHelpers.multiply(0, z);
            toFixedHelpers.multiply(1 << (-e), 0);
            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);
        }
    }

    if (f > 0) {
        k = m.length;

        if (k <= f) {
            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;
        } else {
            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);
        }
    } else {
        m = s + m;
    }

    return m;
};
defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);

var hasToPrecisionUndefinedBug = (function () {
    try {
        return 1.0.toPrecision(undefined) === '1';
    } catch (e) {
        return true;
    }
}());
var originalToPrecision = NumberPrototype.toPrecision;
defineProperties(NumberPrototype, {
    toPrecision: function toPrecision(precision) {
        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
    }
}, hasToPrecisionUndefinedBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
        var maxSafe32BitInt = Math.pow(2, 32) - 1;

        StringPrototype.split = function (separator, limit) {
            var string = String(this);
            if (typeof separator === 'undefined' && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (!isRegex(separator)) {
                return strSplit(this, separator, limit);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline ? 'm' : '') +
                        (separator.unicode ? 'u' : '') + // in ES6
                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            var separatorCopy = new RegExp(separator.source, flags + 'g');
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // maxSafe32BitInt
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);
            match = separatorCopy.exec(string);
            while (match) {
                // `separatorCopy.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    pushCall(output, strSlice(string, lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        /* eslint-disable no-loop-func */
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (typeof arguments[i] === 'undefined') {
                                    match[i] = void 0;
                                }
                            }
                        });
                        /* eslint-enable no-loop-func */
                    }
                    if (match.length > 1 && match.index < string.length) {
                        array_push.apply(output, arraySlice(match, 1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= splitLimit) {
                        break;
                    }
                }
                if (separatorCopy.lastIndex === match.index) {
                    separatorCopy.lastIndex++; // Avoid an infinite loop
                }
                match = separatorCopy.exec(string);
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separatorCopy.test('')) {
                    pushCall(output, '');
                }
            } else {
                pushCall(output, strSlice(string, lastLastIndex));
            }
            return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (typeof separator === 'undefined' && limit === 0) { return []; }
        return strSplit(this, separator, limit);
    };
}

var str_replace = StringPrototype.replace;
var replaceReportsGroupsCorrectly = (function () {
    var groups = [];
    'x'.replace(/x(.)?/g, function (match, group) {
        pushCall(groups, group);
    });
    return groups.length === 1 && typeof groups[0] === 'undefined';
}());

if (!replaceReportsGroupsCorrectly) {
    StringPrototype.replace = function replace(searchValue, replaceValue) {
        var isFn = isCallable(replaceValue);
        var hasCapturingGroups = isRegex(searchValue) && (/\)[*?]/).test(searchValue.source);
        if (!isFn || !hasCapturingGroups) {
            return str_replace.call(this, searchValue, replaceValue);
        } else {
            var wrappedReplaceValue = function (match) {
                var length = arguments.length;
                var originalLastIndex = searchValue.lastIndex;
                searchValue.lastIndex = 0;
                var args = searchValue.exec(match) || [];
                searchValue.lastIndex = originalLastIndex;
                pushCall(args, arguments[length - 2], arguments[length - 1]);
                return replaceValue.apply(this, args);
            };
            return str_replace.call(this, searchValue, wrappedReplaceValue);
        }
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        var normalizedStart = start;
        if (start < 0) {
            normalizedStart = max(this.length + start, 0);
        }
        return string_substr.call(this, normalizedStart, length);
    }
}, hasNegativeSubstrBug);

// ES5 15.5.4.20
// whitespace from: http://es5.github.io/#x15.5.4.20
var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
    '\u2029\uFEFF';
var zeroWidth = '\u200b';
var wsRegexChars = '[' + ws + ']';
var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
defineProperties(StringPrototype, {
    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
    // http://perfectionkills.com/whitespace-deviations/
    trim: function trim() {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
    }
}, hasTrimWhitespaceBug);
var trim = call.bind(String.prototype.trim);

var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;
defineProperties(StringPrototype, {
    lastIndexOf: function lastIndexOf(searchString) {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        var S = $String(this);
        var searchStr = $String(searchString);
        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;
        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);
        var start = min(max(pos, 0), S.length);
        var searchLen = searchStr.length;
        var k = start + searchLen;
        while (k > 0) {
            k = max(0, k - searchLen);
            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);
            if (index !== -1) {
                return k + index;
            }
        }
        return -1;
    }
}, hasLastIndexBug);

var originalLastIndexOf = StringPrototype.lastIndexOf;
defineProperties(StringPrototype, {
    lastIndexOf: function lastIndexOf(searchString) {
        return originalLastIndexOf.apply(this, arguments);
    }
}, StringPrototype.lastIndexOf.length !== 1);

// ES-5 15.1.2.2
/* eslint-disable radix */
if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
/* eslint-enable radix */
    /* global parseInt: true */
    parseInt = (function (origParseInt) {
        var hexRegex = /^[\-+]?0[xX]/;
        return function parseInt(str, radix) {
            var string = trim(str);
            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
            return origParseInt(string, defaultedRadix);
        };
    }(parseInt));
}

// https://es5.github.io/#x15.1.2.3
if (1 / parseFloat('-0') !== -Infinity) {
    /* global parseFloat: true */
    parseFloat = (function (origParseFloat) {
        return function parseFloat(string) {
            var inputString = trim(string);
            var result = origParseFloat(inputString);
            return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;
        };
    }(parseFloat));
}

if (String(new RangeError('test')) !== 'RangeError: test') {
    var errorToStringShim = function toString() {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        var name = this.name;
        if (typeof name === 'undefined') {
            name = 'Error';
        } else if (typeof name !== 'string') {
            name = $String(name);
        }
        var msg = this.message;
        if (typeof msg === 'undefined') {
            msg = '';
        } else if (typeof msg !== 'string') {
            msg = $String(msg);
        }
        if (!name) {
            return msg;
        }
        if (!msg) {
            return name;
        }
        return name + ': ' + msg;
    };
    // can't use defineProperties here because of toString enumeration issue in IE <= 8
    Error.prototype.toString = errorToStringShim;
}

if (supportsDescriptors) {
    var ensureNonEnumerable = function (obj, prop) {
        if (isEnum(obj, prop)) {
            var desc = Object.getOwnPropertyDescriptor(obj, prop);
            desc.enumerable = false;
            Object.defineProperty(obj, prop, desc);
        }
    };
    ensureNonEnumerable(Error.prototype, 'message');
    if (Error.prototype.message !== '') {
      Error.prototype.message = '';
    }
    ensureNonEnumerable(Error.prototype, 'name');
}

if (String(/a/mig) !== '/a/gim') {
    var regexToString = function toString() {
        var str = '/' + this.source + '/';
        if (this.global) {
            str += 'g';
        }
        if (this.ignoreCase) {
            str += 'i';
        }
        if (this.multiline) {
            str += 'm';
        }
        return str;
    };
    // can't use defineProperties here because of toString enumeration issue in IE <= 8
    RegExp.prototype.toString = regexToString;
}

}));

/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
    }
}(this, function () {

    var call = Function.call;
    var prototypeOfObject = Object.prototype;
    var owns = call.bind(prototypeOfObject.hasOwnProperty);
    var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
    var toStr = call.bind(prototypeOfObject.toString);

    // If JS engine supports accessors creating shortcuts.
    var defineGetter;
    var defineSetter;
    var lookupGetter;
    var lookupSetter;
    var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
    if (supportsAccessors) {
        /* eslint-disable no-underscore-dangle, no-restricted-properties */
        defineGetter = call.bind(prototypeOfObject.__defineGetter__);
        defineSetter = call.bind(prototypeOfObject.__defineSetter__);
        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
        /* eslint-enable no-underscore-dangle, no-restricted-properties */
    }

    var isPrimitive = function isPrimitive(o) {
        return o == null || (typeof o !== 'object' && typeof o !== 'function');
    };

    // ES5 15.2.3.2
    // http://es5.github.com/#x15.2.3.2
    if (!Object.getPrototypeOf) {
        // https://github.com/es-shims/es5-shim/issues#issue/2
        // http://ejohn.org/blog/objectgetprototypeof/
        // recommended by fschaefer on github
        //
        // sure, and webreflection says ^_^
        // ... this will nerever possibly return null
        // ... Opera Mini breaks here with infinite loops
        Object.getPrototypeOf = function getPrototypeOf(object) {
            // eslint-disable-next-line no-proto
            var proto = object.__proto__;
            if (proto || proto === null) {
                return proto;
            } else if (toStr(object.constructor) === '[object Function]') {
                return object.constructor.prototype;
            } else if (object instanceof Object) {
                return prototypeOfObject;
            } else {
                // Correctly return null for Objects created with `Object.create(null)`
                // (shammed or native) or `{ __proto__: null}`.  Also returns null for
                // cross-realm objects on browsers that lack `__proto__` support (like
                // IE <11), but that's the best we can do.
                return null;
            }
        };
    }

    // ES5 15.2.3.3
    // http://es5.github.com/#x15.2.3.3

    var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
        try {
            object.sentinel = 0;
            return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
        } catch (exception) {
            return false;
        }
    };

    // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
    if (Object.defineProperty) {
        var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
        var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||
            doesGetOwnPropertyDescriptorWork(document.createElement('div'));
        if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
            var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
        }
    }

    if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
        var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';

        /* eslint-disable no-proto */
        Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
            if (isPrimitive(object)) {
                throw new TypeError(ERR_NON_OBJECT + object);
            }

            // make a valiant attempt to use the real getOwnPropertyDescriptor
            // for I8's DOM elements.
            if (getOwnPropertyDescriptorFallback) {
                try {
                    return getOwnPropertyDescriptorFallback.call(Object, object, property);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            var descriptor;

            // If object does not owns property return undefined immediately.
            if (!owns(object, property)) {
                return descriptor;
            }

            // If object has a property then it's for sure `configurable`, and
            // probably `enumerable`. Detect enumerability though.
            descriptor = {
                enumerable: isEnumerable(object, property),
                configurable: true
            };

            // If JS engine supports accessor properties then property may be a
            // getter or setter.
            if (supportsAccessors) {
                // Unfortunately `__lookupGetter__` will return a getter even
                // if object has own non getter property along with a same named
                // inherited getter. To avoid misbehavior we temporary remove
                // `__proto__` so that `__lookupGetter__` will return getter only
                // if it's owned by an object.
                var prototype = object.__proto__;
                var notPrototypeOfObject = object !== prototypeOfObject;
                // avoid recursion problem, breaking in Opera Mini when
                // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
                // or any other Object.prototype accessor
                if (notPrototypeOfObject) {
                    object.__proto__ = prototypeOfObject;
                }

                var getter = lookupGetter(object, property);
                var setter = lookupSetter(object, property);

                if (notPrototypeOfObject) {
                    // Once we have getter and setter we can put values back.
                    object.__proto__ = prototype;
                }

                if (getter || setter) {
                    if (getter) {
                        descriptor.get = getter;
                    }
                    if (setter) {
                        descriptor.set = setter;
                    }
                    // If it was accessor property we're done and return here
                    // in order to avoid adding `value` to the descriptor.
                    return descriptor;
                }
            }

            // If we got this far we know that object has an own property that is
            // not an accessor so we set it as a value and return descriptor.
            descriptor.value = object[property];
            descriptor.writable = true;
            return descriptor;
        };
        /* eslint-enable no-proto */
    }

    // ES5 15.2.3.4
    // http://es5.github.com/#x15.2.3.4
    if (!Object.getOwnPropertyNames) {
        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
            return Object.keys(object);
        };
    }

    // ES5 15.2.3.5
    // http://es5.github.com/#x15.2.3.5
    if (!Object.create) {

        // Contributed by Brandon Benvie, October, 2012
        var createEmpty;
        var supportsProto = !({ __proto__: null } instanceof Object);
        // the following produces false positives
        // in Opera Mini => not a reliable check
        // Object.prototype.__proto__ === null

        // Check for document.domain and active x support
        // No need to use active x approach when document.domain is not set
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        /* global ActiveXObject */
        var shouldUseActiveX = function shouldUseActiveX() {
            // return early if document.domain not set
            if (!document.domain) {
                return false;
            }

            try {
                return !!new ActiveXObject('htmlfile');
            } catch (exception) {
                return false;
            }
        };

        // This supports IE8 when document.domain is used
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        var getEmptyViaActiveX = function getEmptyViaActiveX() {
            var empty;
            var xDoc;

            xDoc = new ActiveXObject('htmlfile');

            var script = 'script';
            xDoc.write('<' + script + '></' + script + '>');
            xDoc.close();

            empty = xDoc.parentWindow.Object.prototype;
            xDoc = null;

            return empty;
        };

        // The original implementation using an iframe
        // before the activex approach was added
        // see https://github.com/es-shims/es5-shim/issues/150
        var getEmptyViaIFrame = function getEmptyViaIFrame() {
            var iframe = document.createElement('iframe');
            var parent = document.body || document.documentElement;
            var empty;

            iframe.style.display = 'none';
            parent.appendChild(iframe);
            // eslint-disable-next-line no-script-url
            iframe.src = 'javascript:';

            empty = iframe.contentWindow.Object.prototype;
            parent.removeChild(iframe);
            iframe = null;

            return empty;
        };

        /* global document */
        if (supportsProto || typeof document === 'undefined') {
            createEmpty = function () {
                return { __proto__: null };
            };
        } else {
            // In old IE __proto__ can't be used to manually set `null`, nor does
            // any other method exist to make an object that inherits from nothing,
            // aside from Object.prototype itself. Instead, create a new global
            // object and *steal* its Object.prototype and strip it bare. This is
            // used as the prototype to create nullary objects.
            createEmpty = function () {
                // Determine which approach to use
                // see https://github.com/es-shims/es5-shim/issues/150
                var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();

                delete empty.constructor;
                delete empty.hasOwnProperty;
                delete empty.propertyIsEnumerable;
                delete empty.isPrototypeOf;
                delete empty.toLocaleString;
                delete empty.toString;
                delete empty.valueOf;

                var Empty = function Empty() {};
                Empty.prototype = empty;
                // short-circuit future calls
                createEmpty = function () {
                    return new Empty();
                };
                return new Empty();
            };
        }

        Object.create = function create(prototype, properties) {

            var object;
            var Type = function Type() {}; // An empty constructor.

            if (prototype === null) {
                object = createEmpty();
            } else {
                if (prototype !== null && isPrimitive(prototype)) {
                    // In the native implementation `parent` can be `null`
                    // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
                    // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
                    // like they are in modern browsers. Using `Object.create` on DOM elements
                    // is...err...probably inappropriate, but the native version allows for it.
                    throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
                }
                Type.prototype = prototype;
                object = new Type();
                // IE has no built-in implementation of `Object.getPrototypeOf`
                // neither `__proto__`, but this manually setting `__proto__` will
                // guarantee that `Object.getPrototypeOf` will work as expected with
                // objects created using `Object.create`
                // eslint-disable-next-line no-proto
                object.__proto__ = prototype;
            }

            if (properties !== void 0) {
                Object.defineProperties(object, properties);
            }

            return object;
        };
    }

    // ES5 15.2.3.6
    // http://es5.github.com/#x15.2.3.6

    // Patch for WebKit and IE8 standard mode
    // Designed by hax <hax.github.com>
    // related issue: https://github.com/es-shims/es5-shim/issues#issue/5
    // IE8 Reference:
    //     http://msdn.microsoft.com/en-us/library/dd282900.aspx
    //     http://msdn.microsoft.com/en-us/library/dd229916.aspx
    // WebKit Bugs:
    //     https://bugs.webkit.org/show_bug.cgi?id=36423

    var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
        try {
            Object.defineProperty(object, 'sentinel', {});
            return 'sentinel' in object;
        } catch (exception) {
            return false;
        }
    };

    // check whether defineProperty works if it's given. Otherwise,
    // shim partially.
    if (Object.defineProperty) {
        var definePropertyWorksOnObject = doesDefinePropertyWork({});
        var definePropertyWorksOnDom = typeof document === 'undefined' ||
            doesDefinePropertyWork(document.createElement('div'));
        if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
            var definePropertyFallback = Object.defineProperty,
                definePropertiesFallback = Object.defineProperties;
        }
    }

    if (!Object.defineProperty || definePropertyFallback) {
        var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
        var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
        var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

        Object.defineProperty = function defineProperty(object, property, descriptor) {
            if (isPrimitive(object)) {
                throw new TypeError(ERR_NON_OBJECT_TARGET + object);
            }
            if (isPrimitive(descriptor)) {
                throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
            }
            // make a valiant attempt to use the real defineProperty
            // for I8's DOM elements.
            if (definePropertyFallback) {
                try {
                    return definePropertyFallback.call(Object, object, property, descriptor);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            // If it's a data property.
            if ('value' in descriptor) {
                // fail silently if 'writable', 'enumerable', or 'configurable'
                // are requested but not supported
                /*
                // alternate approach:
                if ( // can't implement these features; allow false but not true
                    ('writable' in descriptor && !descriptor.writable) ||
                    ('enumerable' in descriptor && !descriptor.enumerable) ||
                    ('configurable' in descriptor && !descriptor.configurable)
                ))
                    throw new RangeError(
                        'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
                    );
                */

                if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                    // As accessors are supported only on engines implementing
                    // `__proto__` we can safely override `__proto__` while defining
                    // a property to make sure that we don't hit an inherited
                    // accessor.
                    /* eslint-disable no-proto */
                    var prototype = object.__proto__;
                    object.__proto__ = prototypeOfObject;
                    // Deleting a property anyway since getter / setter may be
                    // defined on object itself.
                    delete object[property];
                    object[property] = descriptor.value;
                    // Setting original `__proto__` back now.
                    object.__proto__ = prototype;
                    /* eslint-enable no-proto */
                } else {
                    object[property] = descriptor.value;
                }
            } else {
                var hasGetter = 'get' in descriptor;
                var hasSetter = 'set' in descriptor;
                if (!supportsAccessors && (hasGetter || hasSetter)) {
                    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
                }
                // If we got that far then getters and setters can be defined !!
                if (hasGetter) {
                    defineGetter(object, property, descriptor.get);
                }
                if (hasSetter) {
                    defineSetter(object, property, descriptor.set);
                }
            }
            return object;
        };
    }

    // ES5 15.2.3.7
    // http://es5.github.com/#x15.2.3.7
    if (!Object.defineProperties || definePropertiesFallback) {
        Object.defineProperties = function defineProperties(object, properties) {
            // make a valiant attempt to use the real defineProperties
            if (definePropertiesFallback) {
                try {
                    return definePropertiesFallback.call(Object, object, properties);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            Object.keys(properties).forEach(function (property) {
                if (property !== '__proto__') {
                    Object.defineProperty(object, property, properties[property]);
                }
            });
            return object;
        };
    }

    // ES5 15.2.3.8
    // http://es5.github.com/#x15.2.3.8
    if (!Object.seal) {
        Object.seal = function seal(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.seal can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // ES5 15.2.3.9
    // http://es5.github.com/#x15.2.3.9
    if (!Object.freeze) {
        Object.freeze = function freeze(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.freeze can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // detect a Rhino bug and patch it
    try {
        Object.freeze(function () {});
    } catch (exception) {
        Object.freeze = (function (freezeObject) {
            return function freeze(object) {
                if (typeof object === 'function') {
                    return object;
                } else {
                    return freezeObject(object);
                }
            };
        }(Object.freeze));
    }

    // ES5 15.2.3.10
    // http://es5.github.com/#x15.2.3.10
    if (!Object.preventExtensions) {
        Object.preventExtensions = function preventExtensions(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.preventExtensions can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // ES5 15.2.3.11
    // http://es5.github.com/#x15.2.3.11
    if (!Object.isSealed) {
        Object.isSealed = function isSealed(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.isSealed can only be called on Objects.');
            }
            return false;
        };
    }

    // ES5 15.2.3.12
    // http://es5.github.com/#x15.2.3.12
    if (!Object.isFrozen) {
        Object.isFrozen = function isFrozen(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.isFrozen can only be called on Objects.');
            }
            return false;
        };
    }

    // ES5 15.2.3.13
    // http://es5.github.com/#x15.2.3.13
    if (!Object.isExtensible) {
        Object.isExtensible = function isExtensible(object) {
            // 1. If Type(O) is not Object throw a TypeError exception.
            if (Object(object) !== object) {
                throw new TypeError('Object.isExtensible can only be called on Objects.');
            }
            // 2. Return the Boolean value of the [[Extensible]] internal property of O.
            var name = '';
            while (owns(object, name)) {
                name += '?';
            }
            object[name] = true;
            var returnValue = owns(object, name);
            delete object[name];
            return returnValue;
        };
    }

}));
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push = ArrayProto.push,
    slice = ArrayProto.slice,
    toString = ObjProto.toString,
    hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray = Array.isArray,
    nativeKeys = Object.keys,
    nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
  // This accumulates the arguments passed into an array, after a given index.
  var restArgs = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0);
      var rest = Array(length);
      var index;
      for (index = 0; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArgs(function(obj, method, args) {
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArgs(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArgs(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArgs(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArgs(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArgs(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArgs(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArgs(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArgs(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArgs(function(func, wait, args) {
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArgs = restArgs;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
      length = keys.length,
      results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArgs(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

   // Return a copy of the object without the blacklisted properties.
  _.omit = restArgs(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b !== 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, prop, fallback) {
    var value = object == null ? void 0 : object[prop];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());

/* Modified for sessionStorage support and EDGE bug */
/**
 * Simple localStorage with Cookie Fallback
 * v.1.0.0
 *
 * USAGE:
 * ----------------------------------------
 * Set New / Modify:
 *   store('my_key', 'some_value');
 *
 * Retrieve:
 *   store('my_key');
 *
 * Delete / Remove:
 *   store('my_key', null);
 */

(function() {
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = store;
        }
        exports.store = store;
    } else {
        window.store = store;
    }

    function store(key, value, options) {
        options = options || {};

        var lsSupport = false;
        var storage = options.useSession ? 'sessionStorage' : 'localStorage';

        if (!options.useCookies) {
            // localstorage & sessionstorage falls with error in EDGE for local files
            try {
                lsSupport = Boolean(window[storage]);
            } catch (e) {
                lsSupport = false;
            }
        }

        // If value is detected, set new or modify store
        if (typeof value !== "undefined" && value !== null) {
            // Convert object values to JSON
            if ( typeof value === 'object' ) {
                value = JSON.stringify(value);
            }
            // Set the store
            if (lsSupport) { // Native support
                window[storage].setItem(key, value);
            } else { // Use Cookie
                createCookie(key, value, options.expires || 30);
            }
        }

        // No value supplied, return value
        if (typeof value === "undefined") {
            // Get value
            if (lsSupport) { // Native support
                data = window[storage].getItem(key);
            } else { // Use cookie
                data = readCookie(key);
            }

            // Try to parse JSON...
            try {
                data = JSON.parse(data);
            }
            catch(e) {
                data = data;
            }

            return data;

        }

        // Null specified, remove store
        if (value === null) {
            if (lsSupport) { // Native support
                window[storage].removeItem(key);
            } else { // Use cookie
                createCookie(key, '', -1);
            }
        }

        /**
         * Creates new cookie or removes cookie with negative expiration
         * @param  key       The key or identifier for the store
         * @param  value     Contents of the store
         * @param  exp       Expiration - creation defaults to 30 days
         */

        function createCookie(key, value, exp) {
            var date = new Date();
            date.setTime(date.getTime() + (exp * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
            document.cookie = key + "=" + value + expires + "; path=/";
        }

        /**
         * Returns contents of cookie
         * @param  key       The key or identifier for the store
         */

        function readCookie(key) {
            var nameEQ = key + "=";
            var ca = document.cookie.split(';');
            for (var i = 0, max = ca.length; i < max; i++) {
                var c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

    };
}());

 

/*! highlight.js v9.12.0 | BSD3 License | git.io/hljslicense */
!function(e){var t="object"==typeof window&&window||"object"==typeof self&&self;"undefined"!=typeof exports?e(exports):t&&(t.hljs=e({}),"function"==typeof define&&define.amd&&define([],function(){return t.hljs}))}(function(e){function t(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function r(e){return e.nodeName.toLowerCase()}function a(e,t){var r=e&&e.exec(t);return r&&0===r.index}function n(e){return E.test(e)}function i(e){var t,r,a,i,s=e.className+" ";if(s+=e.parentNode?e.parentNode.className:"",r=M.exec(s))return w(r[1])?r[1]:"no-highlight";for(s=s.split(/\s+/),t=0,a=s.length;a>t;t++)if(i=s[t],n(i)||w(i))return i}function s(e){var t,r={},a=Array.prototype.slice.call(arguments,1);for(t in e)r[t]=e[t];return a.forEach(function(e){for(t in e)r[t]=e[t]}),r}function c(e){var t=[];return function a(e,n){for(var i=e.firstChild;i;i=i.nextSibling)3===i.nodeType?n+=i.nodeValue.length:1===i.nodeType&&(t.push({event:"start",offset:n,node:i}),n=a(i,n),r(i).match(/br|hr|img|input/)||t.push({event:"stop",offset:n,node:i}));return n}(e,0),t}function o(e,a,n){function i(){return e.length&&a.length?e[0].offset!==a[0].offset?e[0].offset<a[0].offset?e:a:"start"===a[0].event?e:a:e.length?e:a}function s(e){function a(e){return" "+e.nodeName+'="'+t(e.value).replace('"',"&quot;")+'"'}u+="<"+r(e)+N.map.call(e.attributes,a).join("")+">"}function c(e){u+="</"+r(e)+">"}function o(e){("start"===e.event?s:c)(e.node)}for(var l=0,u="",d=[];e.length||a.length;){var b=i();if(u+=t(n.substring(l,b[0].offset)),l=b[0].offset,b===e){d.reverse().forEach(c);do o(b.splice(0,1)[0]),b=i();while(b===e&&b.length&&b[0].offset===l);d.reverse().forEach(s)}else"start"===b[0].event?d.push(b[0].node):d.pop(),o(b.splice(0,1)[0])}return u+t(n.substr(l))}function l(e){return e.v&&!e.cached_variants&&(e.cached_variants=e.v.map(function(t){return s(e,{v:null},t)})),e.cached_variants||e.eW&&[s(e)]||[e]}function u(e){function t(e){return e&&e.source||e}function r(r,a){return new RegExp(t(r),"m"+(e.cI?"i":"")+(a?"g":""))}function a(n,i){if(!n.compiled){if(n.compiled=!0,n.k=n.k||n.bK,n.k){var s={},c=function(t,r){e.cI&&(r=r.toLowerCase()),r.split(" ").forEach(function(e){var r=e.split("|");s[r[0]]=[t,r[1]?Number(r[1]):1]})};"string"==typeof n.k?c("keyword",n.k):k(n.k).forEach(function(e){c(e,n.k[e])}),n.k=s}n.lR=r(n.l||/\w+/,!0),i&&(n.bK&&(n.b="\\b("+n.bK.split(" ").join("|")+")\\b"),n.b||(n.b=/\B|\b/),n.bR=r(n.b),n.e||n.eW||(n.e=/\B|\b/),n.e&&(n.eR=r(n.e)),n.tE=t(n.e)||"",n.eW&&i.tE&&(n.tE+=(n.e?"|":"")+i.tE)),n.i&&(n.iR=r(n.i)),null==n.r&&(n.r=1),n.c||(n.c=[]),n.c=Array.prototype.concat.apply([],n.c.map(function(e){return l("self"===e?n:e)})),n.c.forEach(function(e){a(e,n)}),n.starts&&a(n.starts,i);var o=n.c.map(function(e){return e.bK?"\\.?("+e.b+")\\.?":e.b}).concat([n.tE,n.i]).map(t).filter(Boolean);n.t=o.length?r(o.join("|"),!0):{exec:function(){return null}}}}a(e)}function d(e,r,n,i){function s(e,t){var r,n;for(r=0,n=t.c.length;n>r;r++)if(a(t.c[r].bR,e))return t.c[r]}function c(e,t){if(a(e.eR,t)){for(;e.endsParent&&e.parent;)e=e.parent;return e}return e.eW?c(e.parent,t):void 0}function o(e,t){return!n&&a(t.iR,e)}function l(e,t){var r=v.cI?t[0].toLowerCase():t[0];return e.k.hasOwnProperty(r)&&e.k[r]}function p(e,t,r,a){var n=a?"":L.classPrefix,i='<span class="'+n,s=r?"":R;return i+=e+'">',i+t+s}function m(){var e,r,a,n;if(!N.k)return t(E);for(n="",r=0,N.lR.lastIndex=0,a=N.lR.exec(E);a;)n+=t(E.substring(r,a.index)),e=l(N,a),e?(M+=e[1],n+=p(e[0],t(a[0]))):n+=t(a[0]),r=N.lR.lastIndex,a=N.lR.exec(E);return n+t(E.substr(r))}function f(){var e="string"==typeof N.sL;if(e&&!x[N.sL])return t(E);var r=e?d(N.sL,E,!0,k[N.sL]):b(E,N.sL.length?N.sL:void 0);return N.r>0&&(M+=r.r),e&&(k[N.sL]=r.top),p(r.language,r.value,!1,!0)}function g(){C+=null!=N.sL?f():m(),E=""}function _(e){C+=e.cN?p(e.cN,"",!0):"",N=Object.create(e,{parent:{value:N}})}function h(e,t){if(E+=e,null==t)return g(),0;var r=s(t,N);if(r)return r.skip?E+=t:(r.eB&&(E+=t),g(),r.rB||r.eB||(E=t)),_(r,t),r.rB?0:t.length;var a=c(N,t);if(a){var n=N;n.skip?E+=t:(n.rE||n.eE||(E+=t),g(),n.eE&&(E=t));do N.cN&&(C+=R),N.skip||(M+=N.r),N=N.parent;while(N!==a.parent);return a.starts&&_(a.starts,""),n.rE?0:t.length}if(o(t,N))throw new Error('Illegal lexeme "'+t+'" for mode "'+(N.cN||"<unnamed>")+'"');return E+=t,t.length||1}var v=w(e);if(!v)throw new Error('Unknown language: "'+e+'"');u(v);var y,N=i||v,k={},C="";for(y=N;y!==v;y=y.parent)y.cN&&(C=p(y.cN,"",!0)+C);var E="",M=0;try{for(var B,S,$=0;;){if(N.t.lastIndex=$,B=N.t.exec(r),!B)break;S=h(r.substring($,B.index),B[0]),$=B.index+S}for(h(r.substr($)),y=N;y.parent;y=y.parent)y.cN&&(C+=R);return{r:M,value:C,language:e,top:N}}catch(A){if(A.message&&-1!==A.message.indexOf("Illegal"))return{r:0,value:t(r)};throw A}}function b(e,r){r=r||L.languages||k(x);var a={r:0,value:t(e)},n=a;return r.filter(w).forEach(function(t){var r=d(t,e,!1);r.language=t,r.r>n.r&&(n=r),r.r>a.r&&(n=a,a=r)}),n.language&&(a.second_best=n),a}function p(e){return L.tabReplace||L.useBR?e.replace(B,function(e,t){return L.useBR&&"\n"===e?"<br>":L.tabReplace?t.replace(/\t/g,L.tabReplace):""}):e}function m(e,t,r){var a=t?C[t]:r,n=[e.trim()];return e.match(/\bhljs\b/)||n.push("hljs"),-1===e.indexOf(a)&&n.push(a),n.join(" ").trim()}function f(e){var t,r,a,s,l,u=i(e);n(u)||(L.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div"),t.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):t=e,l=t.textContent,a=u?d(u,l,!0):b(l),r=c(t),r.length&&(s=document.createElementNS("http://www.w3.org/1999/xhtml","div"),s.innerHTML=a.value,a.value=o(r,c(s),l)),a.value=p(a.value),e.innerHTML=a.value,e.className=m(e.className,u,a.language),e.result={language:a.language,re:a.r},a.second_best&&(e.second_best={language:a.second_best.language,re:a.second_best.r}))}function g(e){L=s(L,e)}function _(){if(!_.called){_.called=!0;var e=document.querySelectorAll("pre code");N.forEach.call(e,f)}}function h(){addEventListener("DOMContentLoaded",_,!1),addEventListener("load",_,!1)}function v(t,r){var a=x[t]=r(e);a.aliases&&a.aliases.forEach(function(e){C[e]=t})}function y(){return k(x)}function w(e){return e=(e||"").toLowerCase(),x[e]||x[C[e]]}var N=[],k=Object.keys,x={},C={},E=/^(no-?highlight|plain|text)$/i,M=/\blang(?:uage)?-([\w-]+)\b/i,B=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,R="</span>",L={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};return e.highlight=d,e.highlightAuto=b,e.fixMarkup=p,e.highlightBlock=f,e.configure=g,e.initHighlighting=_,e.initHighlightingOnLoad=h,e.registerLanguage=v,e.listLanguages=y,e.getLanguage=w,e.inherit=s,e.IR="[a-zA-Z]\\w*",e.UIR="[a-zA-Z_]\\w*",e.NR="\\b\\d+(\\.\\d+)?",e.CNR="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BNR="\\b(0b[01]+)",e.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BE={b:"\\\\[\\s\\S]",r:0},e.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[e.BE]},e.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[e.BE]},e.PWM={b:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.C=function(t,r,a){var n=e.inherit({cN:"comment",b:t,e:r,c:[]},a||{});return n.c.push(e.PWM),n.c.push({cN:"doctag",b:"(?:TODO|FIXME|NOTE|BUG|XXX):",r:0}),n},e.CLCM=e.C("//","$"),e.CBCM=e.C("/\\*","\\*/"),e.HCM=e.C("#","$"),e.NM={cN:"number",b:e.NR,r:0},e.CNM={cN:"number",b:e.CNR,r:0},e.BNM={cN:"number",b:e.BNR,r:0},e.CSSNM={cN:"number",b:e.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0},e.RM={cN:"regexp",b:/\//,e:/\/[gimuy]*/,i:/\n/,c:[e.BE,{b:/\[/,e:/\]/,r:0,c:[e.BE]}]},e.TM={cN:"title",b:e.IR,r:0},e.UTM={cN:"title",b:e.UIR,r:0},e.METHOD_GUARD={b:"\\.\\s*"+e.UIR,r:0},e.registerLanguage("apache",function(e){var t={cN:"number",b:"[\\$%]\\d+"};return{aliases:["apacheconf"],cI:!0,c:[e.HCM,{cN:"section",b:"</?",e:">"},{cN:"attribute",b:/\w+/,r:0,k:{nomarkup:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{e:/$/,r:0,k:{literal:"on off all"},c:[{cN:"meta",b:"\\s\\[",e:"\\]$"},{cN:"variable",b:"[\\$%]\\{",e:"\\}",c:["self",t]},t,e.QSM]}}],i:/\S/}}),e.registerLanguage("bash",function(e){var t={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)}/}]},r={cN:"string",b:/"/,e:/"/,c:[e.BE,t,{cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]}]},a={cN:"string",b:/'/,e:/'/};return{aliases:["sh","zsh"],l:/\b-?[a-z\._]+\b/,k:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},c:[{cN:"meta",b:/^#![^\n]+sh\s*$/,r:10},{cN:"function",b:/\w[\w\d_]*\s*\(\s*\)\s*\{/,rB:!0,c:[e.inherit(e.TM,{b:/\w[\w\d_]*/})],r:0},e.HCM,r,a,t]}}),e.registerLanguage("coffeescript",function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",built_in:"npm require console print module global window document"},r="[A-Za-z$_][0-9A-Za-z$_]*",a={cN:"subst",b:/#\{/,e:/}/,k:t},n=[e.BNM,e.inherit(e.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/"""/,e:/"""/,c:[e.BE,a]},{b:/"/,e:/"/,c:[e.BE,a]}]},{cN:"regexp",v:[{b:"///",e:"///",c:[a,e.HCM]},{b:"//[gim]*",r:0},{b:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{b:"@"+r},{sL:"javascript",eB:!0,eE:!0,v:[{b:"```",e:"```"},{b:"`",e:"`"}]}];a.c=n;var i=e.inherit(e.TM,{b:r}),s="(\\(.*\\))?\\s*\\B[-=]>",c={cN:"params",b:"\\([^\\(]",rB:!0,c:[{b:/\(/,e:/\)/,k:t,c:["self"].concat(n)}]};return{aliases:["coffee","cson","iced"],k:t,i:/\/\*/,c:n.concat([e.C("###","###"),e.HCM,{cN:"function",b:"^\\s*"+r+"\\s*=\\s*"+s,e:"[-=]>",rB:!0,c:[i,c]},{b:/[:\(,=]\s*/,r:0,c:[{cN:"function",b:s,e:"[-=]>",rB:!0,c:[c]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[i]},i]},{b:r+":",e:":",rB:!0,rE:!0,r:0}])}}),e.registerLanguage("cpp",function(e){var t={cN:"keyword",b:"\\b[a-z\\d_]*_t\\b"},r={cN:"string",v:[{b:'(u8?|U)?L?"',e:'"',i:"\\n",c:[e.BE]},{b:'(u8?|U)?R"',e:'"',c:[e.BE]},{b:"'\\\\?.",e:"'",i:"."}]},a={cN:"number",v:[{b:"\\b(0b[01']+)"},{b:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{b:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],r:0},n={cN:"meta",b:/#\s*[a-z]+\b/,e:/$/,k:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},c:[{b:/\\\n/,r:0},e.inherit(r,{cN:"meta-string"}),{cN:"meta-string",b:/<[^\n>]*>/,e:/$/,i:"\\n"},e.CLCM,e.CBCM]},i=e.IR+"\\s*\\(",s={keyword:"int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not",built_in:"std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",literal:"true false nullptr NULL"},c=[t,e.CLCM,e.CBCM,a,r];return{aliases:["c","cc","h","c++","h++","hpp"],k:s,i:"</",c:c.concat([n,{b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:s,c:["self",t]},{b:e.IR+"::",k:s},{v:[{b:/=/,e:/;/},{b:/\(/,e:/\)/},{bK:"new throw return else",e:/;/}],k:s,c:c.concat([{b:/\(/,e:/\)/,k:s,c:c.concat(["self"]),r:0}]),r:0},{cN:"function",b:"("+e.IR+"[\\*&\\s]+)+"+i,rB:!0,e:/[{;=]/,eE:!0,k:s,i:/[^\w\s\*&]/,c:[{b:i,rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:s,r:0,c:[e.CLCM,e.CBCM,r,a,t]},e.CLCM,e.CBCM,n]},{cN:"class",bK:"class struct",e:/[{;:]/,c:[{b:/</,e:/>/,c:["self"]},e.TM]}]),exports:{preprocessor:n,strings:r,k:s}}}),e.registerLanguage("cs",function(e){var t={keyword:"abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long nameof object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield",literal:"null false true"},r={cN:"string",b:'@"',e:'"',c:[{b:'""'}]},a=e.inherit(r,{i:/\n/}),n={cN:"subst",b:"{",e:"}",k:t},i=e.inherit(n,{i:/\n/}),s={cN:"string",b:/\$"/,e:'"',i:/\n/,c:[{b:"{{"},{b:"}}"},e.BE,i]},c={cN:"string",b:/\$@"/,e:'"',c:[{b:"{{"},{b:"}}"},{b:'""'},n]},o=e.inherit(c,{i:/\n/,c:[{b:"{{"},{b:"}}"},{b:'""'},i]});n.c=[c,s,r,e.ASM,e.QSM,e.CNM,e.CBCM],i.c=[o,s,a,e.ASM,e.QSM,e.CNM,e.inherit(e.CBCM,{i:/\n/})];var l={v:[c,s,r,e.ASM,e.QSM]},u=e.IR+"(<"+e.IR+"(\\s*,\\s*"+e.IR+")*>)?(\\[\\])?";return{aliases:["csharp"],k:t,i:/::/,c:[e.C("///","$",{rB:!0,c:[{cN:"doctag",v:[{b:"///",r:0},{b:"<!--|-->"},{b:"</?",e:">"}]}]}),e.CLCM,e.CBCM,{cN:"meta",b:"#",e:"$",k:{"meta-keyword":"if else elif endif define undef warning error line region endregion pragma checksum"}},l,e.CNM,{bK:"class interface",e:/[{;=]/,i:/[^\s:]/,c:[e.TM,e.CLCM,e.CBCM]},{bK:"namespace",e:/[{;=]/,i:/[^\s:]/,c:[e.inherit(e.TM,{b:"[a-zA-Z](\\.?\\w)*"}),e.CLCM,e.CBCM]},{cN:"meta",b:"^\\s*\\[",eB:!0,e:"\\]",eE:!0,c:[{cN:"meta-string",b:/"/,e:/"/}]},{bK:"new return throw await else",r:0},{cN:"function",b:"("+u+"\\s+)+"+e.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:t,c:[{b:e.IR+"\\s*\\(",rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,r:0,c:[l,e.CNM,e.CBCM]},e.CLCM,e.CBCM]}]}}),e.registerLanguage("css",function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",r={b:/[A-Z\_\.\-]+\s*:/,rB:!0,e:";",eW:!0,c:[{cN:"attribute",b:/\S/,e:":",eE:!0,starts:{eW:!0,eE:!0,c:[{b:/[\w-]+\(/,rB:!0,c:[{cN:"built_in",b:/[\w-]+/},{b:/\(/,e:/\)/,c:[e.ASM,e.QSM]}]},e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:"number",b:"#[0-9A-Fa-f]+"},{cN:"meta",b:"!important"}]}}]};return{cI:!0,i:/[=\/|'\$]/,c:[e.CBCM,{cN:"selector-id",b:/#[A-Za-z0-9_-]+/},{cN:"selector-class",b:/\.[A-Za-z0-9_-]+/},{cN:"selector-attr",b:/\[/,e:/\]/,i:"$"},{cN:"selector-pseudo",b:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{b:"@(font-face|page)",l:"[a-z-]+",k:"font-face page"},{b:"@",e:"[{;]",i:/:/,c:[{cN:"keyword",b:/\w+/},{b:/\s/,eW:!0,eE:!0,r:0,c:[e.ASM,e.QSM,e.CSSNM]}]},{cN:"selector-tag",b:t,r:0},{b:"{",e:"}",i:/\S/,c:[e.CBCM,r]}]}}),e.registerLanguage("diff",function(e){return{aliases:["patch"],c:[{cN:"meta",r:10,v:[{b:/^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},{b:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{b:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{cN:"comment",v:[{b:/Index: /,e:/$/},{b:/={3,}/,e:/$/},{b:/^\-{3}/,e:/$/},{b:/^\*{3} /,e:/$/},{b:/^\+{3}/,e:/$/},{b:/\*{5}/,e:/\*{5}$/}]},{cN:"addition",b:"^\\+",e:"$"},{cN:"deletion",b:"^\\-",e:"$"},{cN:"addition",b:"^\\!",e:"$"}]}}),e.registerLanguage("http",function(e){var t="HTTP/[0-9\\.]+";return{aliases:["https"],i:"\\S",c:[{b:"^"+t,e:"$",c:[{cN:"number",b:"\\b\\d{3}\\b"}]},{b:"^[A-Z]+ (.*?) "+t+"$",rB:!0,e:"$",c:[{cN:"string",b:" ",e:" ",eB:!0,eE:!0},{b:t},{cN:"keyword",b:"[A-Z]+"}]},{cN:"attribute",b:"^\\w",e:": ",eE:!0,i:"\\n|\\s|=",starts:{e:"$",r:0}},{b:"\\n\\n",starts:{sL:[],eW:!0}}]}}),e.registerLanguage("ini",function(e){var t={cN:"string",c:[e.BE],v:[{b:"'''",e:"'''",r:10},{b:'"""',e:'"""',r:10},{b:'"',e:'"'},{b:"'",e:"'"}]};return{aliases:["toml"],cI:!0,i:/\S/,c:[e.C(";","$"),e.HCM,{cN:"section",b:/^\s*\[+/,e:/\]+/},{b:/^[a-z0-9\[\]_-]+\s*=\s*/,e:"$",rB:!0,c:[{cN:"attr",b:/[a-z0-9\[\]_-]+/},{b:/=/,eW:!0,r:0,c:[{cN:"literal",b:/\bon|off|true|false|yes|no\b/},{cN:"variable",v:[{b:/\$[\w\d"][\w\d_]*/},{b:/\$\{(.*?)}/}]},t,{cN:"number",b:/([\+\-]+)?[\d]+_[\d_]+/},e.NM]}]}]}}),e.registerLanguage("java",function(e){var t="[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",r=t+"(<"+t+"(\\s*,\\s*"+t+")*>)?",a="false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",n="\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",i={cN:"number",b:n,r:0};return{aliases:["jsp"],k:a,i:/<\/|#/,c:[e.C("/\\*\\*","\\*/",{r:0,c:[{b:/\w+@/,r:0},{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,e.ASM,e.QSM,{cN:"class",bK:"class interface",e:/[{;=]/,eE:!0,k:"class interface",i:/[:"\[\]]/,c:[{bK:"extends implements"},e.UTM]},{bK:"new throw return else",r:0},{cN:"function",b:"("+r+"\\s+)+"+e.UIR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:a,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"params",b:/\(/,e:/\)/,k:a,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]},i,{cN:"meta",b:"@[A-Za-z]+"}]}}),e.registerLanguage("javascript",function(e){var t="[A-Za-z$_][0-9A-Za-z$_]*",r={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},a={cN:"number",v:[{b:"\\b(0[bB][01]+)"},{b:"\\b(0[oO][0-7]+)"},{b:e.CNR}],r:0},n={cN:"subst",b:"\\$\\{",e:"\\}",k:r,c:[]},i={cN:"string",b:"`",e:"`",c:[e.BE,n]};n.c=[e.ASM,e.QSM,i,a,e.RM];var s=n.c.concat([e.CBCM,e.CLCM]);return{aliases:["js","jsx"],k:r,c:[{cN:"meta",r:10,b:/^\s*['"]use (strict|asm)['"]/},{cN:"meta",b:/^#!/,e:/$/},e.ASM,e.QSM,i,e.CLCM,e.CBCM,a,{b:/[{,]\s*/,r:0,c:[{b:t+"\\s*:",rB:!0,r:0,c:[{cN:"attr",b:t,r:0}]}]},{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{cN:"function",b:"(\\(.*?\\)|"+t+")\\s*=>",rB:!0,e:"\\s*=>",c:[{cN:"params",v:[{b:t},{b:/\(\s*\)/},{b:/\(/,e:/\)/,eB:!0,eE:!0,k:r,c:s}]}]},{b:/</,e:/(\/\w+|\w+\/)>/,sL:"xml",c:[{b:/<\w+\s*\/>/,skip:!0},{b:/<\w+/,e:/(\/\w+|\w+\/)>/,skip:!0,c:[{b:/<\w+\s*\/>/,skip:!0},"self"]}]}],r:0},{cN:"function",bK:"function",e:/\{/,eE:!0,c:[e.inherit(e.TM,{b:t}),{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,c:s}],i:/\[|%/},{b:/\$[(.]/},e.METHOD_GUARD,{cN:"class",bK:"class",e:/[{;=]/,eE:!0,i:/[:"\[\]]/,c:[{bK:"extends"},e.UTM]},{bK:"constructor",e:/\{/,eE:!0}],i:/#(?!!)/}}),e.registerLanguage("json",function(e){var t={literal:"true false null"},r=[e.QSM,e.CNM],a={e:",",eW:!0,eE:!0,c:r,k:t},n={b:"{",e:"}",c:[{cN:"attr",b:/"/,e:/"/,c:[e.BE],i:"\\n"},e.inherit(a,{b:/:/})],i:"\\S"},i={b:"\\[",e:"\\]",c:[e.inherit(a)],i:"\\S"};return r.splice(r.length,0,n,i),{c:r,k:t,i:"\\S"}}),e.registerLanguage("makefile",function(e){var t={cN:"variable",v:[{b:"\\$\\("+e.UIR+"\\)",c:[e.BE]},{b:/\$[@%<?\^\+\*]/}]},r={cN:"string",b:/"/,e:/"/,c:[e.BE,t]},a={cN:"variable",b:/\$\([\w-]+\s/,e:/\)/,k:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},c:[t]},n={b:"^"+e.UIR+"\\s*[:+?]?=",i:"\\n",rB:!0,c:[{b:"^"+e.UIR,e:"[:+?]?=",eE:!0}]},i={cN:"meta",b:/^\.PHONY:/,e:/$/,k:{"meta-keyword":".PHONY"},l:/[\.\w]+/},s={cN:"section",b:/^[^\s]+:/,e:/$/,c:[t]};return{aliases:["mk","mak"],k:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",l:/[\w-]+/,c:[e.HCM,t,r,a,n,i,s]}}),e.registerLanguage("xml",function(e){var t="[A-Za-z0-9\\._:-]+",r={eW:!0,i:/</,r:0,c:[{cN:"attr",b:t,r:0},{b:/=\s*/,r:0,c:[{cN:"string",endsParent:!0,v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s"'=<>`]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist"],cI:!0,c:[{cN:"meta",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},e.C("<!--","-->",{r:10}),{b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{b:/<\?(php)?/,e:/\?>/,sL:"php",c:[{b:"/\\*",e:"\\*/",skip:!0}]},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{name:"style"},c:[r],starts:{e:"</style>",rE:!0,sL:["css","xml"]}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{name:"script"},c:[r],starts:{e:"</script>",rE:!0,sL:["actionscript","javascript","handlebars","xml"]}},{cN:"meta",v:[{b:/<\?xml/,e:/\?>/,r:10},{b:/<\?\w+/,e:/\?>/}]},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"name",b:/[^\/><\s]+/,r:0},r]}]}}),e.registerLanguage("markdown",function(e){return{aliases:["md","mkdown","mkd"],c:[{cN:"section",v:[{b:"^#{1,6}",e:"$"},{b:"^.+?\\n[=-]{2,}$"}]},{b:"<",e:">",sL:"xml",r:0},{cN:"bullet",b:"^([*+-]|(\\d+\\.))\\s+"},{cN:"strong",b:"[*_]{2}.+?[*_]{2}"},{cN:"emphasis",v:[{b:"\\*.+?\\*"},{b:"_.+?_",r:0}]},{cN:"quote",b:"^>\\s+",e:"$"},{cN:"code",v:[{b:"^```w*s*$",e:"^```s*$"},{b:"`.+?`"},{b:"^( {4}|	)",e:"$",r:0}]},{b:"^[-\\*]{3,}",e:"$"},{b:"\\[.+?\\][\\(\\[].*?[\\)\\]]",rB:!0,c:[{cN:"string",b:"\\[",e:"\\]",eB:!0,rE:!0,r:0},{cN:"link",b:"\\]\\(",e:"\\)",eB:!0,eE:!0},{cN:"symbol",b:"\\]\\[",e:"\\]",eB:!0,eE:!0}],r:10},{b:/^\[[^\n]+\]:/,rB:!0,c:[{cN:"symbol",b:/\[/,e:/\]/,eB:!0,eE:!0},{cN:"link",b:/:\s*/,e:/$/,eB:!0}]}]}}),e.registerLanguage("nginx",function(e){var t={cN:"variable",v:[{b:/\$\d+/},{b:/\$\{/,e:/}/},{b:"[\\$\\@]"+e.UIR}]},r={eW:!0,l:"[a-z/_]+",k:{literal:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},r:0,i:"=>",c:[e.HCM,{cN:"string",c:[e.BE,t],v:[{b:/"/,e:/"/},{b:/'/,e:/'/}]},{b:"([a-z]+):/",e:"\\s",eW:!0,eE:!0,c:[t]},{cN:"regexp",c:[e.BE,t],v:[{b:"\\s\\^",e:"\\s|{|;",rE:!0},{b:"~\\*?\\s+",e:"\\s|{|;",rE:!0},{b:"\\*(\\.[a-z\\-]+)+"},{b:"([a-z\\-]+\\.)+\\*"}]},{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+[kKmMgGdshdwy]*\\b",r:0},t]};return{aliases:["nginxconf"],c:[e.HCM,{b:e.UIR+"\\s+{",rB:!0,e:"{",c:[{cN:"section",b:e.UIR}],r:0},{b:e.UIR+"\\s",e:";|{",rB:!0,c:[{cN:"attribute",b:e.UIR,starts:r}],r:0}],i:"[^\\s\\}]"}}),e.registerLanguage("objectivec",function(e){var t={cN:"built_in",b:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},r={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},a=/[a-zA-Z@][a-zA-Z0-9_]*/,n="@interface @class @protocol @implementation";return{aliases:["mm","objc","obj-c"],k:r,l:a,i:"</",c:[t,e.CLCM,e.CBCM,e.CNM,e.QSM,{cN:"string",v:[{b:'@"',e:'"',i:"\\n",c:[e.BE]},{b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"}]},{cN:"meta",b:"#",e:"$",c:[{cN:"meta-string",v:[{b:'"',e:'"'},{b:"<",e:">"}]}]},{cN:"class",b:"("+n.split(" ").join("|")+")\\b",e:"({|$)",eE:!0,k:n,l:a,c:[e.UTM]},{b:"\\."+e.UIR,r:0}]}}),e.registerLanguage("perl",function(e){var t="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",r={cN:"subst",b:"[$@]\\{",e:"\\}",k:t},a={b:"->{",e:"}"},n={v:[{b:/\$\d/},{b:/[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},{b:/[\$%@][^\s\w{]/,r:0}]},i=[e.BE,r,n],s=[n,e.HCM,e.C("^\\=\\w","\\=cut",{eW:!0}),a,{cN:"string",c:i,v:[{b:"q[qwxr]?\\s*\\(",e:"\\)",r:5},{b:"q[qwxr]?\\s*\\[",e:"\\]",r:5},{b:"q[qwxr]?\\s*\\{",e:"\\}",r:5},{b:"q[qwxr]?\\s*\\|",e:"\\|",r:5},{b:"q[qwxr]?\\s*\\<",e:"\\>",r:5},{b:"qw\\s+q",e:"q",r:5},{b:"'",e:"'",c:[e.BE]},{b:'"',e:'"'},{b:"`",e:"`",c:[e.BE]},{b:"{\\w+}",c:[],r:0},{b:"-?\\w+\\s*\\=\\>",c:[],r:0}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\/\\/|"+e.RSR+"|\\b(split|return|print|reverse|grep)\\b)\\s*",k:"split return print reverse grep",r:0,c:[e.HCM,{cN:"regexp",b:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",r:10},{cN:"regexp",b:"(m|qr)?/",e:"/[a-z]*",c:[e.BE],r:0}]},{cN:"function",bK:"sub",e:"(\\s*\\(.*?\\))?[;{]",eE:!0,r:5,c:[e.TM]},{b:"-\\w\\b",r:0},{b:"^__DATA__$",e:"^__END__$",sL:"mojolicious",c:[{b:"^@@.*",e:"$",cN:"comment"}]}];return r.c=s,a.c=s,{aliases:["pl","pm"],l:/[\w\.]+/,k:t,c:s}}),e.registerLanguage("php",function(e){var t={b:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},r={cN:"meta",b:/<\?(php)?|\?>/},a={cN:"string",c:[e.BE,r],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},n={v:[e.BNM,e.CNM]};return{aliases:["php3","php4","php5","php6"],cI:!0,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",c:[e.HCM,e.C("//","$",{c:[r]}),e.C("/\\*","\\*/",{c:[{cN:"doctag",b:"@[A-Za-z]+"}]}),e.C("__halt_compiler.+?;",!1,{eW:!0,k:"__halt_compiler",l:e.UIR}),{cN:"string",b:/<<<['"]?\w+['"]?$/,e:/^\w+;?$/,c:[e.BE,{cN:"subst",v:[{b:/\$\w+/},{b:/\{\$/,e:/\}/}]}]},r,{cN:"keyword",b:/\$this\b/},t,{b:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{cN:"function",bK:"function",e:/[;{]/,eE:!0,i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",t,e.CBCM,a,n]}]},{cN:"class",bK:"class interface",e:"{",eE:!0,i:/[:\(\$"]/,c:[{bK:"extends implements"},e.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[e.UTM]},{bK:"use",e:";",c:[e.UTM]},{b:"=>"},a,n]}}),e.registerLanguage("python",function(e){var t={keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},r={cN:"meta",b:/^(>>>|\.\.\.) /},a={cN:"subst",b:/\{/,e:/\}/,k:t,i:/#/},n={cN:"string",c:[e.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,c:[r],r:10},{b:/(u|b)?r?"""/,e:/"""/,c:[r],r:10},{b:/(fr|rf|f)'''/,e:/'''/,c:[r,a]},{b:/(fr|rf|f)"""/,e:/"""/,c:[r,a]},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},{b:/(fr|rf|f)'/,e:/'/,c:[a]},{b:/(fr|rf|f)"/,e:/"/,c:[a]},e.ASM,e.QSM]},i={cN:"number",r:0,v:[{b:e.BNR+"[lLjJ]?"},{b:"\\b(0o[0-7]+)[lLjJ]?"},{b:e.CNR+"[lLjJ]?"}]},s={cN:"params",b:/\(/,e:/\)/,c:["self",r,i,n]};return a.c=[n,i,r],{aliases:["py","gyp"],k:t,i:/(<\/|->|\?)|=>/,c:[r,i,n,e.HCM,{v:[{cN:"function",bK:"def"},{cN:"class",bK:"class"}],e:/:/,i:/[${=;\n,]/,c:[e.UTM,s,{b:/->/,eW:!0,k:"None"}]},{cN:"meta",b:/^[\t ]*@/,e:/$/},{b:/\b(print|exec)\(/}]}}),e.registerLanguage("ruby",function(e){
var t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",r={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",literal:"true false nil"},a={cN:"doctag",b:"@[A-Za-z]+"},n={b:"#<",e:">"},i=[e.C("#","$",{c:[a]}),e.C("^\\=begin","^\\=end",{c:[a],r:10}),e.C("^__END__","\\n$")],s={cN:"subst",b:"#\\{",e:"}",k:r},c={cN:"string",c:[e.BE,s],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/`/,e:/`/},{b:"%[qQwWx]?\\(",e:"\\)"},{b:"%[qQwWx]?\\[",e:"\\]"},{b:"%[qQwWx]?{",e:"}"},{b:"%[qQwWx]?<",e:">"},{b:"%[qQwWx]?/",e:"/"},{b:"%[qQwWx]?%",e:"%"},{b:"%[qQwWx]?-",e:"-"},{b:"%[qQwWx]?\\|",e:"\\|"},{b:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/},{b:/<<(-?)\w+$/,e:/^\s*\w+$/}]},o={cN:"params",b:"\\(",e:"\\)",endsParent:!0,k:r},l=[c,n,{cN:"class",bK:"class module",e:"$|;",i:/=/,c:[e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{b:"<\\s*",c:[{b:"("+e.IR+"::)?"+e.IR}]}].concat(i)},{cN:"function",bK:"def",e:"$|;",c:[e.inherit(e.TM,{b:t}),o].concat(i)},{b:e.IR+"::"},{cN:"symbol",b:e.UIR+"(\\!|\\?)?:",r:0},{cN:"symbol",b:":(?!\\s)",c:[c,{b:t}],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{cN:"params",b:/\|/,e:/\|/,k:r},{b:"("+e.RSR+"|unless)\\s*",k:"unless",c:[n,{cN:"regexp",c:[e.BE,s],i:/\n/,v:[{b:"/",e:"/[a-z]*"},{b:"%r{",e:"}[a-z]*"},{b:"%r\\(",e:"\\)[a-z]*"},{b:"%r!",e:"![a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}].concat(i),r:0}].concat(i);s.c=l,o.c=l;var u="[>?]>",d="[\\w#]+\\(\\w+\\):\\d+:\\d+>",b="(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",p=[{b:/^\s*=>/,starts:{e:"$",c:l}},{cN:"meta",b:"^("+u+"|"+d+"|"+b+")",starts:{e:"$",c:l}}];return{aliases:["rb","gemspec","podspec","thor","irb"],k:r,i:/\/\*/,c:i.concat(p).concat(l)}}),e.registerLanguage("shell",function(e){return{aliases:["console"],c:[{cN:"meta",b:"^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]",starts:{e:"$",sL:"bash"}}]}}),e.registerLanguage("sql",function(e){var t=e.C("--","$");return{cI:!0,i:/[<>{}*#]/,c:[{bK:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment",e:/;/,eW:!0,l:/[\w\.]+/,k:{keyword:"abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select self sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",literal:"true false null",built_in:"array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text varchar varying void"},c:[{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]},{cN:"string",b:'"',e:'"',c:[e.BE,{b:'""'}]},{cN:"string",b:"`",e:"`",c:[e.BE]},e.CNM,e.CBCM,t]},e.CBCM,t]}}),e});
(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
    function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
    function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());

(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function v(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
    this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
    function w(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";"}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;y(a)&&null!==a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);y(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,G=!!window.FontFace;function H(){if(null===C){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}C=""!==a.style.font}return C}function I(a,b){return[a.style,a.weight,H()?a.stretch:"","100px",b].join(" ")}
    A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",x=b||3E3,D=(new Date).getTime();return new Promise(function(a,b){if(G){var J=new Promise(function(a,b){function e(){(new Date).getTime()-D>=x?b():document.fonts.load(I(c,c.family),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),K=new Promise(function(a,c){setTimeout(c,x)});Promise.race([K,J]).then(function(){a(c)},function(){b(c)})}else m(function(){function q(){var b;if(b=-1!=f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=
            h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==r&&g==r&&h==r||f==t&&g==t&&h==t||f==u&&g==u&&h==u)),b=!b;b&&(null!==d.parentNode&&d.parentNode.removeChild(d),clearTimeout(F),a(c))}function E(){if((new Date).getTime()-D>=x)null!==d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===a)f=e.a.offsetWidth,g=n.a.offsetWidth,
        h=p.a.offsetWidth,q();F=setTimeout(E,50)}}var e=new v(k),n=new v(k),p=new v(k),f=-1,g=-1,h=-1,r=-1,t=-1,u=-1,d=document.createElement("div"),F=0;d.dir="ltr";w(e,I(c,"sans-serif"));w(n,I(c,"serif"));w(p,I(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);r=e.a.offsetWidth;t=n.a.offsetWidth;u=p.a.offsetWidth;E();z(e,function(a){f=a;q()});w(e,I(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;q()});w(n,I(c,'"'+c.family+'",serif'));z(p,function(a){h=
        a;q()});w(p,I(c,'"'+c.family+'",monospace'))})})};window.FontFaceObserver=A;window.FontFaceObserver.prototype.check=window.FontFaceObserver.prototype.load=A.prototype.load;"undefined"!==typeof module&&(module.exports=window.FontFaceObserver);}());
/*!
 * Fuse.js v3.1.0 - Lightweight fuzzy-search (http://fusejs.io)
 *
 * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)
 * All Rights Reserved. Apache Software License 2.0
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */
(function webpackUniversalModuleDefinition(root, factory) {
    if(typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if(typeof define === 'function' && define.amd)
        define("Fuse", [], factory);
    else if(typeof exports === 'object')
        exports["Fuse"] = factory();
    else
        root["Fuse"] = factory();
})(this, function() {
    return /******/ (function(modules) { // webpackBootstrap
        /******/ 	// The module cache
        /******/ 	var installedModules = {};
        /******/
        /******/ 	// The require function
        /******/ 	function __webpack_require__(moduleId) {
            /******/
            /******/ 		// Check if module is in cache
            /******/ 		if(installedModules[moduleId]) {
                /******/ 			return installedModules[moduleId].exports;
                /******/ 		}
            /******/ 		// Create a new module (and put it into the cache)
            /******/ 		var module = installedModules[moduleId] = {
                /******/ 			i: moduleId,
                /******/ 			l: false,
                /******/ 			exports: {}
                /******/ 		};
            /******/
            /******/ 		// Execute the module function
            /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ 		// Flag the module as loaded
            /******/ 		module.l = true;
            /******/
            /******/ 		// Return the exports of the module
            /******/ 		return module.exports;
            /******/ 	}
        /******/
        /******/
        /******/ 	// expose the modules object (__webpack_modules__)
        /******/ 	__webpack_require__.m = modules;
        /******/
        /******/ 	// expose the module cache
        /******/ 	__webpack_require__.c = installedModules;
        /******/
        /******/ 	// identity function for calling harmony imports with the correct context
        /******/ 	__webpack_require__.i = function(value) { return value; };
        /******/
        /******/ 	// define getter function for harmony exports
        /******/ 	__webpack_require__.d = function(exports, name, getter) {
            /******/ 		if(!__webpack_require__.o(exports, name)) {
                /******/ 			Object.defineProperty(exports, name, {
                    /******/ 				configurable: false,
                    /******/ 				enumerable: true,
                    /******/ 				get: getter
                    /******/ 			});
                /******/ 		}
            /******/ 	};
        /******/
        /******/ 	// getDefaultExport function for compatibility with non-harmony modules
        /******/ 	__webpack_require__.n = function(module) {
            /******/ 		var getter = module && module.__esModule ?
                /******/ 			function getDefault() { return module['default']; } :
                /******/ 			function getModuleExports() { return module; };
            /******/ 		__webpack_require__.d(getter, 'a', getter);
            /******/ 		return getter;
            /******/ 	};
        /******/
        /******/ 	// Object.prototype.hasOwnProperty.call
        /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
        /******/
        /******/ 	// __webpack_public_path__
        /******/ 	__webpack_require__.p = "";
        /******/
        /******/ 	// Load entry module and return exports
        /******/ 	return __webpack_require__(__webpack_require__.s = 8);
        /******/ })
    /************************************************************************/
    /******/ ([
        /* 0 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Array]';
            };

            /***/ }),
        /* 1 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var bitapRegexSearch = __webpack_require__(5);
            var bitapSearch = __webpack_require__(7);
            var patternAlphabet = __webpack_require__(4);

            var Bitap = function () {
                function Bitap(pattern, _ref) {
                    var _ref$location = _ref.location,
                        location = _ref$location === undefined ? 0 : _ref$location,
                        _ref$distance = _ref.distance,
                        distance = _ref$distance === undefined ? 100 : _ref$distance,
                        _ref$threshold = _ref.threshold,
                        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
                        _ref$maxPatternLength = _ref.maxPatternLength,
                        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,
                        _ref$isCaseSensitive = _ref.isCaseSensitive,
                        isCaseSensitive = _ref$isCaseSensitive === undefined ? false : _ref$isCaseSensitive,
                        _ref$tokenSeparator = _ref.tokenSeparator,
                        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,
                        _ref$findAllMatches = _ref.findAllMatches,
                        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
                        _ref$minMatchCharLeng = _ref.minMatchCharLength,
                        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;

                    _classCallCheck(this, Bitap);

                    this.options = {
                        location: location,
                        distance: distance,
                        threshold: threshold,
                        maxPatternLength: maxPatternLength,
                        isCaseSensitive: isCaseSensitive,
                        tokenSeparator: tokenSeparator,
                        findAllMatches: findAllMatches,
                        minMatchCharLength: minMatchCharLength
                    };

                    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase();

                    if (this.pattern.length <= maxPatternLength) {
                        this.patternAlphabet = patternAlphabet(this.pattern);
                    }
                }

                _createClass(Bitap, [{
                    key: 'search',
                    value: function search(text) {
                        if (!this.options.isCaseSensitive) {
                            text = text.toLowerCase();
                        }

                        // Exact match
                        if (this.pattern === text) {
                            return {
                                isMatch: true,
                                score: 0,
                                matchedIndices: [[0, text.length - 1]]
                            };
                        }

                        // When pattern length is greater than the machine word length, just do a a regex comparison
                        var _options = this.options,
                            maxPatternLength = _options.maxPatternLength,
                            tokenSeparator = _options.tokenSeparator;

                        if (this.pattern.length > maxPatternLength) {
                            return bitapRegexSearch(text, this.pattern, tokenSeparator);
                        }

                        // Otherwise, use Bitap algorithm
                        var _options2 = this.options,
                            location = _options2.location,
                            distance = _options2.distance,
                            threshold = _options2.threshold,
                            findAllMatches = _options2.findAllMatches,
                            minMatchCharLength = _options2.minMatchCharLength;

                        return bitapSearch(text, this.pattern, this.patternAlphabet, {
                            location: location,
                            distance: distance,
                            threshold: threshold,
                            findAllMatches: findAllMatches,
                            minMatchCharLength: minMatchCharLength
                        });
                    }
                }]);

                return Bitap;
            }();

// let x = new Bitap("od mn war", {})
// let result = x.search("Old Man's War")
// console.log(result)

            module.exports = Bitap;

            /***/ }),
        /* 2 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var isArray = __webpack_require__(0);

            var deepValue = function deepValue(obj, path, list) {
                if (!path) {
                    // If there's no path left, we've gotten to the object we care about.
                    list.push(obj);
                } else {
                    var dotIndex = path.indexOf('.');
                    var firstSegment = path;
                    var remaining = null;

                    if (dotIndex !== -1) {
                        firstSegment = path.slice(0, dotIndex);
                        remaining = path.slice(dotIndex + 1);
                    }

                    var value = obj[firstSegment];

                    if (value !== null && value !== undefined) {
                        if (!remaining && (typeof value === 'string' || typeof value === 'number')) {
                            list.push(value.toString());
                        } else if (isArray(value)) {
                            // Search each item in the array.
                            for (var i = 0, len = value.length; i < len; i += 1) {
                                deepValue(value[i], remaining, list);
                            }
                        } else if (remaining) {
                            // An object. Recurse further.
                            deepValue(value, remaining, list);
                        }
                    }
                }

                return list;
            };

            module.exports = function (obj, path) {
                return deepValue(obj, path, []);
            };

            /***/ }),
        /* 3 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function () {
                var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

                var matchedIndices = [];
                var start = -1;
                var end = -1;
                var i = 0;

                for (var len = matchmask.length; i < len; i += 1) {
                    var match = matchmask[i];
                    if (match && start === -1) {
                        start = i;
                    } else if (!match && start !== -1) {
                        end = i - 1;
                        if (end - start + 1 >= minMatchCharLength) {
                            matchedIndices.push([start, end]);
                        }
                        start = -1;
                    }
                }

                // (i-1 - start) + 1 => i - start
                if (matchmask[i - 1] && i - start >= minMatchCharLength) {
                    matchedIndices.push([start, i - 1]);
                }

                return matchedIndices;
            };

            /***/ }),
        /* 4 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function (pattern) {
                var mask = {};
                var len = pattern.length;

                for (var i = 0; i < len; i += 1) {
                    mask[pattern.charAt(i)] = 0;
                }

                for (var _i = 0; _i < len; _i += 1) {
                    mask[pattern.charAt(_i)] |= 1 << len - _i - 1;
                }

                return mask;
            };

            /***/ }),
        /* 5 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var SPECIAL_CHARS_REGEX = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;

            module.exports = function (text, pattern) {
                var tokenSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : / +/g;

                var regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\$&').replace(tokenSeparator, '|'));
                var matches = text.match(regex);
                var isMatch = !!matches;
                var matchedIndices = [];

                if (isMatch) {
                    for (var i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {
                        var match = matches[i];
                        matchedIndices.push([text.indexOf(match), match.length - 1]);
                    }
                }

                return {
                    // TODO: revisit this score
                    score: isMatch ? 0.5 : 1,
                    isMatch: isMatch,
                    matchedIndices: matchedIndices
                };
            };

            /***/ }),
        /* 6 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function (pattern, _ref) {
                var _ref$errors = _ref.errors,
                    errors = _ref$errors === undefined ? 0 : _ref$errors,
                    _ref$currentLocation = _ref.currentLocation,
                    currentLocation = _ref$currentLocation === undefined ? 0 : _ref$currentLocation,
                    _ref$expectedLocation = _ref.expectedLocation,
                    expectedLocation = _ref$expectedLocation === undefined ? 0 : _ref$expectedLocation,
                    _ref$distance = _ref.distance,
                    distance = _ref$distance === undefined ? 100 : _ref$distance;

                var accuracy = errors / pattern.length;
                var proximity = Math.abs(expectedLocation - currentLocation);

                if (!distance) {
                    // Dodge divide by zero error.
                    return proximity ? 1.0 : accuracy;
                }

                return accuracy + proximity / distance;
            };

            /***/ }),
        /* 7 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var bitapScore = __webpack_require__(6);
            var matchedIndices = __webpack_require__(3);

            module.exports = function (text, pattern, patternAlphabet, _ref) {
                var _ref$location = _ref.location,
                    location = _ref$location === undefined ? 0 : _ref$location,
                    _ref$distance = _ref.distance,
                    distance = _ref$distance === undefined ? 100 : _ref$distance,
                    _ref$threshold = _ref.threshold,
                    threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
                    _ref$findAllMatches = _ref.findAllMatches,
                    findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
                    _ref$minMatchCharLeng = _ref.minMatchCharLength,
                    minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;

                var expectedLocation = location;
                // Set starting location at beginning text and initialize the alphabet.
                var textLen = text.length;
                // Highest score beyond which we give up.
                var currentThreshold = threshold;
                // Is there a nearby exact match? (speedup)
                var bestLocation = text.indexOf(pattern, expectedLocation);

                var patternLen = pattern.length;

                // a mask of the matches
                var matchMask = [];
                for (var i = 0; i < textLen; i += 1) {
                    matchMask[i] = 0;
                }

                if (bestLocation !== -1) {
                    var score = bitapScore(pattern, {
                        errors: 0,
                        currentLocation: bestLocation,
                        expectedLocation: expectedLocation,
                        distance: distance
                    });
                    currentThreshold = Math.min(score, currentThreshold);

                    // What about in the other direction? (speed up)
                    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen);

                    if (bestLocation !== -1) {
                        var _score = bitapScore(pattern, {
                            errors: 0,
                            currentLocation: bestLocation,
                            expectedLocation: expectedLocation,
                            distance: distance
                        });
                        currentThreshold = Math.min(_score, currentThreshold);
                    }
                }

                // Reset the best location
                bestLocation = -1;

                var lastBitArr = [];
                var finalScore = 1;
                var binMax = patternLen + textLen;

                var mask = 1 << patternLen - 1;

                for (var _i = 0; _i < patternLen; _i += 1) {
                    // Scan for the best match; each iteration allows for one more error.
                    // Run a binary search to determine how far from the match location we can stray
                    // at this error level.
                    var binMin = 0;
                    var binMid = binMax;

                    while (binMin < binMid) {
                        var _score3 = bitapScore(pattern, {
                            errors: _i,
                            currentLocation: expectedLocation + binMid,
                            expectedLocation: expectedLocation,
                            distance: distance
                        });

                        if (_score3 <= currentThreshold) {
                            binMin = binMid;
                        } else {
                            binMax = binMid;
                        }

                        binMid = Math.floor((binMax - binMin) / 2 + binMin);
                    }

                    // Use the result from this iteration as the maximum for the next.
                    binMax = binMid;

                    var start = Math.max(1, expectedLocation - binMid + 1);
                    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;

                    // Initialize the bit array
                    var bitArr = Array(finish + 2);

                    bitArr[finish + 1] = (1 << _i) - 1;

                    for (var j = finish; j >= start; j -= 1) {
                        var currentLocation = j - 1;
                        var charMatch = patternAlphabet[text.charAt(currentLocation)];

                        if (charMatch) {
                            matchMask[currentLocation] = 1;
                        }

                        // First pass: exact match
                        bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;

                        // Subsequent passes: fuzzy match
                        if (_i !== 0) {
                            bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
                        }

                        if (bitArr[j] & mask) {
                            finalScore = bitapScore(pattern, {
                                errors: _i,
                                currentLocation: currentLocation,
                                expectedLocation: expectedLocation,
                                distance: distance
                            });

                            // This match will almost certainly be better than any existing match.
                            // But check anyway.
                            if (finalScore <= currentThreshold) {
                                // Indeed it is
                                currentThreshold = finalScore;
                                bestLocation = currentLocation;

                                // Already passed `loc`, downhill from here on in.
                                if (bestLocation <= expectedLocation) {
                                    break;
                                }

                                // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.
                                start = Math.max(1, 2 * expectedLocation - bestLocation);
                            }
                        }
                    }

                    // No hope for a (better) match at greater error levels.
                    var _score2 = bitapScore(pattern, {
                        errors: _i + 1,
                        currentLocation: expectedLocation,
                        expectedLocation: expectedLocation,
                        distance: distance
                    });

                    if (_score2 > currentThreshold) {
                        break;
                    }

                    lastBitArr = bitArr;
                }

                // Count exact matches (those with a score of 0) to be "almost" exact
                return {
                    isMatch: bestLocation >= 0,
                    score: finalScore === 0 ? 0.001 : finalScore,
                    matchedIndices: matchedIndices(matchMask, minMatchCharLength)
                };
            };

            /***/ }),
        /* 8 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var Bitap = __webpack_require__(1);
            var deepValue = __webpack_require__(2);
            var isArray = __webpack_require__(0);

            var Fuse = function () {
                function Fuse(list, _ref) {
                    var _ref$location = _ref.location,
                        location = _ref$location === undefined ? 0 : _ref$location,
                        _ref$distance = _ref.distance,
                        distance = _ref$distance === undefined ? 100 : _ref$distance,
                        _ref$threshold = _ref.threshold,
                        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
                        _ref$maxPatternLength = _ref.maxPatternLength,
                        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,
                        _ref$caseSensitive = _ref.caseSensitive,
                        caseSensitive = _ref$caseSensitive === undefined ? false : _ref$caseSensitive,
                        _ref$tokenSeparator = _ref.tokenSeparator,
                        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,
                        _ref$findAllMatches = _ref.findAllMatches,
                        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
                        _ref$minMatchCharLeng = _ref.minMatchCharLength,
                        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng,
                        _ref$id = _ref.id,
                        id = _ref$id === undefined ? null : _ref$id,
                        _ref$keys = _ref.keys,
                        keys = _ref$keys === undefined ? [] : _ref$keys,
                        _ref$shouldSort = _ref.shouldSort,
                        shouldSort = _ref$shouldSort === undefined ? true : _ref$shouldSort,
                        _ref$getFn = _ref.getFn,
                        getFn = _ref$getFn === undefined ? deepValue : _ref$getFn,
                        _ref$sortFn = _ref.sortFn,
                        sortFn = _ref$sortFn === undefined ? function (a, b) {
                            return a.score - b.score;
                        } : _ref$sortFn,
                        _ref$tokenize = _ref.tokenize,
                        tokenize = _ref$tokenize === undefined ? false : _ref$tokenize,
                        _ref$matchAllTokens = _ref.matchAllTokens,
                        matchAllTokens = _ref$matchAllTokens === undefined ? false : _ref$matchAllTokens,
                        _ref$includeMatches = _ref.includeMatches,
                        includeMatches = _ref$includeMatches === undefined ? false : _ref$includeMatches,
                        _ref$includeScore = _ref.includeScore,
                        includeScore = _ref$includeScore === undefined ? false : _ref$includeScore,
                        _ref$verbose = _ref.verbose,
                        verbose = _ref$verbose === undefined ? false : _ref$verbose;

                    _classCallCheck(this, Fuse);

                    this.options = {
                        location: location,
                        distance: distance,
                        threshold: threshold,
                        maxPatternLength: maxPatternLength,
                        isCaseSensitive: caseSensitive,
                        tokenSeparator: tokenSeparator,
                        findAllMatches: findAllMatches,
                        minMatchCharLength: minMatchCharLength,
                        id: id,
                        keys: keys,
                        includeMatches: includeMatches,
                        includeScore: includeScore,
                        shouldSort: shouldSort,
                        getFn: getFn,
                        sortFn: sortFn,
                        verbose: verbose,
                        tokenize: tokenize,
                        matchAllTokens: matchAllTokens
                    };

                    this.setCollection(list);
                }

                _createClass(Fuse, [{
                    key: 'setCollection',
                    value: function setCollection(list) {
                        this.list = list;
                        return list;
                    }
                }, {
                    key: 'search',
                    value: function search(pattern) {
                        this._log('---------\nSearch pattern: "' + pattern + '"');

                        var _prepareSearchers2 = this._prepareSearchers(pattern),
                            tokenSearchers = _prepareSearchers2.tokenSearchers,
                            fullSearcher = _prepareSearchers2.fullSearcher;

                        var _search2 = this._search(tokenSearchers, fullSearcher),
                            weights = _search2.weights,
                            results = _search2.results;

                        this._computeScore(weights, results);

                        if (this.options.shouldSort) {
                            this._sort(results);
                        }

                        return this._format(results);
                    }
                }, {
                    key: '_prepareSearchers',
                    value: function _prepareSearchers() {
                        var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

                        var tokenSearchers = [];

                        if (this.options.tokenize) {
                            // Tokenize on the separator
                            var tokens = pattern.split(this.options.tokenSeparator);
                            for (var i = 0, len = tokens.length; i < len; i += 1) {
                                tokenSearchers.push(new Bitap(tokens[i], this.options));
                            }
                        }

                        var fullSearcher = new Bitap(pattern, this.options);

                        return { tokenSearchers: tokenSearchers, fullSearcher: fullSearcher };
                    }
                }, {
                    key: '_search',
                    value: function _search() {
                        var tokenSearchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                        var fullSearcher = arguments[1];

                        var list = this.list;
                        var resultMap = {};
                        var results = [];

                        // Check the first item in the list, if it's a string, then we assume
                        // that every item in the list is also a string, and thus it's a flattened array.
                        if (typeof list[0] === 'string') {
                            // Iterate over every item
                            for (var i = 0, len = list.length; i < len; i += 1) {
                                this._analyze({
                                    key: '',
                                    value: list[i],
                                    record: i,
                                    index: i
                                }, {
                                    resultMap: resultMap,
                                    results: results,
                                    tokenSearchers: tokenSearchers,
                                    fullSearcher: fullSearcher
                                });
                            }

                            return { weights: null, results: results };
                        }

                        // Otherwise, the first item is an Object (hopefully), and thus the searching
                        // is done on the values of the keys of each item.
                        var weights = {};
                        for (var _i = 0, _len = list.length; _i < _len; _i += 1) {
                            var item = list[_i];
                            // Iterate over every key
                            for (var j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {
                                var key = this.options.keys[j];
                                if (typeof key !== 'string') {
                                    weights[key.name] = {
                                        weight: 1 - key.weight || 1
                                    };
                                    if (key.weight <= 0 || key.weight > 1) {
                                        throw new Error('Key weight has to be > 0 and <= 1');
                                    }
                                    key = key.name;
                                } else {
                                    weights[key] = {
                                        weight: 1
                                    };
                                }

                                this._analyze({
                                    key: key,
                                    value: this.options.getFn(item, key),
                                    record: item,
                                    index: _i
                                }, {
                                    resultMap: resultMap,
                                    results: results,
                                    tokenSearchers: tokenSearchers,
                                    fullSearcher: fullSearcher
                                });
                            }
                        }

                        return { weights: weights, results: results };
                    }
                }, {
                    key: '_analyze',
                    value: function _analyze(_ref2, _ref3) {
                        var key = _ref2.key,
                            _ref2$arrayIndex = _ref2.arrayIndex,
                            arrayIndex = _ref2$arrayIndex === undefined ? -1 : _ref2$arrayIndex,
                            value = _ref2.value,
                            record = _ref2.record,
                            index = _ref2.index;
                        var _ref3$tokenSearchers = _ref3.tokenSearchers,
                            tokenSearchers = _ref3$tokenSearchers === undefined ? [] : _ref3$tokenSearchers,
                            _ref3$fullSearcher = _ref3.fullSearcher,
                            fullSearcher = _ref3$fullSearcher === undefined ? [] : _ref3$fullSearcher,
                            _ref3$resultMap = _ref3.resultMap,
                            resultMap = _ref3$resultMap === undefined ? {} : _ref3$resultMap,
                            _ref3$results = _ref3.results,
                            results = _ref3$results === undefined ? [] : _ref3$results;

                        // Check if the texvaluet can be searched
                        if (value === undefined || value === null) {
                            return;
                        }

                        var exists = false;
                        var averageScore = -1;
                        var numTextMatches = 0;

                        if (typeof value === 'string') {
                            this._log('\nKey: ' + (key === '' ? '-' : key));

                            var mainSearchResult = fullSearcher.search(value);
                            this._log('Full text: "' + value + '", score: ' + mainSearchResult.score);

                            if (this.options.tokenize) {
                                var words = value.split(this.options.tokenSeparator);
                                var scores = [];

                                for (var i = 0; i < tokenSearchers.length; i += 1) {
                                    var tokenSearcher = tokenSearchers[i];

                                    this._log('\nPattern: "' + tokenSearcher.pattern + '"');

                                    // let tokenScores = []
                                    var hasMatchInText = false;

                                    for (var j = 0; j < words.length; j += 1) {
                                        var word = words[j];
                                        var tokenSearchResult = tokenSearcher.search(word);
                                        var obj = {};
                                        if (tokenSearchResult.isMatch) {
                                            obj[word] = tokenSearchResult.score;
                                            exists = true;
                                            hasMatchInText = true;
                                            scores.push(tokenSearchResult.score);
                                        } else {
                                            obj[word] = 1;
                                            if (!this.options.matchAllTokens) {
                                                scores.push(1);
                                            }
                                        }
                                        this._log('Token: "' + word + '", score: ' + obj[word]);
                                        // tokenScores.push(obj)
                                    }

                                    if (hasMatchInText) {
                                        numTextMatches += 1;
                                    }
                                }

                                averageScore = scores[0];
                                var scoresLen = scores.length;
                                for (var _i2 = 1; _i2 < scoresLen; _i2 += 1) {
                                    averageScore += scores[_i2];
                                }
                                averageScore = averageScore / scoresLen;

                                this._log('Token score average:', averageScore);
                            }

                            var finalScore = mainSearchResult.score;
                            if (averageScore > -1) {
                                finalScore = (finalScore + averageScore) / 2;
                            }

                            this._log('Score average:', finalScore);

                            var checkTextMatches = this.options.tokenize && this.options.matchAllTokens ? numTextMatches >= tokenSearchers.length : true;

                            this._log('\nCheck Matches: ' + checkTextMatches);

                            // If a match is found, add the item to <rawResults>, including its score
                            if ((exists || mainSearchResult.isMatch) && checkTextMatches) {
                                // Check if the item already exists in our results
                                var existingResult = resultMap[index];
                                if (existingResult) {
                                    // Use the lowest score
                                    // existingResult.score, bitapResult.score
                                    existingResult.output.push({
                                        key: key,
                                        arrayIndex: arrayIndex,
                                        value: value,
                                        score: finalScore,
                                        matchedIndices: mainSearchResult.matchedIndices
                                    });
                                } else {
                                    // Add it to the raw result list
                                    resultMap[index] = {
                                        item: record,
                                        output: [{
                                            key: key,
                                            arrayIndex: arrayIndex,
                                            value: value,
                                            score: finalScore,
                                            matchedIndices: mainSearchResult.matchedIndices
                                        }]
                                    };

                                    results.push(resultMap[index]);
                                }
                            }
                        } else if (isArray(value)) {
                            for (var _i3 = 0, len = value.length; _i3 < len; _i3 += 1) {
                                this._analyze({
                                    key: key,
                                    arrayIndex: _i3,
                                    value: value[_i3],
                                    record: record,
                                    index: index
                                }, {
                                    resultMap: resultMap,
                                    results: results,
                                    tokenSearchers: tokenSearchers,
                                    fullSearcher: fullSearcher
                                });
                            }
                        }
                    }
                }, {
                    key: '_computeScore',
                    value: function _computeScore(weights, results) {
                        this._log('\n\nComputing score:\n');

                        for (var i = 0, len = results.length; i < len; i += 1) {
                            var output = results[i].output;
                            var scoreLen = output.length;

                            var totalScore = 0;
                            var bestScore = 1;

                            for (var j = 0; j < scoreLen; j += 1) {
                                var score = output[j].score;
                                var weight = weights ? weights[output[j].key].weight : 1;
                                var nScore = score * weight;

                                if (weight !== 1) {
                                    bestScore = Math.min(bestScore, nScore);
                                } else {
                                    output[j].nScore = nScore;
                                    totalScore += nScore;
                                }
                            }

                            results[i].score = bestScore === 1 ? totalScore / scoreLen : bestScore;

                            this._log(results[i]);
                        }
                    }
                }, {
                    key: '_sort',
                    value: function _sort(results) {
                        this._log('\n\nSorting....');
                        results.sort(this.options.sortFn);
                    }
                }, {
                    key: '_format',
                    value: function _format(results) {
                        var finalOutput = [];

                        this._log('\n\nOutput:\n\n', JSON.stringify(results));

                        var transformers = [];

                        if (this.options.includeMatches) {
                            transformers.push(function (result, data) {
                                var output = result.output;
                                data.matches = [];

                                for (var i = 0, len = output.length; i < len; i += 1) {
                                    var item = output[i];

                                    if (item.matchedIndices.length === 0) {
                                        continue;
                                    }

                                    var obj = {
                                        indices: item.matchedIndices,
                                        value: item.value
                                    };
                                    if (item.key) {
                                        obj.key = item.key;
                                    }
                                    if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {
                                        obj.arrayIndex = item.arrayIndex;
                                    }
                                    data.matches.push(obj);
                                }
                            });
                        }

                        if (this.options.includeScore) {
                            transformers.push(function (result, data) {
                                data.score = result.score;
                            });
                        }

                        for (var i = 0, len = results.length; i < len; i += 1) {
                            var result = results[i];

                            if (this.options.id) {
                                result.item = this.options.getFn(result.item, this.options.id)[0];
                            }

                            if (!transformers.length) {
                                finalOutput.push(result.item);
                                continue;
                            }

                            var data = {
                                item: result.item
                            };

                            for (var j = 0, _len2 = transformers.length; j < _len2; j += 1) {
                                transformers[j](result, data);
                            }

                            finalOutput.push(data);
                        }

                        return finalOutput;
                    }
                }, {
                    key: '_log',
                    value: function _log() {
                        if (this.options.verbose) {
                            var _console;

                            (_console = console).log.apply(_console, arguments);
                        }
                    }
                }]);

                return Fuse;
            }();

            module.exports = Fuse;

            /***/ })
        /******/ ]);
});
//# sourceMappingURL=fuse.js.map
var AllInOneMenuTemplate = '<%var chunks = ["<div class=\'cont all-in-one-toc\'><h1 class=\'heading1\'>" + localization.TableOfContents + "</h1>"],    markup;function htmlTreeBuilder(items) {    if (items.length) {        chunks.push("<ul class=\'contents contents_all-in-one\'>");    }    items.forEach(function (item) {        if (!item.hidden) {            chunks.push("<li class=\'contents__item\'>");            chunks.push("<a href=\'");            chunks.push(item.url.match(/([\\w_]+\\.htm[l]?)/i)[1]);            chunks.push("\'>");            chunks.push(item.text);            chunks.push("</a>");            if (item.children) {                htmlTreeBuilder(item.children);            }            chunks.push("</li>");        }    });    if (items.length) {        chunks.push("</ul>");    }}htmlTreeBuilder(menu);chunks.push("</div>");markup = chunks.join("");%><%= markup %>';
var AsideTemplate = '<div class="aside ">    <div class="aside__inner">        <div class="aside__search search hidden-xs hidden-sm">            <div class="search__wrapper">                <input  class="search__field js_search_text" id="serch-text"                        placeholder="<%= localization.SearchLabel %>" type="text" />                <button class="search__btn js_search" id="search-button"></button>                <button class="search__clear is-hidden js_search_clear"></button>            </div>        </div>        <div class="selector-mobile js_selector_mobile_versions"></div>        <div class="selector-mobile js_selector_mobile_langs"></div>        <div class="aside__menu js_tabs_viewport">            <div class="js-menu-content">                <div class="js_menu"></div>            </div><!--            <div id="tab-names" class="b-tab__content js-tab-content">                <div class="b-index js_index_literals"></div>            </div>-->            <div class="js-search-content js_not_default">                <div class="search-results js_search_result_wrapper"></div>            </div>        </div>    </div></div>';
var BottomLinksTemplate = '<div class="bottom-links">    <!--<div class="feedback">        <div class="feedback__heading">Feedback</div>        <div class="feedback__text">            Was this article helpful?        </div>        <div>            <button class="button" type="button">Yes</button>            <button class="button" type="button">No</button>        </div>    </div>-->    <% if ((localization.ArticleIdText && localization.ArticleIdText.trim() && serviceInfo.id) ||            (localization.LastReviewText && localization.LastReviewText.trim() && serviceInfo.reviewDate)) { %>        <div class="bottom-links__service-info">            <% if (serviceInfo.id) { %>                <%= localization.ArticleIdText %> <%= serviceInfo.id + serviceInfo.separator %>            <% } %>            <% if (serviceInfo.reviewDate) { %>                <%= localization.LastReviewText %> <%= serviceInfo.reviewDate %>            <% } %>        </div>    <% } %>    <div class="bottom-links__link">        <%= homeBtnHtml %>    </div></div>';
var ContainerTemplate = '<div class="main js_container">    <header class="header-wrapper js_header_placeholder"></header>    <div class="content js_main">        <div class="container">            <div class="row">                <div class="col-lg-4 col-md-5 col-xs-20 menu-box js_aside_placeholder"></div>                <div class="col-md-1 hidden-xs hidden-sm js_prev_btn_placeholder"></div>                <div class="col-lg-14 col-md-13 col-xs-20 js_content"></div>                <div class="col-md-1 hidden-xs hidden-sm js_next_btn_placeholder"></div>                <div class="col-lg-16 col-md-15 col-xs-20 align-flex-end">                    <footer class="js_footer_placeholder"></footer>                </div>            </div>        </div>    </div>    <aside class="mobile-search-results is-hidden g-scrollable js_scrollable js_mobile_search_result js_mobile_aside"></aside></div><div class="tooltip js_tooltip" data-id="">    <div class="tooltip__content js_tooltip_content"></div></div><% if (localization.RequestConsent && localization.CookiePolicyText && localization.CookiePolicyButton) { %>    <div class="cookie-policy js_cookie_policy">        <div class="cookie-policy__inner">            <%= localization.CookiePolicyText %>        </div>        <div class="cookie-policy__btn-wrapper">            <button type="button" class="cookie-policy__btn js_cookie_policy_btn"><%= localization.CookiePolicyButton %></button>        </div>    </div><% } %>';
var CustomStylesTemplate = '<style>    html {        color: <%= customization.ContentColorMain %>;    }    a {        color: <%= customization.LinkColor %>    }    a:hover {        color: <%= customization.LinkColorHover %>    }    a:visited {        color: <%= customization.LinkColorVisited %>    }    .page-title {        color: <%= customization.TitleColor %>;    }    /*.tablename,    .picturename,    .examplebodytext,    .examplebodytextblue2015,    .bottom-links__service-info,    .search-results__total,    .footer {        color: <%= customization.ContentColorSecondary %>;    }*/    .attentionbody,    .attentionbodytextindent,    .attentioncontinue1,    .attentioncontinue2,    .attentioncontinue3 {        color: <%= customization.AttentionBlockColor %>;    }    .warningbody,    .warningbodytextindent,    .warningcontinue1,    .warningcontinue2,    .warningcontinue3 {        color: <%= customization.WarningBlockColor %>;        border-color: <%= customization.WarningBlockBorder %>;        background: <%= customization.WarningBlockBackground %>;    }    .example-wrapper {        background: <%= customization.ExampleBlockBackground %> !important;    }    .exampleheading,    .examplebodytext,    .exampleheadingblue2015,    .examplebodytextblue2015 {        color: <%= customization.ExampleBlockColor %>;    }    mark {        background: <%= customization.SearchHighlightBackground %>;        color: <%= customization.SearchHighlightColor %>;    }    /* icons */    <% if (customization.IconsX1) { %>        .logo {            background-image: url(<%= customization.IconsX1.Logo %>);        }        .top-bar__icon_print {            background-image: url(<%= customization.IconsX1.PrintGray %>);        }        .top-bar__icon_support {            background-image: url(<%= customization.IconsX1.SupportGray %>);        }        .top-bar__icon_feedback {            background-image: url(<%= customization.IconsX1.EmailGray %>);        }        .search__btn:after {            background-image: url(<%= customization.IconsX1.SearchGray %>);        }        .header__search-btn {            background-image: url(<%= customization.IconsX1.SearchGreen %>);        }        .contents__toggle {            background-image: url(<%= customization.IconsX1.Expand %>);        }        .contents__toggle.is-toggled {            background-image: url(<%= customization.IconsX1.Collapse %>);        }        .nav-btn__link-next {            background-image: url(<%= customization.IconsX1.PathNext %>);        }        .nav-btn__link-prev {            background-image: url(<%= customization.IconsX1.PathPrev %>);        }        .hyperlinktemplate,        .namedhyperlinktemplate {            background-image: url(<%= customization.IconsX1.Externallink %>);        }        a.popuponclicktemplate:after,        a.glossaryhtmllinktemplate:after,        a.popuponclickcontexthelptemplate:after,        .expandingblocktemplate,        .expandingblocktemplatemac {            background-image: url(<%= customization.IconsX1.Expandblock %>);        }        [dir="rtl"] a.popuponclicktemplate:after,        [dir="rtl"] a.glossaryhtmllinktemplate:after,        [dir="rtl"] a.popuponclickcontexthelptemplate:after,        [dir="rtl"] .expandingblocktemplate:after,        [dir="rtl"] .expandingblocktemplatemac:after {            background-image: url(<%= customization.IconsX1.ExpandblockRtl %>);        }        .expandingblockclose:after {            background-image: url(<%= customization.IconsX1.Expandblockclose %>);        }        .header__mobile-menu-btn {            background-image: url(<%= customization.IconsX1.ContentsMobile %>);        }        .header__mobile-menu-btn.is-active {            background-image: url(<%= customization.IconsX1.GoBackGreen %>);        }    <% } %>    <% if (customization.IconsX2) { %>        @media only screen and (-webkit-min-device-pixel-ratio: 1.5) {            .logo {                background-image: url(<%= customization.IconsX2.Logo %>);            }            .top-bar__icon_print {                background-image: url(<%= customization.IconsX2.PrintGray %>);            }            .top-bar__icon_support {                background-image: url(<%= customization.IconsX2.SupportGray %>);            }            .top-bar__icon_feedback {                background-image: url(<%= customization.IconsX2.EmailGray %>);            }            .search__btn:after {                background-image: url(<%= customization.IconsX2.SearchGray %>);            }            .header__search-btn {                background-image: url(<%= customization.IconsX2.SearchGreen %>);            }            .contents__toggle {                background-image: url(<%= customization.IconsX2.Expand %>);            }            .contents__toggle.is-toggled {                background-image: url(<%= customization.IconsX2.Collapse %>);            }            .nav-btn__link-next {                background-image: url(<%= customization.IconsX2.PathNext %>);            }            .nav-btn__link-prev {                background-image: url(<%= customization.IconsX2.PathPrev %>);            }            .hyperlinktemplate,            .namedhyperlinktemplate {                background-image: url(<%= customization.IconsX2.Externallink %>);            }            a.popuponclicktemplate:after,            a.glossaryhtmllinktemplate:after,            a.popuponclickcontexthelptemplate:after,            .expandingblocktemplate,            .expandingblocktemplatemac {                background-image: url(<%= customization.IconsX2.Expandblock %>);            }            [dir="rtl"] a.popuponclicktemplate:after,            [dir="rtl"] a.glossaryhtmllinktemplate:after,            [dir="rtl"] a.popuponclickcontexthelptemplate:after,            [dir="rtl"] .expandingblocktemplate:after,            [dir="rtl"] .expandingblocktemplatemac:after {                background-image: url(<%= customization.IconsX2.ExpandblockRtl %>);            }            .expandingblockclose:after {                background-image: url(<%= customization.IconsX2.Expandblockclose %>);            }            .header__mobile-menu-btn {                background-image: url(<%= customization.IconsX2.ContentsMobile %>);            }            .header__mobile-menu-btn.is-active {                background-image: url(<%= customization.IconsX2.GoBackGreen %>);            }        }    <% } %></style>';
var FooterTemplate = '<div class="footer footer_inner">    <!--<div class="container">-->        <div class="row">            <div class="col-xs-20">                <div class="footer__divider"></div>            </div>            <div class="col-md-10 col-xs-20">                <div class="footer__text">                    <%= localization.FooterCopyrightText %>                </div>            </div>            <div class="col-md-10 col-xs-20">                <div class="footer__links">                    <% if ( localization.FooterPrivacyPolicyLink && localization.FooterPrivacyPolicyLink.trim() &&                            localization.FooterPrivacyPolicyText && localization.FooterPrivacyPolicyText.trim() &&                            (!customization.FooterPrivacyPolicyLink || !customization.FooterPrivacyPolicyLink.Hidden)) { %>                        <span class="footer__links-item">                            <% if (customization.FooterPrivacyPolicyLink && customization.FooterPrivacyPolicyLink.Disabled) { %>                                <span class="footer__link">                                    <%= localization.FooterPrivacyPolicyText %>                                </span>                            <% } else { %>                                <a class="footer__link" target="blank" href="<%= localization.FooterPrivacyPolicyLink %>">                                    <%= localization.FooterPrivacyPolicyText %>                                </a>                            <% } %>                        </span>                    <% } %>                    <% if ( localization.FooterLegalText && localization.FooterLegalText.trim() &&                            (!customization.FooterLegalLink || !customization.FooterLegalLink.Hidden)) { %>                        <span class="footer__links-item">                            <% if (customization.FooterLegalLink && customization.FooterLegalLink.Disabled) { %>                                <span class="footer__link">                                    <%= localization.FooterLegalText %>                                </span>                            <% } else { %>                                <a href="javascript: void(0);" onclick="javascript: Cookiebot.renew()">                                    <%= localization.FooterLegalText %>                                </a>                            <% } %>                        </span>                    <% } %>                </div>            </div>        </div>    <!--</div>--></div>';
var HeaderTemplate = '<div class="header header_inner-help">    <div class="container">        <div class="row">            <div class="col-md-10 col-xs-20">                <button class="header__mobile-menu-btn js_burger" type="button"></button>                <div class="header__title hidden-xs hidden-sm">                    <% if ((!customization.HeaderLogoLink || !customization.HeaderLogoLink.Hidden) && localization.HeaderTitle) { %>                        <% if ((customization.HeaderLogoLink && customization.HeaderLogoLink.Disabled) || isOffline) { %>                    <span class="header__title-link">                        <% } else { %>                        <a href="<%= localization.HeaderLogoLink %>" class="header__title-link">                            <% } %>                            <% var index = localization.HeaderTitle.indexOf(" ") %>                            <%= localization.HeaderTitle.slice(0, index) %>                            <div class="header__title-big header__title-big_inner-help">                                <%= localization.HeaderTitle.slice(index, localization.HeaderTitle.length) %>                            </div>                            <%= (customization.HeaderLogoLink && customization.HeaderLogoLink.Disabled) ? "</span>" : "</a>" %>                            <% } %>                </div>                <div class="header__title header__title_product"><%= titlePreffix %> <%= title %></div>                <div class="header__search">                    <button class="header__search-btn js_mobile_search_button" type="button"></button>                    <input type="search" class="header__search-input is-hidden js_mobile_search_input"                           placeholder="<%= localization.SearchPlaceholder %>"/>                    <button class="header__clear-btn is-hidden js_mobile_search_clear" type="button"></button>                </div>            </div>            <div class="col-md-10 hidden-xs hidden-sm">                <div class="header__logo">                    <% if (!customization.FooterLogoLink || !customization.FooterLogoLink.Hidden) { %>                        <% if (customization.FooterLogoLink && customization.FooterLogoLink.Disabled) { %>                            <span class="logo"></span>                        <% } else { %>                            <a href="<%= localization.FooterLogoLink %>" class="logo"                               title="<%= localization.FooterLogoTitle %>"></a>                        <% } %>                    <% } %>                </div>            </div>        </div>    </div></div><div class="top-bar hidden-xs hidden-sm">    <div class="container">        <div class="row">            <div class="col-lg-5 col-md-6">                <div class="top-bar__product-box">                    <div class="top-bar__product js_product_logo"></div>                    <h1 class="top-bar__title js_title">                        <% if (titlePreffix && titlePreffix.trim() ) { %>                            <span class="top-bar__title-small"><%= titlePreffix %></span>                        <% } %>                        <%= title %>                    </h1>                </div>            </div>            <div class="col-lg-15 col-md-14">                <div class="top-bar__links-box">                    <div class="top-bar__links">                        <% if ( localization.PrintButtonText && localization.PrintButtonText.trim() && !customization.PrintButtonHidden) { %>                            <% if (isAllInOne) { %>                                <a class="top-bar__link top-bar__link_print" href="javascript:print();">                                    <span class="top-bar__icon top-bar__icon_print"></span><%= localization.PrintButtonText %>                                </a>                            <% } else { %>                                <div class="dropdown js_dropdown">                                    <a class="top-bar__link top-bar__link_print js_dropdown_btn" href="#">                                        <span class="top-bar__icon top-bar__icon_print"></span><%= localization.PrintButtonText %>                                        <span class="top-bar__triangle"></span>                                    </a>                                    <ul class="dropdown__list js_dropdown_list">                                        <li class="dropdown__item">                                            <a class="dropdown__link" href="javascript:print();">                                                <%= localization.PrintPageText %>                                            </a>                                        </li>                                        <li class="dropdown__item">                                            <a class="dropdown__link js_print_section" href=""                                               target="_blank" rel="noopener noreferrer">                                                <%= localization.PrintSectionText %>                                            </a>                                        </li>                                        <li class="dropdown__item">                                            <a class="dropdown__link js_print_all"                                               href="<%= isMacProject ? "pgs/" : "" %>all-in-one.htm"                                               target="_blank" rel="noopener noreferrer">                                                <%= localization.PrintAllText %>                                            </a>                                        </li>                                    </ul>                                </div>                            <% } %>                        <% } %>                        <% if ( localization.SupportButtonText && localization.SupportButtonText.trim() &&                                localization.SupportButtonLink && localization.SupportButtonLink.trim() &&                                (!customization.SupportButtonLink || !customization.SupportButtonLink.Hidden)) { %>                            <% if (customization.SupportButtonLink && customization.SupportButtonLink.Disabled) { %>                                <span class="top-bar__link top-bar__link_support">                                    <span class="top-bar__icon top-bar__icon_support"></span><%= localization.SupportButtonText %>                                </span>                            <% } else { %>                                <a class="top-bar__link top-bar__link_support"                                   href="<%= localization.SupportButtonLink %>" target="blank">                                    <span class="top-bar__icon top-bar__icon_support"></span><%= localization.SupportButtonText %>                                </a>                            <% } %>                        <% } %>                        <% if ( localization.SendLinkButtonText && localization.SendLinkButtonText.trim() &&                                (!customization.SendLinkButton || !customization.SendLinkButton.Hidden)) { %>                            <% if (customization.SendLinkButton && customization.SendLinkButton.Disabled) { %>                                <span class="top-bar__link top-bar__link_feedback">                                    <span class="top-bar__icon top-bar__icon_feedback"></span><%= localization.SendLinkButtonText %>                                </span>                            <% } else { %>                                <a class="top-bar__link top-bar__link_feedback js_feedback_link" href="">                                    <span class="top-bar__icon top-bar__icon_feedback"></span><%= localization.SendLinkButtonText %>                                </a>                            <% } %>                        <% } %>                        <% if (pdfOptions && pdfOptions.pdfName && pdfOptions.pdfName.trim()){ %>                            <% if (localization.SaveAsPdfButtonText && localization.SaveAsPdfButtonText.trim() &&                                    (!customization.SaveAsPdfButton || !customization.SaveAsPdfButton.Hidden)) { %>                                <% if (customization.SaveAsPdfButton && customization.SaveAsPdfButton.Disabled) { %>                                    <span class="top-bar__link top-bar__link_pdf">                                    <span class="top-bar__icon top-bar__icon_save-as-pdf"></span><%= localization.SaveAsPdfButtonText %>                                </span>                                <% } else { %>                                    <a class="top-bar__link top-bar__link_pdf js_pdf_link" href="<%=pdfOptions.pdfName.trim()%>">                                        <span class="top-bar__icon top-bar__icon_save-as-pdf"></span><%= localization.SaveAsPdfButtonText %>                                    </a>                                <% } %>                                                            <% } %>                                                    <% } %>												<% if (localization.OnlineHelpButtonText && localization.OnlineHelpButtonText.trim() && localization.OnlineHelpButtonLink && localization.OnlineHelpButtonLink.trim()) { %>							<span class="top-bar__link"><a class="top-bar__link" href="<%= localization.OnlineHelpButtonLink %>"><%= localization.OnlineHelpButtonText %></a></span>						<% } %>						                    </div>                    <% if (!customization.HideLangsSelector) { %>                        <div class="top-bar__langs">                            <span class="top-bar__versions js_header_versions_list"></span>                            <span class="js_header_lang_list"></span>                        </div>                    <% } %>                </div>            </div>        </div>    </div></div>';
var IndexLiteralsTemplate = '<ul class="b-index__list"><%    var result,        html = [];    for (var i= 0, item; i < index.length; i++ ) {        item = index[i];        if ( item.nested) {            html.push( "<li class=\'b-index__item js_menu_item b-index__item--nested\'>" );        } else {            html.push( "<li class=\'b-index__item js_menu_item\'>" );        }        if ( item["class"] === "indexlink" ) {            html.push( "<a class=\'b-index__link js_menu_link\' href=\'");            html.push( item.href );            html.push( "\'>" );            html.push( item.text );            html.push( "</a>" )        } else if ( item["class"] === "indexheading" ) {            html.push( "<span class=\'b-index__header\'>" );            html.push( item.text );            html.push( "</span>" )        } else {            html.push( "<span class=\'b-index__subheader\'>" );            html.push( item.text );            html.push( "</span>" )        }        html.push( "</li>" );    }    result = html.join("");%><%= result %></ul>';
var LangListTemplate = '<div class="dropdown dropdown_right js_dropdown">    <a class="dropdown__btn js_dropdown_btn">        <%= currentLang.name %>        <span class="dropdown__arrow"></span>    </a>    <ul class="dropdown__list js_dropdown_list">        <% _.each( langs, function( lang ) {%>            <% var dir = lang.dirname || lang.id %>            <% if (lang.id !== currentLang.id ) { %>                <li class="dropdown__item">                    <% if ( isMac ) { %>                        <a class="dropdown__link js_lang_item" data-lang-id="<%= dir %>" href="../../<%= dir %>/pgs">                            <%= lang.name %>                        </a>                    <% } else { %>                        <a class="dropdown__link js_lang_item" data-lang-id="<%= dir %>" href="../<%= dir %>">                            <%= lang.name %>                        </a>                    <% } %>                </li>            <% } %>        <% }) %>    </ul></div>';
var MenuTemplate = '<%var chunks = [],    isMac = isMacProject,    markup;function htmlTreeBuilder( items, opened ) {    if (items.length) {        chunks.push( "<ul class=\'contents js_contents_level\'" );        chunks.push( !opened ? " style=\'display:none\' ": "" );        chunks.push( ">" );    }    for (var i = 0, item; i < items.length; i++) {        item = items[i];        if ( !item.hidden ) {            if ( item.isActive ) {                chunks.push( "<li class=\'contents__item js_menu_item is-active\'>" );            } else {                chunks.push( "<li class=\'contents__item js_menu_item\'>" );            }            if ( item.children ) {                chunks.push( "<button class=\'contents__toggle js_contents_toggle" );                chunks.push( item.childIsActive || item.isActive ? " is-toggled" : "" );                chunks.push( "\' href=\'#\'></button>" );            }            chunks.push( "<a class=\'contents__item-link js_menu_link\' href=\'" );            chunks.push( (isMac ? "index.htm#" : "") + item.url );            chunks.push( "\'>" );            chunks.push( item.text );            chunks.push( "</a>" );            if ( item.children ) {                htmlTreeBuilder( item.children, item.childIsActive || item.isActive );            }        }    }    if (items.length) {        chunks.push( "</ul>" );    }}htmlTreeBuilder( menu, true );markup = chunks.join("");%><%= markup %>';
var MobileSearchResultsTemplate = '<%if (!isInit){%>    <div class="mobile-search-results__total">        <% if ( resultsCount > 0) { %>            <%= localization.FoundTextBegin %> <%= resultsCount %> <%= localization.FoundTextEnd %>        <% } else { %>            <%= localization.NothingFoundText %>        <%}%>    </div>    <div class="mobile-search-results__content">        <%if ( found ){%>            <ul class="mobile-search-results__list">                <%_.each(results, function( page ){function escapeHTML(html) {  return html.replace(/&/g, "&amp;").replace(/</g,"&lt;").replace(/>/g, "&gt;").replace(/&lt;(\\/)?mark&gt;/g,"<$1mark>");}%>                    <li class="mobile-search-result">                        <% var link = isMacProject ? "index.htm#" + page.link : page.link %>                        <a class="mobile-search-result__title" href="<%= link %>"><%= page.title %></a>                        <%_.each( page.texts, function( text ){var etext=escapeHTML(text);%>                            <p class="mobile-search-result__content"><%= etext %></p>                        <%})%>                    </li>                <%})%>            </ul>        <%}%>    </div><%}%>';
var NextLinkTemplate = '<div class="nav-btn">    <% if (nextPage && nextPage.url) { %>        <% var link = isMacProject ? "index.htm#" + nextPage.url : nextPage.url %>        <a class="nav-btn__link-next js_next_link"           href="<%= link %>"           title="<%= nextPage.text %>"></a>    <% } else { %>        <span class="nav-btn__link-next-inactive"></span>    <% } %></div>';
var PageTitleTemplate = '<div class="page-title">    <div class="page-title__text">        <%= titleHtml %>    </div></div>';
var PrevLinkTemplate = '<div class="nav-btn">    <% if (prevPage && prevPage.url) { %>        <% var link = isMacProject ? "index.htm#" + prevPage.url : prevPage.url %>        <a class="nav-btn__link-prev js_prev_link"           href="<%= link %>"           title="<%= prevPage.text %>"></a>    <% } else { %>        <span class="nav-btn__link-prev-inactive"></span>    <% } %></div>';
var SearchResultsTemplate = '<%if (!isInit){%>    <div class="search-results__header">        <div class="search-results__total">            <%= localization.FoundTextBegin %> <%= resultsCount %> <%= localization.FoundTextEnd %>        </div>    </div>    <%if ( found ){%>        <div class="search-results__content">            <ul class="search-results__list">                <%_.each(results, function( page ){ function escapeHTML(html) {  return html.replace(/&/g, "&amp;").replace(/</g,"&lt;").replace(/>/g, "&gt;").replace(/&lt;(\\/)?mark&gt;/g,"<$1mark>");}%>                    <li class="search-result">                        <% var link = isMacProject ? "index.htm#" + page.link : page.link %>                        <a class="search-result__title" href="<%= link %>"><%= page.title %></a>                        <%_.each( page.texts, function( text ){ var etext=escapeHTML(text); %>                            <p class="search-result__content"><%= etext %></p>                        <%})%>                    </li>                <%})%>            </ul>        </div>    <%}%><%}%>';
var VersionsTemplate = '<div class="dropdown dropdown_right js_dropdown">    <a class="dropdown__btn js_dropdown_btn">        <%= currentVersion.label %>        <span class="dropdown__arrow"></span>    </a>    <ul class="dropdown__list js_dropdown_list">        <% _.each(versions, function(version)  {%>            <% if (version.url !== currentVersion.url) { %>                <li class="dropdown__item">                    <a class="dropdown__link js_version_item"                       data-version-url="<%= version.url %>" href="../../<%= version.url %>">                        <%= version.label %>                    </a>                </li>            <% } %>        <% }) %>    </ul></div>';
var LangsLocalization = {"en-US":"English","id-ID":"Bahasa Indonesia","cs-CZ":"Čeština &#x202A;(Česká republika)","da-DK":"Dansk &#x202A;(Danmark)","de-DE":"Deutsch","et-EE":"Eesti","es-ES":"Español &#x202A;(España)","es-MX":"Español &#x202A;(México)","fr-CA":"Français &#x202A;(Canadien)","fr-FR":"Français","it-IT":"Italiano","lv-LV":"Latviešu","lt-LT":"Lietuvių","hu-HU":"Magyar &#x202A;(Magyarország)","nl-NL":"Nederlands &#x202A;(Nederland)","nb-NO":"Norsk, bokmål &#x202A;(Norge)","pl-PL":"Polski &#x202A;(Polska)","pt-BR":"Português &#x202A;(Brasil)","pt-PT":"Português &#x202A;(Portugal)","ro-RO":"Română &#x202A;(România)","sr-Latn":"Srpski","fi-FI":"Suomi &#x202A;(Suomi)","sv-SE":"Svenska &#x202A;(Sverige)","vi-VN":"Tiếng Việt &#x202A;(Việt Nam)","tr-TR":"Türkçe &#x202A;(Türkiye)","el-GR":"Ελληνικά &#x202A;(Ελλάδα)","bg-BG":"Български","kk-KZ":"Қазақ","ru-RU":"Русский","sr-Cyrl":"Српски","uk-UA":"Українська","ar-AE":"العربية (الإمارات العربية المتحدة&#x202B;)","fa-IR":"فارسى (ایران&#x202B;)","hi-IN":"हिंदी &#x202A;(भारत)","th-TH":"ไทย &#x202A;(ไทย)","ko-KR":"한국어 &#x202A;(대한민국)","ja-JP":"日本語&#x202A;(日本)","zh-Hans":"简体中文","zh-Hant":"繁體中文","zh-Hant-TW":"繁體中文(台灣)","zh-Hant-HK":"繁體中文(香港)"};
var Page=new Array();Page[0]=new Array("@ About Kaspersky Scan Engine","What's new","Key functions","Detection technologies","Architecture","Usage scenarios","Hardware and software requirements","@ HTTP mode","Example of an HTTP request to scan a local file","@ ICAP mode","Running Kaspersky Scan Engine in ICAP mode","@ Web interface","Using the Kaspersky Scan Engine GUI","Kaspersky Scan Engine  Help","226466.htm");
Page[1]=new Array("Kaspersky Scan Engine is a server-side security solution that provides anti-virus protection, HTTP traffic scanning, and file and URL reputation checking for third party client-side solutions.","Kaspersky Scan Engine delivers comprehensive protection for a wide range of devices from malware, trojans, worms, rootkits, spyware, and adware. It can be used with various products and services including desktop applications, server solutions, proxy servers, and mail gateways.","Based on Kaspersky Anti-Virus Software Development Kit 8 Level 3 (KAV SDK) and the award-winning Kaspersky Anti-Virus Engine, Kaspersky Scan Engine employs the newest methods of detection and removing various types of malware.","You can request the KAV SDK documentation or purchase KAV SDK together with the documentation from your Technical Account Manager (TAM).","About Kaspersky Scan Engine","192968.htm");
Page[2]=new Array("This section describes new features and enhancements in the latest version of Kaspersky Scan Engine.","What's new in version 2.1","Multi-user mode for Kaspersky Scan Engine GUI is supported; Administrator and Operator user roles are available for Kaspersky Scan Engine GUI users.","System audit functionality. With the system audit, it is much easier to monitor how Kaspersky Scan Engine functions and to analyze security incidents when they happen.","Automatic upgrade to a newer version of Kaspersky Scan Engine by using the install utility.","Different modes for Kaspersky Scan Engine instances in a cluster. Kaspersky Scan Engine instances now can work in different modes at the same time: when some instances work in ICAP mode, others work in HTTP mode.","Automatic removal of inactive cluster instances. If this function is enabled, Kaspersky Scan Engine automatically removes from the cluster those instances that are inactive for a specified period of time.","API token authentication. If this function is enabled, Kaspersky Scan Engine provides access to its functions only to those HTTP clients that have successfully authenticated by using the API token.","Separate KAV SDK objects. Starting from Kaspersky Scan Engine version 2.1, KAV SDK objects are delivered as a separate package.","X- response header fields:","X-Infection-Found","X-Response-Desc","X-Response-Info","X-Violations-Found","X-Include","Custom response header field that contains information about the anti-virus database version used by Kaspersky Scan Engine to scan objects. The name of the field is specified in DatabaseVersionICAPHeader.","Value limits have changed for the following parameters:","KeepAliveSettings &gt; TimeoutMs (HTTP mode)","KeepAliveSettings &gt; MaxRequests (HTTP mode)","KeepAliveSettings &gt; TimeoutMs (ICAP mode)","KeepAliveSettings &gt; MaxRequests (ICAP mode)","What's new","209374.htm");
Page[3]=new Array("Kaspersky Scan Engine can work in one of two modes:","HTTP mode","In this mode, Kaspersky Scan Engine works as a REST-like service that receives HTTP requests from client applications, scans the objects passed in these requests, and sends back HTTP responses with the scan results.","ICAP mode","This mode is available only for Linux operating systems.","In this mode, Kaspersky Scan Engine works as an ICAP server that scans the HTTP traffic that passes through a proxy server and the URLs that are requested by users, and filters out web pages that contain malicious content.","Kaspersky Scan Engine also includes a graphical user interface that allows you to easily configure the behavior of Kaspersky Scan Engine, review its service events, and scan results.","Usage scenarios:","Threat Protection","Kaspersky Scan Engine can scan files and blocks of random access memory (RAM) by using the Kaspersky anti-virus database and the advanced heuristics module. Scanning of compressed executables, archives, Microsoft Office macros, email messages, and email databases is supported.","Web Filtering","Kaspersky Scan Engine can scan specific URLs (in HTTP mode) or URLs that users request from a proxy server (in ICAP mode). In ICAP mode, Kaspersky Scan Engine can return a user-specified HTML page instead of malicious web pages.","File and URL Reputation Checking","Kaspersky Scan Engine can receive information about the reputation of the scanned files and URLs from Kaspersky Security Network (KSN).","Graphical User Interface","The graphical user interface (GUI) allows you to configure Kaspersky Scan Engine, check the status of a Kaspersky Scan Engine key file or activation code, review service events, and scan results. ","Key functionality: ","Award-wining Kaspersky anti-malware technology provides the best-in-class malware detection rates and can instantaneously react to emerging threats.","Kaspersky Security Network provides information about the reputation of files and Internet resources, ensures that Kaspersky applications react to threats faster without waiting for an application database update, and reduces the likelihood of false positives.","Filters out malicious, phishing, and adware URLs.","Detection of multi-packed objects and objects packed using \"grey\" compression utilities (frequently used for hiding malicious programs from anti-virus software).","Advanced heuristics analyzer and machine learning-based detection technologies.","Disinfection of infected files, archives, and encoded objects.","Updatable Anti-Virus engine: detection technologies and processing logic can be upgraded or modified through regular updates of the anti-virus database.","Kaspersky Scan Engine natively supports multithreading and can process several tasks simultaneously. You can adjust the number of scanning processes and threads to increase performance of Kaspersky Scan Engine.","An additional filtering layer is made possible by the Format Recognizer component. You can use this component to recognize and skip certain file formats during the scanning process. Dozens of formats are supported, including executable, document files, media files, and archives.","Graphical user interface (GUI) for management and monitoring:","Lets you configure application settings and manage the application.","Lets you monitor the application operating status, status of the used key file or activation code, and the number of scanned and detected objects. ","Provides a dashboard with information about all scanned objects. Scan results can be exported in CSV format. ","Ease of installation and configuration, and no development is needed with this out-of-the box installation. The solution will be running within minutes. ","Reporting features:","Important application events are sent to Syslog in the CEF format. ","All service events are visible on the GUI dashboard.","Maintenance features: ","Anti-virus database updates are automatic. Kaspersky Scan Engine automatically restores corrupted databases. ","Easy collection of product traces by using the GUI.","Option to use online activation. With online activation, licensing information for Kaspersky Scan Engine is updated automatically.","Fault-tolerant and resilient architecture.","Source code for HTTP client and ICAP service are provided in the distribution kit for customization. ","Comprehensive documentation and cross-platform API support. Similar APIs for Linux/UNIX and Windows versions.","Option to minimize external traffic by creating local mirror server for the anti-virus database (additional tool needed).","Kaspersky Scan Engine supports cluster architecture. This feature allows you to do the following:","Centralized instance management: you can apply unified settings to multiple instances in a cluster","View service events from each clustered instance","View scan results with statistics for each clustered instance","View information about the status of Kaspersky Scan Engine for each clustered instance (current status of Kaspersky Scan Engine, version, information about the anti-virus database, etc.)","Key functions of Kaspersky Scan Engine","184797.htm");
Page[4]=new Array("This section describes detection technologies that are implemented in Kaspersky Scan Engine.","Signature analysis","This detection method is based on searching for a predefined string in scanned files. Signature analysis also includes detection based on the hash of the entire malicious file. Traditional signatures allow for the detection of specific objects with high precision. Other signature-based technologies, such as structure heuristics signatures and SmartHash, can detect unknown and polymorphic malware. ","Signature analysis can detect specific attacks with high precision and few false positives. However, this detection method is ineffective against polymorphic malware and different versions of the same malware. Effective signature analysis also requires frequent signature updates.","The frequently updated and comprehensive anti-virus database of Kaspersky Scan Engine ensures the highest level of protection from known malware, trojans, worms, rootkits, spyware, and adware.","Advanced heuristics","When scanning a script or an executable file, Kaspersky Anti-Virus Engine emulates its execution in a secure artificial environment. If a suspicious activity is discovered during analysis of the behavior of the emulated object, it is considered malicious. This method helps detect new and unknown malware.","The emulator component of Kaspersky Scan Engine emulates a functional execution environment for the object, including functions and different subsystems of the target operation system. No real functions or subsystems are used during emulation. ","Machine learning technologies","SmartHash is a Kaspersky patented algorithm for building intelligent, locality-sensitive hashes. Locality-sensitive hashes are static file features that can be extracted and quantized. SmartHashes can be calculated for each file and different files can have the same SmartHash when they are functionally similar. Because of this, a single SmartHash allows for the identification of clusters of similar files and the effective detection of unknown malware from known malware families.The SmartHash technology utilizes several precision levels, a feature that allows for the detection of even highly polymorphic malware. Simultaneously, with a very high level of confidence, it minimizes the risk of false positive detection.","SmartHash benefits:","Strength against new, evasive, and polymorphic malware.","Detection within minutes. ","Works offline and online.","Flexible model with several similarity levels that allows for detection of uninfected and malicious files.","Resilient technology: mathematical model is updated by machine learning techniques and is constantly revised by experts. Using SmartHash results in minimal false positives and yields a high detection rate.","SmartHash online also helps to minimize false positive detections. SmartHash calculated on the client side can be compared against billions of known good files in the Kaspersky database through global Kaspersky Security Network.","Kaspersky uses machine learning to boost the detection rate of existing scanning technologies. It deploys machine learning for automated analysis of internal sandbox execution logs. Both known malicious files and unknown files are executed in internal behavioral sandbox systems. Some of these sandboxes mimic user systems running standard products. The most powerful sandboxes make use of granular logging capabilities, allowing for extremely fine-tuned detection. ","Robots process the sandbox logs line by line. The execution logs of new malicious samples are studied by using Machine Learning, to find new detection indicators. These new indicators enrich mathematical models of non-signature-based detection methods as well as heuristic behavioral records created by Kaspersky experts.","Processing of Compressed Executables And Archives","Kaspersky Scan Engine includes technology that allows for detection of viruses and other objects inside compressed executables and archives. With this technology, infected archives and compressed executables can be safely disinfected or deleted. ","Kaspersky Scan Engine supports approximately 4000 different formats of compressed executables and archives.","Disinfection of Archives","This technology is designed to disinfect archived files. With this technology, infected objects inside archives are successfully disinfected or deleted, depending on user-defined settings. You do not have to use any other archiving utilities.","Kaspersky Anti-Virus Engine is currently capable of removing viruses from ARJ, CAB, RAR, and ZIP archives.","Kaspersky Security Network","Kaspersky Security Network (KSN) is an infrastructure of cloud services that provides access to the online Knowledge Base of Kaspersky which contains information about the reputation of files, web resources, and software. The use of data from Kaspersky Security Network ensures faster responses to threats, improves the performance of some protection components, and reduces the likelihood of false positives.","Kaspersky hosts KSN servers in data centers all around the world providing minimal latency for cloud checks. KSN database contains terabytes of information that is constantly updated by security analysts and automatic methods.","When using KSN, you provide Kaspersky with information about the installed copy of Kaspersky Scan Engine and detected objects. This information does not contain any personal or confidential information of the user. The information obtained is protected by Kaspersky in accordance with statutory requirements. See also the full list of data that is transferred to Kaspersky during file and URL reputation checking.","Kaspersky Scan Engine is compliant with the General Data Protection Regulation (GDPR).","Malicious and phishing URL detection","Kaspersky Scan Engine includes an offline database of malicious and phishing URLs. In addition, you can check the reputation of the scanned URLs in Kaspersky Security Network.","Kaspersky Scan Engine detection technologies","192970.htm");
Page[5]=new Array("Kaspersky Scan Engine is an implementation of Kaspersky HTTP Daemon and Kaspersky ICAP Plug-in, which are parts of Kaspersky Anti-Virus SDK. ","When Kaspersky Scan Engine is running as Kaspersky HTTP Daemon, it is working in HTTP mode. When Kaspersky Scan Engine is running as Kaspersky ICAP Plug-in, it is working in ICAP mode.","Following are descriptions of the modes:","HTTP mode","In this mode, Kaspersky Scan Engine works as a REST-like service that receives HTTP requests from client applications, scans files and URLs passed in these requests, and sends back HTTP responses with scan results.","ICAP mode","This mode is available only for Linux operating systems.","In this mode, Kaspersky Scan Engine works as an ICAP server that scans HTTP traffic that passes through a proxy server, scans URLs that are requested by users, and filters out web pages that contain malicious content.","Kaspersky Scan Engine consists of the following components:","The service that processes client requests. The services are different in HTTP and ICAP modes. ","Kaspersky Scan Engine GUI","The user interface that the user can access over a browser. Its functionality is implemented in the klScanEngineUI executable file.","Kaspersky Anti-Virus Engine","The executable file that scans objects passed to it.","Several instances of Kaspersky Scan Engine can be added into clusters. This simplifies configuration and further management of the instances.","Kaspersky Scan Engine architecture","184796.htm");
Page[6]=new Array("In HTTP mode, Kaspersky Scan Engine consists of an HTTP service called kavhttpd, Kaspersky Anti-Virus Engine, and Kaspersky Scan Engine GUI.","When you use Kaspersky Scan Engine in HTTP mode, the interaction between the components occurs in the following order:","Files and URLs for scanning are sent to kavhttpd in HTTP requests.","You can send objects to kavhttpd in two ways:","By using an HTTP client, such as the sample HTTP client from the distribution kit","By making HTTP requests manually","The kavhttpd service sends objects to Kaspersky Anti-Virus Engine.","Kaspersky Anti-Virus Engine scans the objects. ","If you are using File and URL Reputation Checking, the objects are also sent to KSN for reputation checking. ","After scanning, Kaspersky Anti-Virus Engine returns the results to the kavhttpd service.","The kavhttpd service sends scan results to the HTTP client or another application that sent objects for scanning.","If you are using Kaspersky Scan Engine GUI, the scan results are displayed on the Scan results page.","The diagram below shows the interaction between the components of Kaspersky Scan Engine. ","Kaspersky Scan Engine in HTTP mode","HTTP mode","192971.htm");
Page[7]=new Array("In ICAP mode, Kaspersky Scan Engine consists of an ICAP service called kavicapd, Kaspersky Anti-Virus Engine, and Kaspersky Scan Engine GUI.","When you use Kaspersky Scan Engine in ICAP mode, the interaction between the components occurs in the following order:","An ICAP client (for example, a proxy server) sends ICAP requests to kavicapd. ","The kavicapd service sends files to Kaspersky Anti-Virus Engine for scanning.","Kaspersky Anti-Virus Engine scans the contents of HTTP messages and URLs that are encapsulated in these ICAP requests. ","If you are using File and URL Reputation Checking, the contents of HTTP messages and URLs are also sent to KSN for reputation checking.","After scanning, Kaspersky Anti-Virus Engine returns the results to the kavicapd service.","The kavicapd service sends ICAP responses with scan results to the ICAP client. ","If you are using Kaspersky Scan Engine GUI, the scanning results are displayed on the Scan results page.","Kaspersky Scan Engine can work with several ICAP clients at once.","The following example shows the interaction between a proxy server and Kaspersky Scan Engine working in ICAP mode.","Kaspersky Scan Engine in ICAP mode","ICAP mode","192972.htm");
Page[8]=new Array("You can install more than one instance of Kaspersky Scan Engine in your infrastructure, in HTTP mode, ICAP mode, or both. If you need more than one instance, you may choose to group them into clusters. A cluster is a set of Kaspersky Scan Engine instances that use the same kavebase database. This allows users to access Kaspersky Scan Engine GUI of any of the installed instances and do the following:","Observe service events from all installed instances of Kaspersky Scan Engine","Observe scan results from all installed instances of Kaspersky Scan Engine","Check the information about each installed instance of Kaspersky Scan Engine:","Status of the instance (enabled or disabled)","Anti-virus database version","Manage settings of each installed instance of Kaspersky Scan Engine:","Enable or disable logging","Update the anti-virus database","You can configure several instances of Kaspersky Scan Engine simultaneously by using settings profiles. A settings profile is a set of Kaspersky Scan Engine settings that can be applied to one or more instances. Settings profiles are created by using Kaspersky Scan Engine GUI.","The current version of Kaspersky Scan Engine does not include the balancer for distributing scan requests between different instances of Kaspersky Scan Engine. If you want to distribute scan requests, you need to use a third-party balancer.","Using several instances of Kaspersky Scan Engine","Instances and clusters","211897.htm");
Page[9]=new Array("This section describes common usage scenarios of Kaspersky Scan Engine.","Kaspersky Scan Engine usage scenarios","179824.htm");
Page[10]=new Array("Kaspersky Scan Engine helps you protect your network and data by detecting malware and legitimate software that can be used by intruders.","Before you start using Kaspersky Scan Engine, decide on your use case, in the following order:","Decide what data you want to scan:","Data uploaded to your network by your users.","Data created inside your organization, such as documents.","Data uploaded from sources outside your network. This can prevent supply chain attacks.","You can also use Kaspersky Scan Engine to add scanning functionality to your own applications and security services. Kaspersky Scan Engine scans objects of any format, including packed objects.","Decide whether HTTP or ICAP mode is better for your environment.","Decide where you want to deploy Kaspersky Scan Engine. ","Decide how you will gain access to scan results:","In Kaspersky Scan Engine GUI ","In a client application","Decide which features of Kaspersky Scan Engine you will use:","Decide whether you want to use Kaspersky Security Network (KSN) for checking the reputation of files and URLs","Decide what level of heuristics you want to use","Decide what actions Kaspersky Scan Engine must perform after detecting malware or legitimate software that can be used by intruders","Decide whether you want to scan packed executables","Decide whether you want to scan archives","Decide whether you want to scan email","Decide whether you want to scan email databases","After determining your use case for Kaspersky Scan Engine, proceed to getting started with Kaspersky Scan Engine.","Below, you can find instructions for typical tasks that Kaspersky Scan Engine performs in HTTP mode and in ICAP mode.","Scanning files with the sample HTTP client (HTTP mode)","This instruction assumes that you have already installed and configured Kaspersky Scan Engine, by using the configuration file or the GUI.","To scan files with Kaspersky Scan Engine:","Start the kavhttpd service.","Start the sample HTTP client. The client is located in the /bin/kavhttp_client directory of the distribution kit.","Pass the files that you want to scan to the sample HTTP client:","Scan files that are larger than 4 megabytes (MB) in scanfile mode. Use the -f option and pass the local paths to the files to the sample HTTP client.","The example below shows how to scan two files in scanfile mode:","./kavhttp_client -f /usr/dir1/example1.zip /usr/dir2/example2.iso","Scan files that are smaller than 4 MB in scanmemory mode. Pass the paths (network or local) to the sample HTTP client. To do this, use the -s option.","The example below shows how to scan a file in scanmemory mode:","./kavhttp_client -s 192.0.2.0:888 /usr/dir/example.txt","Review the scan results.","Scanning traffic that passes through a proxy server (ICAP mode)","This instruction assumes that you have already installed and configured Kaspersky Scan Engine, by using the configuration file or the Kaspersky Scan Engine GUI.","To scan traffic that passes through a proxy server:","Configure your proxy server to work with Kaspersky Scan Engine (see the example of using Kaspersky Scan Engine in ICAP mode with Squid).","Create a response template that you want to display or script to execute when malware or legitimate software that can be used by intruders is detected.","Configure ICAP service rules for a situation when Kaspersky Scan Engine detects malware or legitimate software that can be used by intruders. You can do it either manually or by using the GUI.","Start the kavicapd service.","Kaspersky Scan Engine will automatically detect malware or legitimate software that can be used by intruders, and then process it according to the ICAP service rules.","Threat Protection","180130.htm");
Page[11]=new Array("This section describes common scenarios where you can use Kaspersky Scan Engine to check websites.","The instructions provided in this section assume that you have already installed Kaspersky Scan Engine.","Scanning URLs (HTTP mode)","To scan a URL with Kaspersky Scan Engine:","In the ServerSettings &gt; Flags element of the kavhttpd.xml configuration file, specify the settings you want:","KAV_SHT_ENGINE_KSN&#8212;For checking the reputation of websites by KSN.","KAV_SHT_ENGINE_WMUF&#8212;For detecting malicious websites.","KAV_SHT_ENGINE_APUF&#8212;For detecting phishing websites.","You can also specify settings by means of the Kaspersky Scan Engine GUI.","Start the kavhttpd service.","Send the URL that you want to check to the kavhttpd service.","For example, you can use the sample HTTP client %service_dir%/bin/kavhttp_client for this purpose, as follows:","./kavhttp_client -u http://example.com","Also you can send an HTTP POST request to the kavhttpd service.","Review the scan results.","You can block URLs for which the DETECT result is returned.","Checking URLs that users request through proxy server (ICAP mode)","To check URLs that pass through a proxy server:","In the kavicapd.xml configuration file, specify the settings you want:","In the SDKSettings &gt; ScanningMode element, specify KAV_O_M_PHISHING for detecting phishing websites.","In the KSNSettings &gt; UseKSN element, specify 1 for checking the reputation of websites by KSN.","You can also specify settings by means of the Kaspersky Scan Engine GUI.","Configure your proxy server to work with Kaspersky Scan Engine (see the example of using Kaspersky Scan Engine in ICAP mode with Squid).","Create a response template if you want to display it instead of phishing web pages.","Create ICAP service rules for cases when Kaspersky Scan Engine returns PHISHING and DETECT scan results.","You can do it either manually or by using the Kaspersky Scan Engine GUI.","Start the kavicapd service.","Kaspersky Scan Engine will automatically check URLs and process them according to the ICAP service rules.","Web Protection from malicious and phishing websites","180131.htm");
Page[12]=new Array("This section describes common scenarios where you can use Kaspersky Scan Engine together with Kaspersky Security Network (KSN) to check files and websites.","The instructions provided in this section assume that you have already installed Kaspersky Scan Engine.","Checking files and websites with reputation checking (HTTP mode)","To check files and websites by means of reputation checking:","In the ServerSettings &gt; Flags element of the kavhttpd.xml configuration file, specify the KAV_SHT_ENGINE_KSN setting.","You can also use the Kaspersky Scan Engine GUI to turn on reputation checking.","Start the kavhttpd service.","Send URLs and files that you want to check to the kavhttpd service.","For example, you can use the sample HTTP client %service_dir%/bin/kavhttp_client.","Also, you can send HTTP POST requests to the kavhttpd service.","Review the scan results.","The scan results will depend on the reputation of the URLs and files.","Checking URLs that users request through proxy server (ICAP mode)","To check URLs that pass through a proxy server:","In the KSNSettings &gt; UseKSN element of the kavicapd.xml configuration file, specify 1 for checking the reputation of files and websites by KSN.","You can also turn on reputation checking by using the Kaspersky Scan Engine GUI.","Configure your proxy server to work with Kaspersky Scan Engine (see the example of using Kaspersky Scan Engine in ICAP mode with Squid).","Create ICAP service rules for scan results returned by Kaspersky Scan Engine.","You can create the rules either manually or by using the Kaspersky Scan Engine GUI.","Start the kavicapd service.","Kaspersky Scan Engine will return the results of checking files and URLs on the basis of their reputation in KSN and will respond according to the ICAP service rules you have specified.","File and URL reputation checking in KSN","180133.htm");
Page[13]=new Array("This section describes the Kaspersky Scan Engine system requirements.","Supported operating systems","Kaspersky Scan Engine runs on 64-bit Linux and 64-bit Microsoft Windows operating systems.","Software requirements","Kaspersky Scan Engine GUI can be used with the following web browsers:","Google Chrome 60 or later","Microsoft Internet Explorer 11 or later","Mozilla Firefox 55 or later","Microsoft Edge 38 or later","Kaspersky Scan Engine GUI requires PostgreSQL 10.7 or later to be installed.","The Kaspersky Scan Engine distribution kit does not contain the Boost and OpenSSL sources. If you want to customize the HTTP service or ICAP service by editing and recompiling their sources shipped in the Kaspersky Scan Engine distribution kit, download the Boost and OpenSSL sources from the official websites and use them in your system. If you make changes in the sources of the HTTP or ICAP service and want to use Kaspersky Scan Engine GUI, get approval for the changes from your technical account manager (TAM) so that the HTTP or ICAP service can still work with Kaspersky Scan Engine GUI.","For compiling the HTTPD and ICAP services, use the following software:","Boost 1.72.0 or later","OpenSSL (latest version)","GCC 7.3 or later","Brotli (for ICAP only)","PostgreSQL libraries from 6.4.4 to 7 (non-inclusive)","We recommend that you install the libpqxx-devel package.","Hardware requirements","Kaspersky Scan Engine requires 1 gigabyte (GB) of available hard disk space. If you use Kaspersky Scan Engine GUI, you also must allocate space for the PostgreSQL database that stores service events. You can keep the PostgreSQL database on the same computer as Kaspersky Scan Engine or on a different computer. The size of the database depends on the number of the events and can reach several gigabytes. The database stores events that occurred in the last six months.","The table below lists minimum processors and the RAM requirements for Kaspersky Scan Engine depending on the operating system that you use.","Operating System","RAM and processor requirements","64-bit Linux","1 GB of RAM","1&nbsp;GHz 64-bit (x64) or faster processor","64-bit Windows 7 and later","64-bit Windows Server 2008 R2 and later","1 GB of RAM","1 GHz 64-bit (x64) or faster processor","Hardware and software requirements","184795.htm");
Page[14]=new Array("This section describes the contents of the Kaspersky Scan Engine distribution kit for Linux systems.","Distribution kit types","Kaspersky Scan Engine is distributed in the following types of distribution kits:","As an RPM package and a set of additional files","As a DEB package and a set of additional files","As a .tar.gz archive","This type of distribution kit can be used instead of the RPM or DEB package.","RPM and DEB distribution kits","This type of distribution kit contains the following files and directories.","Distribution kit contents (RPM and DEB package)","Item","Description","Doc_data/*","Documentation files.","Kaspersky_Scan_Engine.htm","Offline version of documentation.","Kaspersky_ScanEngine-Linux-x86_64-%RELEASE_VERSION%-Release.rpm ","(RPM package)","Kaspersky_ScanEngine-Linux-x86_64-%RELEASE_VERSION%-Release.deb","(DEB package)","Installation packages.","For a list of files inside this package, see  subsection \"Files contained in the .tgz archive\" below.","setup.sh","Installation script.","ReleaseNotes.pdf","Release notes.","Files contained in the .tar.gz archive","The Kaspersky Scan Engine distribution kit for Linux contains the following files and directories.","Distribution kit contents (.tar.gz archive)","Item","Description","/bin/appinfo.kli","Application information file.","/bin/httpdkavlog.ini","Configuration file that contains logging settings for the kavhttpd service.","/bin/icapdkavlog.conf","Configuration file that contains logging settings for the kavicapd service.","/bin/kavhttpd","Executable file of the kavhttpd service.","/bin/kavhttp_client","Executable file of the client application for the kavhttpd service.","/bin/kavhttpd.sh","Script for starting the kavhttpd service.","/bin/kavicapd","Executable file of the kavicapd service.","/bin/kavicapd.sh","Script for starting the kavicapd service.","/bin/klScanEngineUI","Kaspersky Scan Engine GUI binary file.","/bin/libssp.so.0","Auxiliary library.","/doc/Doc_data/","Directory that contains the Kaspersky Scan Engine documentation files.","/doc/Kaspersky_Scan_Engine.htm","Main page of the Kaspersky Scan Engine documentation.","/doc/ksn_license.txt","End User License Agreement (EULA) for Kaspersky Security Network (KSN).","/doc/legal_notices.txt","Legal notices.","/doc/license.txt","End User License Agreement (EULA) for Kaspersky Scan Engine.","/etc/kavhttpd.service","The systemd unit file for the kavhttpd service.","/etc/kavhttpd.xml","Sample configuration file for the kavhttpd service.","/etc/kavicapd.service","The systemd unit file for the kavicapd service.","/etc/kavicapd.xml","Sample configuration file for the kavicapd service.","/etc/klScanEngineUI.service","The systemd unit file for the klScanEngineUI service.","/etc/klScanEngineUI.xml","Kaspersky Scan Engine GUI configuration file.","/httpsrv/templates/","Directory with templates for the Kaspersky Scan Engine GUI.","/icap_data/kavicapd_gui_rules.conf","Configuration file with service rules for the kavicapd service.","/icap_data/templates/detect_req","Response template used in request modification (REQMOD) mode.","/icap_data/templates/detect_resp","Response template used in response modification (RESPMOD) mode.","/icap_data/templates/macro_req","Response template used in request modification (REQMOD) mode to notify that a macro is detected.","/icap_data/templates/macro_resp","Response template used in response modification (RESPMOD) mode to notify that a macro is detected.","/icap_data/scripts/send_syslog","Sample script that displays messages with information about scanned objects and redirects them to the logger utility.","/install","Installation script.","/integrity_check.xml","Manifest file with a list of application files for the integrity check tool.","/integrity_checker","Utility for checking the integrity of application components.","/gcc-version","A text file with the GCC version.","/platform","A text file with the version of the GLIBC library.","/ReleaseNotes.pdf","Release notes.","/samples/common/","Libraries used by the kavhttpd and kavicapd service.","/samples/kavhttp/","Directory with sources of the kavhttpd service and its client application.","/samples/kavicap/","Directory with sources of the kavicapd service.","/samples/migrate.sql","File used to upgrade the kavebase database to a newer version.","/samples/tables.sql","File with SQL queries to be performed after manual installation of Kaspersky Scan Engine.","/tools/kav_encrypt","Utility for encrypting logins and passwords for proxy servers and Kaspersky Scan Engine database.","/tools/kl_access_util","Utility for editing user credentials.","/tools/libssp.so.0","Auxiliary library.","/tools/openssl","OpenSSL utility.","/tools/openssl.cnf","OpenSSL configuration file.","/uninstall","Uninstallation script.","/version","A text file with the product version.","Distribution kit contents (Linux)","184793.htm");
Page[15]=new Array("The Kaspersky Scan Engine distribution kit for Windows contains the following files and directories.","Distribution kit contents (Windows)","Item","Description","\\bin\\appinfo.kli","Application information file.","\\bin\\kavehost.exe","Executable file of the kavehost service (Kaspersky Anti-Virus Engine).","\\bin\\kavhttp_client.exe","Executable file of the client application for the kavhttpd service.","\\bin\\klScanEngineUI.exe","Kaspersky Scan Engine GUI binary file.","\\bin\\klScanEngineUI.xml","Kaspersky Scan Engine GUI configuration file.","\\bin\\kavhttpd.exe","Executable file of the kavhttpd service.","\\bin\\kavhttpd.xml","Sample configuration file for the kavhttpd service.","\\bin\\httpdkavlog.ini","Configuration file that contains logging settings for the kavhttpd service.","\\bin\\bases\\","Folder that contains anti-virus database files.","\\bin\\ossl\\","OpenSSL library.","\\bin\\x86\\","32-bit images of libraries used by emulator component.","\\bin\\*.dll","Dynamic libraries used by Kaspersky Scan Engine.","\\bin\\*.ppl","Binary modules used of by Kaspersky Scan Engine.","\\doc\\Doc_data\\","Folder that contains the Kaspersky Scan Engine documentation files.","\\doc\\About data provision.txt","File describing information that is provided to Kaspersky when Kaspersky Scan Engine is used with cloud services.","\\doc\\About data provision extended.txt","File describing information that is provided to Kaspersky when you enable submission of statistics to Kaspersky Security Network (KSN).","\\doc\\About data provision - online activation.txt","File describing information that is provided to Kaspersky when Kaspersky Scan Engine is used in online licensing mode.","\\doc\\Kaspersky_Scan_Engine.html","Main page of the Kaspersky Scan Engine documentation.","\\doc\\legal_notices.txt","Legal notices.","\\doc\\license.txt","End User License Agreement (EULA) for Kaspersky Scan Engine.","\\doc\\ksn_license.txt","End User License Agreement (EULA) for Kaspersky Security Network (KSN).","\\httpsrv\\etc\\kavaccess","File with encrypted credentials for Kaspersky Scan Engine GUI.","\\httpsrv\\templates\\","Folder with templates for Kaspersky Scan Engine GUI.","\\include\\","Folder with header files for developing custom applications on the basis of Kaspersky Anti-Virus SDK.","\\runtime\\","Universal C Runtime (UCRT) and C++ Runtime dynamic libraries.","These files can be used if the target system does not have these libraries installed.","\\samples\\kavhttp\\","Folder with sources of the kavhttpd service and its client application.","\\samples\\tables.sql","File with SQL queries to be performed after manual installation of Kaspersky Scan Engine.","\\tools\\kav_encrypt.exe","Utility for encrypting user names and passwords for proxy servers and Kaspersky Scan Engine database.","\\tools\\kavsigner.exe","Utility for signing custom applications.","\\tools\\kl_access_util.exe","Utility for editing user credentials.","\\tools\\openssl.exe","OpenSSL utility.","\\tools\\openssl.cnf","OpenSSL configuration file.","\\tools\\msvcp80.dll","\\tools\\msvcr80.dll","\\tools\\Microsoft.VC80.CRT","Microsoft Visual C++ Redistributable components.","\\install.exe","Installer.","\\kl_control.bat ","Script for managing the kavhttpd service and the klScanEngineUI service.","\\uninstall.exe","Uninstaller.","\\ReleaseNotes.pdf","Release notes.","\\version","A text file with the product version.","Distribution kit contents (Windows)","192973.htm");
Page[16]=new Array("This section explains how to start using Kaspersky Scan Engine quickly and easily.","Getting started with Kaspersky Scan Engine","180558.htm");
Page[17]=new Array("This section explains how to start using Kaspersky Scan Engine in HTTP mode.","Before you start using Kaspersky Scan Engine, we strongly recommend that you restrict access to Kaspersky Scan Engine files, including logs, with built-in tools provided by your operating system. This measure will help make your information more secure.","To start using Kaspersky Scan Engine in HTTP mode:","Install Kaspersky Scan Engine.","Kaspersky Scan Engine starts automatically after installation is complete.","Optionally, configure Kaspersky Scan Engine for use in HTTP mode.","For example, you can configure Format Recognizer to increase the processing speed of Kaspersky Scan Engine in HTTP mode.","Optionally, configure the systemd unit file to manage Kaspersky Scan Engine in HTTP mode.","Optionally, configure logging. ","Notice that logging decreases performance of Kaspersky Scan Engine. Usually you need to enable logging only during the integration or for debugging.","Update the anti-virus database or configure the update frequency.","To keep track of the update process and make sure that you get the latest updates, send an HTTP request to the /api/v3.0/update/status address.","Verify the detection capabilities of Kaspersky Scan Engine.","Make requests to Kaspersky Scan Engine:","Run the sample HTTP client from the command line to scan files.","Use a REST-like protocol for making HTTP requests.","Use the source code of the sample HTTP client as an example for creating your own client.","Getting started with Kaspersky Scan Engine in HTTP mode","179865.htm");
Page[18]=new Array("This section explains how to start using Kaspersky Scan Engine in ICAP mode.","Before you start using Kaspersky Scan Engine, we strongly recommend that you restrict access to Kaspersky Scan Engine files, including logs, with built-in tools provided by your operating system. This step will help make your information more secure.","To start using Kaspersky Scan Engine in ICAP mode:","Install Kaspersky Scan Engine.","Kaspersky Scan Engine starts automatically after installation is complete.","Optionally, configure Kaspersky Scan Engine for use in ICAP mode.","If you configure ICAP mode manually (without using the installer), and you are using offline licensing mode, you have to put the license file in the directory that is specified in the LicensePath element of the configuration file. If you are using online licensing mode, you have to specify the activation code. See also the detailed information about online and offline licensing modes.","Optionally, configure service rules.","Optionally, configure logging.","Notice that logging decreases performance of Kaspersky Scan Engine. Usually you need to enable logging only during the integration or for debugging.","Optionally, configure environment variables.","Update the anti-virus database or configure the update frequency.","Verify the detection capabilities of Kaspersky Scan Engine.","Run Kaspersky Scan Engine in ICAP mode.","Getting started with Kaspersky Scan Engine in ICAP mode","179890.htm");
Page[19]=new Array("This section explains how to install Kaspersky Scan Engine.","Installing Kaspersky Scan Engine","192974.htm");
Page[20]=new Array("Kaspersky Scan Engine GUI uses the PostgreSQL object-relational database management system to store scan statistics, scan results, service events, and service status. For this reason, if you want to use Kaspersky Scan Engine GUI, you must install PostgreSQL first. ","You can use one of two integration schemes: ","Install Kaspersky Scan Engine on the same computer as PostgreSQL.","Install Kaspersky Scan Engine on a different computer that has access to the computer with PostgreSQL.","Preparing to install Kaspersky Scan Engine GUI","184775.htm");
Page[21]=new Array("Kaspersky Scan Engine GUI requires PostgreSQL 10.7 or later. The following procedure covers installation and configuration of PostgreSQL 10.7. The procedure for a later version may vary.","To install and configure PostgreSQL:","Download and install PostgreSQL.","You can install PostgreSQL in one of the following ways:","Install the package downloaded from the PostgreSQL website.","Visit https://www.postgresql.org/download/ to see a list of supported operating systems and installation instructions for each of them.","Install PostgreSQL from source code.","Visit https://www.postgresql.org/docs/10/installation.html for installation instructions.","Open the postgresql.conf configuration file. The location of this file varies depending on your operating system:","In Debian-based Linux distributions postgresql.conf is located at /etc/postgresql/10/main/.","In RedHat-based Linux distributions postgresql.conf is located at /var/lib/pgsql/data/.","If you use another operating system, the location of postgresql.conf may be different.","Specify the IP address that Kaspersky Scan Engine must use to connect to PostgreSQL in the listen_addresses setting of postgresql.conf.","Specify the port on which the PostgreSQL is to listen for connections from Kaspersky Scan Engine in the port setting of postgresql.conf.","Save and close postgresql.conf.","Open the pg_hba.conf configuration file. This file is located in the same directory as postgresql.conf.","Specify that PostgreSQL must require an MD5-encrypted password for authentication from all of its clients:","Find the following line in pg_hba.conf:","host       all  all  127.0.0.1/32  peer","Change this line to:","host       all  all  127.0.0.1/32  md5","If the pg_hba.conf configuration file does not contain the host       all  all  127.0.0.1/32  peer line, you have to change the host       all  all  127.0.0.1/32  ident line.","If PostgreSQL and Kaspersky Scan Engine are installed on different computers, add the following line to pg_hba.conf:","host       all  all  %IP%/32  md5","Here %IP% is the IP address of the computer on which Kaspersky Scan Engine is installed.","Save and close pg_hba.conf.","Restart PostgreSQL by running the following command from the command line:","service postgresql restart","Set the password for the default PostgreSQL user.","During installation PostgreSQL creates a superuser called postgres. By default, this user does not a have a password. ","To set the password for the postgres user:","From the command line, change the correct user to the postgres user:","su postgres","Under the postgres user account, start the psql utility by running the following command in the command line:","psql","In psql, change the password of the postgres user by running the following command:","alter user postgres with password '%PASSWORD%';","Here %PASSWORD% is the new password for the postgres user.","Quit the psql utility by running the following command in psql:","\\q","You can now install Kaspersky Scan Engine GUI.","To install Kaspersky Scan Engine GUI, you need a PostgreSQL user that has permissions for creating new databases and users. You can use the postgres user for that, or create a new user.","After installing PostgreSQL and setting the password for the postgres user, you can proceed to section \"Automatic installation (Linux)\" or \"Manual installation (Linux)\".","All data is stored in a single database called kavebase. Kaspersky Scan Engine does not use any other databases.","Installing and configuring PostgreSQL (Linux)","192975.htm");
Page[22]=new Array("To install and configure PostgreSQL:","Download and install PostgreSQL.","Visit https://www.enterprisedb.com/downloads/postgres-postgresql-downloads to see a list of supported operating systems and download the installer.","Open the postgresql.conf configuration file. This file is located at %postgresql_dir%\\data. Here %postgresql_dir% (for example, C:\\Program Files\\PostgreSQL\\11) is the folder that PostgreSQL was installed in.","Specify the IP address that Kaspersky Scan Engine must use to connect to PostgreSQL in the listen_addresses setting of postgresql.conf.","Specify the port on which the PostgreSQL is to listen for connections from Kaspersky Scan Engine in the port setting of postgresql.conf.","For PostgreSQL Version 13 or later, find the following line in postgresql.conf:","password_encryption = md5            # md5 or scram-sha-256","If the password encryption method specified on this line is other than md5, change it to md5.","Save and close postgresql.conf.","Open the pg_hba.conf configuration file. This file is located in the same folder as postgresql.conf.","Make sure that PostgreSQL requires an MD5-encrypted password for authentication from all of its clients. Find the following line in pg_hba.conf:","host       all  all  127.0.0.1/32  md5","If the authentication method specified on this line is other than md5, change it to md5.","If PostgreSQL and Kaspersky Scan Engine are installed on different computers, add the following line to pg_hba.conf:","host       all  all  %IP%/32  md5","Here %IP% is the IP address of the computer on which Kaspersky Scan Engine is installed.","Save and close pg_hba.conf.","Restart PostgreSQL by running the following commands from the command line:","sc stop postgresql-x64-11","sc start postgresql-x64-11","If step 5 was performed, you have to update the password for the superuser on the computer that has PostgreSQL installed. The default user is postgres. You can use either the psql utility or pgAdmin to perform this action. If you use the psql utility, specify a space character and a user name after the -U parameter, as follows: psql -U postgres","Update the password for the superuser:","ALTER ROLE username WITH PASSWORD 'your password';"," You can now install Kaspersky Scan Engine GUI.","To install Kaspersky Scan Engine GUI, you need a PostgreSQL user that has permissions for creating new databases and users. You can use the postgres user for that, or create a new user.","After installing PostgreSQL, you can proceed to section \"Installation using installer (Windows)\" or \"Manual installation (Windows)\".","All data is stored in a single database called kavebase. Kaspersky Scan Engine does not use any other databases.","Installing and configuring PostgreSQL (Windows)","192976.htm");
Page[23]=new Array("This section explains how to install Kaspersky Scan Engine on Linux operating systems.","Installing Kaspersky Scan Engine on Linux","199729.htm");
Page[24]=new Array("This section explains how to install Kaspersky Scan Engine by using the installer. You can use the installer if Kaspersky Scan Engine is not installed on your computer (there is no /opt/kaspersky/ScanEngine directory).","If you want to use Kaspersky Scan Engine together with the Kaspersky Scan Engine GUI, you must have PostgreSQL installed on a computer that is accessible from the computer on which you install Kaspersky Scan Engine. The Kaspersky Scan Engine GUI does not work without PostgreSQL. ","Before installing and configuring Kaspersky Scan Engine, you need to specify the locale of the computer on which Kaspersky Scan Engine is installed. Use the following commands:","LC_ALL=en_US.utf8","export LC_ALL","Installing Kaspersky Scan Engine by using the installer","The procedure below describes the actions that must be performed if you want to install Kaspersky Scan Engine by using the installer.","To install Kaspersky Scan Engine automatically:","Make sure you have root (administrator) privileges.","Run install.","Read the End User License Agreement (EULA) for Kaspersky Scan Engine.","If you agree with the terms of the EULA, accept it. If you decline to accept the terms of the EULA, the installation will be canceled.","Choose whether to use the Kaspersky Scan Engine GUI.","If you choose to use the Kaspersky Scan Engine GUI, do the following:","Make sure you have installed and configured PostgreSQL.","Specify the IP and port for connecting to PostgreSQL.","Choose whether to add the product instance to an existing cluster or to connect to an existing database. ","If you chose to add the product instance to an existing cluster, see the next step. Otherwise, go to step f.","Enter the username and password of the PostgreSQL user account.","Under these credentials, Kaspersky Scan Engine will work with the database.","Continue the procedure from the step 6.","Provide credentials for a user that has permissions for creating new databases and users. The credentials are not recorded anywhere. ","With these credentials, Kaspersky Scan Engine will create a new database called kavebase in which Kaspersky Scan Engine will store its data and a new PostgreSQL user. From this moment on, Kaspersky Scan Engine will use this user to make changes to the database.","Set the username and password for a new PostgreSQL user account.","The installer will create the account under which Kaspersky Scan Engine will work with the database. This account will have access only to the kavebase database.","These credentials will be stored as encrypted and available only for the root user. That is why if you run the service as a user without root privileges, an error message will be displayed. To solve this problem, after the installation is complete, configure access to the kl_scanengine_db.key encryption key file stored in the httpsrv directory so that the user account under which you want Kaspersky Scan Engine to work with the database can have the read permission.","Choose the mode for Kaspersky Scan Engine.","The following modes are available:","HTTP","ICAP","For the HTTP mode, specify the IP address and port or the UNIX socket that Kaspersky Scan Engine will listen on for incoming requests to scan objects.","For the ICAP mode, specify the port whose traffic Kaspersky Scan Engine will scan.","Specify whether Kaspersky Scan Engine must use Kaspersky Security Network (KSN).","If you choose to use KSN, read the EULA for KSN and the Privacy Policy.","If you agree with the terms of the EULA and the Privacy Policy, accept it. If you decline the terms of the EULA for KSN or the Privacy Policy, you will not be able to use KSN, but the installation will continue. You can enable KSN later by using Kaspersky Scan Engine GUI or the Kaspersky Scan Engine configuration file (HTTP or ICAP).","If you choose to use the Kaspersky Scan Engine GUI, specify the port on which the Kaspersky Scan Engine GUI will be available, if necessary.","Specify whether to use a proxy server.","If you choose to use a proxy server, specify the proxy settings.","Specify the directory for storing temporary files.","If you press Enter, the /tmp directory will be used for storing temporary files.","The installer will create the scanengine subdirectory in the directory that you specified. Kaspersky Scan Engine will use this subdirectory for storing temporary files.","Starting from Kaspersky Scan Engine version 2.1, the KAV SDK objects are delivered as a separate package. Specify the absolute path to the directory that contains the KAV SDK package. Alternatively, you can press Enter. In this case, the Kaspersky Scan Engine installer will search for the KAV SDK files in the directory one level higher than the directory where the installer is located.","Specify the licensing mode to be used in Kaspersky Scan Engine.","For simplified licensing mode, specify the key file.","For online licensing mode, specify the activation code.","At the prompt, check the settings you have specified and modify them if necessary.","After you specify the necessary data, Kaspersky Scan Engine is installed, and then started. Finally, the installer prints the summary information about the installation to the console.","After you install Kaspersky Scan Engine, you can check the integrity of its components at any time by using the integrity check tool.","Automatic installation (Linux)","192977.htm");
Page[25]=new Array("This section describes how to manually install Kaspersky Scan Engine on Linux systems. ","Before installing and configuring Kaspersky Scan Engine, you need to specify the locale of the computer on which Kaspersky Scan Engine is installed. Use the following commands:","LC_ALL=en_US.utf8","export LC_ALL","To install Kaspersky Scan Engine manually: ","Make sure that you have root (administrator) privileges.","Create the /opt/kaspersky/ScanEngine directory. This directory is called %service_dir% in this Help document.","Unpack the distribution kit contents to the %service_dir% directory on your system.","Unpack the objects from the KAV SDK distribution kit (hereinafter %SDK_kit%) as follows:","Objects from %SDK_kit%/bin/bases to %service_dir%/bin/bases","Objects from %SDK_kit%/include to %service_dir%/include","Objects from %SDK_kit%/lib to %service_dir%/lib","Objects from %SDK_kit%/ppl to %service_dir%/ppl","The %SDK_kit%/tools/kavsigner file to %service_dir%/tools","The %SDK_kit%/tools/integrity_check_sdk.xml file to %service_dir%","Only users with administrator rights must have access to the objects from %SDK_kit%. <br>For compatibility with Kaspersky Scan Engine, use the KAV SDK version 8.9.2.595 or later.","Read the End User License Agreement (EULA) for Kaspersky Scan Engine. The EULA is located at %service_dir%/doc/license.txt.","If you agree to the terms of the EULA, proceed to the next step. If you decline the terms of the EULA, cancel the installation.","Open file %service_dir%/etc/klScanEngineUI.xml.","Accept the EULA. Change &lt;Common&gt;rejected&lt;/Common&gt; to &lt;Common&gt;accepted&lt;/Common&gt; in the klScanEngineUI.xml file.","If you want to use Kaspersky Security Network (KSN), read the EULA for KSN and the Privacy Policy. This EULA is also located at %service_dir%/doc/ksn_license.txt and contains the link to the Privacy Policy.","If you agree to the terms of the EULA for KSN and the Privacy Policy, proceed to the next step. If you decline the terms of the EULA for KSN or the Privacy Policy, proceed to step 10.","Accept the EULA for KSN. Change &lt;KSN&gt;rejected&lt;/KSN&gt; to &lt;KSN&gt;accepted&lt;/KSN&gt; in klScanEngineUI.xml.","Save and close %service_dir%/etc/klScanEngineUI.xml.","Create a symbolic link to %service_dir%/etc/klScanEngineUI.xml from the /etc/ directory:","ln -s %service_dir%/etc/klScanEngineUI.xml /etc/klScanEngineUI.xml","If you want to use Kaspersky Scan Engine GUI, read subsection \"Enabling Kaspersky Scan Engine GUI\" below.","Make a symbolic link to the proper Kaspersky Scan Engine configuration file from the /etc/ directory:","For HTTP mode, copy the %service_dir%/etc/kavhttpd.xml file to the /etc/ directory.","For ICAP mode, copy the %service_dir%/etc/kavicapd.xml file to the /etc/ directory.","For example, in HTTP mode you have to run the following command:","ln -s %service_dir%/etc/kavhttpd.xml /etc/kavhttpd.xml","If you do not use the Kaspersky Scan Engine GUI and a connection through proxy server is needed, you have to specify an encrypted user name and password for the proxy server. To encrypt the user name and password:","Generate an encryption key as follows:","openssl rand -out %service_dir%/httpsrv/kl_scanengine_db.key 512","Provide read permission to the owner only by running the following command:","chmod 400 %service_dir%/httpsrv/kl_scanengine_db.key","To encrypt the credentials, use the kav_encrypt utility. This utility also automatically writes the encrypted user name and password to the configuration file kavhttpd.xml (for HTTP mode) or kavicapd.xml (for ICAP mode). The utility is located in the %service_dir%/tools/ directory.","Run the kav_encrypt utility with the following options:","-m &lt;httpd | icap&gt; -p &lt;user_name:password&gt;","In /etc/systemd/system/multi-user.target.wants/, make symbolic links to the following files:","For ICAP mode, make a symbolic link to /opt/kaspersky/ScanEngine/etc/kavicapd.service by using the following command:","ln -s /opt/kaspersky/ScanEngine/etc/kavicapd.service /etc/systemd/system/kavicapd.service","For HTTP mode, make a symbolic link to /opt/kaspersky/ScanEngine/etc/kavhttpd.service by using the following command:","ln -s /opt/kaspersky/ScanEngine/etc/kavhttpd.service /etc/systemd/system/kavhttpd.service ","Register Kaspersky Scan Engine in the system by using the following commands:","systemctl daemon-reload","systemctl enable kavhttpd","systemctl enable kavicapd","Run registered Kaspersky Scan Engine services:","For ICAP mode, run:"," service kavicapd start","For HTTP mode, run:"," service kavhttpd start","Go to the next steps as described in Getting started for HTTP mode or ICAP mode.","Activate Kaspersky Scan Engine either in offline licensing mode or online licensing mode. ","After you install Kaspersky Scan Engine, you can check the integrity of its components at any time by using the integrity check tool.","Enabling Kaspersky Scan Engine GUI","To enable Kaspersky Scan Engine GUI:","Make sure that you have root (administrator) privileges.","Do one of the following:","If you have never installed an instance of Kaspersky Scan Engine with GUI before or you do not want to add the new instance to an existing cluster, perform the actions described in section \"Preparing to install Kaspersky Scan Engine GUI\".","If you already have an instance of Kaspersky Scan Engine with GUI and you want to add the new instance to the same cluster, go to the step 4.","On the computer that has PostgreSQL installed, perform the actions listed below under a user that can create new users and databases. To perform these actions, you can use either the psql utility or pgAdmin.","Make sure that the user running the database queries has access to the directory containing tables.sql and also has read access to tables.sql itself.","Create a new PostgreSQL user called scanengine:","CREATE USER scanengine;","Set the password for the scanengine user:","ALTER USER scanengine WITH PASSWORD '%PASSWORD%';","Using PostgreSQL, create a database called kavebase:","CREATE DATABASE kavebase OWNER scanengine;","In the kavebase database run the queries described in %service_dir%/samples/tables.sql.","psql -d kavebase -a -f tables.sql","Open /etc/klScanEngineUI.xml.","In the &lt;Mode&gt; element, specify the mode that Kaspersky Scan Engine will work in:","For HTTP mode:","&lt;Mode&gt;httpd&lt;/Mode&gt;","For ICAP mode:","&lt;Mode&gt;icap&lt;/Mode&gt;","Change &lt;EnableUI&gt;false&lt;/EnableUI&gt; to &lt;EnableUI&gt;true&lt;/EnableUI&gt;.","In the &lt;ConnectionString&gt; element, specify the address of the Kaspersky Scan Engine GUI web service in %IP%:%port% format.","For example:","&lt;ConnectionString&gt;198.51.100.0:443&lt;/ConnectionString&gt;","Specify the SSL certificate to install in the Kaspersky Scan Engine GUI web service.","If you already have an SSL certificate that you want to install in the Kaspersky Scan Engine GUI web service, specify the paths to your certificate and your private key:","In the &lt;SSLCertificatePath&gt; element, specify the path to your SSL certificate.","In the &lt;SSLPrivateKeyPath&gt; element, specify the path to your private key.","If you do not have an SSL certificate that you want to install in the Kaspersky Scan Engine GUI web service, generate a new one. Run the %service_dir%/tools/openssl utility as follows:","/opt/kaspersky/ScanEngine/tools/openssl req -x509 -nodes -days 1825 -subj /C=RU/CN=\"%ConnectionString%\" -newkey rsa:4096 -extensions EXT -config \"/opt/kaspersky/ScanEngine/tools/openssl.cnf\" -keyout \"/opt/kaspersky/ScanEngine/httpsrv/kl_scanengine_private.pem\" -out \"/opt/kaspersky/ScanEngine/httpsrv/kl_scanengine_cert.pem\"","Here %ConnectionString% is the value that is specified in the &lt;ConnectionString&gt; element. It is recommended to use the values rsa:4096 or rsa:3072 with the -newkey parameter. The minimum supported value is rsa:2048. ","You must configure access to the private key file for ScanEngine GUI so that only the root user and the user account under which the service is running can have the read permission.","Generate an encryption key as follows:","openssl rand -out %service_dir%/httpsrv/kl_scanengine_db.key 512","Provide read permission to the owner only by running the following command:","chmod 400 %service_dir%/httpsrv/kl_scanengine_db.key","In the DatabaseSettings &gt; ConnectionString element, specify the address of a new or existing kavebase database that you want to connect to by using the format %IP%:%port%.","Save and close /etc/klScanEngineUI.xml.","Encrypt the user name and password of the user that will be used to access to the kavebase database:","If you have never installed an instance of Kaspersky Scan Engine with GUI before or you do not want to add the new instance to an existing cluster, encrypt the user name and password of the user that you specified in step 3.  ","If you already have an instance of Kaspersky Scan Engine with GUI and you want to add the new instance to the same cluster, encrypt the user name and password of the user that is used to access the kavebase database of the cluster.","To encrypt the credentials, use the kav_encrypt utility. This utility also automatically writes the encrypted user name and password to /etc/klScanEngineUI.xml. The utility is located in the %service_dir%/tools/ directory.","Run the kav_encrypt utility with the following options:","-d '%username%:%password%'","In /etc/systemd/system/multi-user.target.wants/, make a symbolic link to /opt/kaspersky/ScanEngine/etc/klScanEngineUI.service by using the following command:","ln -s /opt/kaspersky/ScanEngine/etc/klScanEngineUI.service /etc/systemd/system/klScanEngineUI.service ","Register Kaspersky Scan Engine in the system by using the following commands:","systemctl daemon-reload","systemctl enable klScanEngineUI","Run the registered Kaspersky Scan Engine service:","service klScanEngineUI start","Manual installation (Linux)","180652.htm");
Page[26]=new Array("This section explains how to install Kaspersky Scan Engine on Windows operating systems.","Installing Kaspersky Scan Engine on Windows","199730.htm");
Page[27]=new Array("This section explains how to install Kaspersky Scan Engine using the installer. You can use the installer if Kaspersky Scan Engine is not installed on your computer.","If you want to use Kaspersky Scan Engine together with Kaspersky Scan Engine GUI, you must have PostgreSQL installed on a computer that is accessible from the computer on which you install Kaspersky Scan Engine. Kaspersky Scan Engine GUI does not work without PostgreSQL.","To install Kaspersky Scan Engine using the installer:","Unpack the distribution kit contents to an empty folder on your system.","Make sure you have administrator privileges.","Run install.exe.","Read the End User License Agreement (EULA) for Kaspersky Scan Engine.","If you agree with the terms of the EULA, accept it. If you decline to accept the terms of the EULA, the installation will be canceled.","Choose whether to use Kaspersky Scan Engine GUI.","If you choose to use Kaspersky Scan Engine GUI, do the following:","Make sure you have installed and configured PostgreSQL.","Specify the IP and port for connecting to PostgreSQL.","Provide credentials for a user that has permissions for creating new databases and users. The credentials are not recorded anywhere. ","With these credentials, Kaspersky Scan Engine will create a new database called kavebase in which Kaspersky Scan Engine will store its data, and a new PostgreSQL user called scanengine. From this moment on, Kaspersky Scan Engine will use the scanengine user to make changes to the database.","Specify the IP address and port that Kaspersky Scan Engine will listen on for incoming requests to scan objects.","Specify whether Kaspersky Scan Engine must use Kaspersky Security Network (KSN).","If you choose to use KSN, read the EULA for KSN and the Privacy Policy.","If you agree with the terms of the EULA and the Privacy Policy, accept it. If you decline the terms of the EULA for KSN or the Privacy Policy, you will not be able to use KSN, but the installation will continue. You can enable KSN later by using Kaspersky Scan Engine GUI or the Kaspersky Scan Engine configuration file.","If you choose to use Kaspersky Scan Engine GUI, specify the port on which Kaspersky Scan Engine GUI will be available, if necessary.","Specify whether to use a proxy server.","If you choose to use a proxy server, specify the proxy settings.","Specify the directory for storing temporary files.","The installer will create the scanengine subdirectory in this directory; Kaspersky Scan Engine will use this subdirectory for storing temporary files.","Specify the licensing mode to be used in Kaspersky Scan Engine.","For simplified licensing mode, specify the key file.","For online licensing mode, specify the activation code.","At the prompt, check the settings you have specified and modify them if necessary.","After you specify necessary data, install installs Kaspersky Scan Engine and then starts it. Kaspersky Scan Engine is installed to the C:\\Program Files\\Kaspersky Lab\\ScanEngine folder.","Finally, the installer prints the summary information about the installation to the console.","Automatic installation (Windows)","192978.htm");
Page[28]=new Array("This section describes how to manually install Kaspersky Scan Engine on Windows systems. ","To install Kaspersky Scan Engine manually: ","Make sure that you have administrator privileges.","Create the C:\\Program Files\\Kaspersky Lab\\ScanEngine folder. This folder is called %service_dir% in this Help document. ","Unpack the distribution kit contents to the %service_dir% folder on your system.","Read the End User License Agreement (EULA) for Kaspersky Scan Engine. The EULA is located at %service_dir%\\doc\\license.txt.","If you agree to the terms of the EULA, proceed to the next step. If you decline the terms of the EULA, cancel the installation.","Open file %service_dir%\\bin\\klScanEngineUI.xml.","Accept the EULA. Change &lt;Common&gt;rejected&lt;/Common&gt; to &lt;Common&gt;accepted&lt;/Common&gt; in the klScanEngineUI.xml file.","If you want to use Kaspersky Security Network (KSN), read the EULA for KSN and the Privacy Policy. This EULA is also located at %service_dir%\\doc\\ksn_license.txt and contains the link to the Privacy Policy.","If you agree to the terms of the EULA for KSN and the Privacy Policy, proceed to the next step. If you decline the terms of the EULA for KSN or the Privacy Policy, proceed to step 9.","Accept the EULA for KSN. Change &lt;KSN&gt;rejected&lt;/KSN&gt; to &lt;KSN&gt;accepted&lt;/KSN&gt; in klScanEngineUI.xml.","Save and close %service_dir%\\bin\\klScanEngineUI.xml.","Open file %service_dir%\\bin\\kavhttpd.xml. ","At the BasesPath and the TempPath element specify the full path to the %service_dir%\\bin\\bases directory and to the directory that contains temporary files used by Kaspersky Scan Engine, respectively. Save and close the file.","If you want Kaspersky Scan Engine to start automatically on system bootup, do the following:","In Windows, open a Command Prompt window as Administrator.","Run the following command:","sc create \"Kaspersky ScanEngine\" binpath= \"%service_dir%\\bin\\kavhttpd.exe -c  %service_dir%\\bin\\kavhttpd.xml\" start= auto DisplayName= \"Kaspersky ScanEngine\"","Note that if the full path to the configuration file contains a space character, you have to add a quote mark (\") after the slash (\\) mark. Example: C:\\Program Files\\Kaspersky Lab\\ScanEngine\\bin&gt;sc create \"Kaspersky ScanEngine\" binpath= \"C:\\Program Files\\Kaspersky Lab\\ScanEngine\\bin\\kavhttpd.exe -c \\\"C:\\Program Files\\Kaspersky Lab\\ScanEngine\\bin\\kavhttpd.xml\\\"\" ","Proceed to getting started with Kaspersky Scan Engine in HTTP mode.","Enabling Kaspersky Scan Engine GUI","To enable Kaspersky Scan Engine GUI:","Make sure that you have administrator privileges.","Install and configure PostgreSQL.","On the computer that has PostgreSQL installed, perform the actions listed below under a user that can create new users and databases. To perform these actions, you can use either the psql utility, or pgAdmin. If you use the psql utility, specify a space character and a user name after the -U parameter. ","Create a new PostgreSQL user called scanengine:","CREATE USER scanengine;","Set the password for the scanengine user:","ALTER USER scanengine WITH PASSWORD '%PASSWORD%';","Using PostgreSQL, create a database called kavebase:","CREATE DATABASE kavebase OWNER scanengine;","In the kavebase database run the queries described in %service_dir%\\samples\\tables.sql.","psql -d kavebase -a -f tables.sql","Open %service_dir%\\bin\\klScanEngineUI.xml.","Change &lt;EnableUI&gt;false&lt;/EnableUI&gt; to &lt;EnableUI&gt;true&lt;/EnableUI&gt;.","In the &lt;ConnectionString&gt; element, specify the address of the Kaspersky Scan Engine GUI web service in %IP%:%port% format.","For example:","&lt;ConnectionString&gt;198.51.100.0:443&lt;/ConnectionString&gt;","Specify the SSL certificate to install in the Kaspersky Scan Engine GUI web service.","If you already have an SSL certificate that you want to install in the Kaspersky Scan Engine GUI web service, specify the paths to your certificate and your private key:","In the &lt;SSLCertificatePath&gt; element, specify the path to your SSL certificate.","In the &lt;SSLPrivateKeyPath&gt; element, specify the path to your private key.","If you do not have an SSL certificate that you want to install in the Kaspersky Scan Engine GUI web service, generate a new one. Run the %service_dir%\\tools\\openssl utility as follows:","%service_dir%\\tools\\openssl.exe req -x509 -nodes -days 1825 -subj /C=RU/CN=\"%ConnectionString%\" -newkey rsa:4096 -extensions EXT -config \"%service_dir%\\tools\\openssl.cnf\" -keyout \"%service_dir%\\httpsrv\\kl_scanengine_private.pem\" -out \"%service_dir%\\httpsrv\\kl_scanengine_cert.pem\"","Here %ConnectionString% is the value that is specified in the &lt;ConnectionString&gt; element. It is recommended to use the values rsa:4096 or rsa:3072 with the -newkey parameter. The minimum supported value is rsa:2048. ","Encrypt the user name and password of the user that you specified in step 3. Kaspersky Scan Engine will use this user name and password to connect to the kavebase database.","To encrypt the credentials, use the kav_encrypt utility. This utility also automatically writes the encrypted user name and password to klScanEngineUI.xml. The utility is located in the %service_dir%\\tools\\ folder.","Run the kav_encrypt utility with the following options:","-d %username%:%password%","In the DatabaseSettings &gt; ConnectionString element, specify the address of the kavebase database in format %IP%:%port%.","Save and close %service_dir%\\bin\\klScanEngineUI.xml.","If you want Kaspersky Scan Engine GUI to start automatically on system bootup, do the following:","Open a Command Prompt window as Administrator.","Run the following command:","sc create \"Kaspersky ScanEngine UI\" binpath= \"%service_dir%\\bin\\klScanEngineUI.exe --svc\" start= auto DisplayName= \"Kaspersky ScanEngine UI\"","Start Kaspersky Scan Engine GUI:","sc start \"Kaspersky ScanEngine UI\"","Manual installation (Windows)","184719.htm");
Page[29]=new Array("This section describes how to upgrade Kaspersky Scan Engine&nbsp;from a previous version on Linux systems.","Upgrading Kaspersky Scan Engine on Linux","221907.htm");
Page[30]=new Array("Starting with Kaspersky Scan Engine version 2.0, you can automatically upgrade Kaspersky Scan Engine to a newer version.","Using the install utility to upgrade","You can upgrade Kaspersky Scan Engine with the same utility that is used to install Kaspersky Scan Engine: the install utility. You can find the utility in the distribution kit.","The install utility upgrades Kaspersky Scan Engine when the program meets the following requirements:","Kaspersky Scan Engine is already installed on the computer (that is, the /opt/kaspersky/ScanEngine directory exists).","If Kaspersky Scan Engine is not installed on the computer, the install utility performs automatic installation.","The version of Kaspersky Scan Engine that is already installed is 2.0 or later, and this version is earlier than the version being installed during the upgrade.","If Kaspersky Scan Engine version does not meet this requirement, the install utility displays an error message, and then exits.","When upgrading Kaspersky Scan Engine, the install utility backs up important objects such as configuration files, TLS certificates, and the license. Successful upgrade means that all of these objects are already integrated into the new version of Kaspersky Scan Engine. If the upgrade fails for some reason, the install utility restores the previous version of Kaspersky Scan Engine, including objects that were backed up.","Stopping instances of Kaspersky Scan Engine","If the Kaspersky Scan Engine instance being upgraded is a part of a cluster, you need to stop all instances in the cluster before the upgrade.","It is important to stop all instances because the install utility modifies the kavebase database when upgrading Kaspersky Scan Engine.","To stop the Kaspersky Scan Engine instance:","If an instance works in ICAP mode, run service kavicapd stop.","If an instance works in HTTP mode, run service kavhttpd stop.","If an instance uses the Kaspersky Scan Engine GUI, run service klScanEngineUI stop.","Upgrading Kaspersky Scan Engine","To upgrade Kaspersky Scan Engine automatically:","Make sure that you have root (administrator) privileges.","Run install.","Read the End User License Agreement (EULA) for Kaspersky Scan Engine.","If you agree with the terms of the EULA, accept it. If you decline to accept the terms of the EULA, the upgrade will be canceled.","If you agreed to use Kaspersky Security Network (KSN) earlier, the install utility displays the current terms of the EULA for KSN and the Privacy Policy. Read the new EULA for KSN and the Privacy Policy.","If you agree with the terms of the EULA and the Privacy Policy, accept them. If you decline the terms of the EULA for KSN or the Privacy Policy, you will not be able to use KSN, but the upgrade will continue. You can enable KSN later by using Kaspersky Scan Engine GUI or the Kaspersky Scan Engine configuration file (HTTP or ICAP).","Specify the absolute path to the directory that contains the KAV SDK package.","The KAV SDK package is located in a separate directory, starting with Kaspersky Scan Engine version 2.1.","After you specify the necessary data, Kaspersky Scan Engine is upgraded, and then started.","After you upgrade Kaspersky Scan Engine, you can check the integrity of its components at any time by using the integrity check tool.","Migration from the init script to the systemd unit file","Starting from Kaspersky Scan Engine version 2.1, the init script is no longer supported. Instead of this script, you can use the systemd unit file.","If you used the init script to manage Kaspersky Scan Engine in previous versions, the install utility automatically performs the migration from the init script to systemd during the upgrade.","Learn more about using systemd in HTTP mode and ICAP mode.","Adding new elements to the configuration files","There are new elements added in the new version of Kaspersky Scan Engine.  The install utility does not add these elements to the configuration files during the upgrade. You can add the new elements by using the Kaspersky Scan Engine GUI, or directly to the kavhttpd.xml and kavicapd.xml configuration files. See also the detailed information about the new elements in the configuration file.","Clearing browser cache","If you are using the Kaspersky Scan Engine GUI, clear your browser cache after the upgrade.","Automatic upgrade (Linux)","221941.htm");
Page[31]=new Array("This section describes how to upgrade Kaspersky Scan Engine manually.","Manual upgrade (Linux)","209771.htm");
Page[32]=new Array("To upgrade Kaspersky Scan Engine 2.0 and later manually:","Make sure you have root (administrator) privileges.","For Kaspersky Scan Engine 2.0. Stop Kaspersky Scan Engine:","If you use Kaspersky Scan Engine in ICAP mode, run this command:","/etc/init.d/kavicapd stop","If you use Kaspersky Scan Engine in HTTP mode, run this command:","/etc/init.d/kavhttpd stop","If you use Kaspersky Scan Engine GUI, run this command:"," /etc/init.d/klScanEngineUI stop","For Kaspersky Scan Engine 2.1 and later. Stop Kaspersky Scan Engine:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","service kavicapd stop","If you used Kaspersky Scan Engine in HTTP mode, run this command:","service kavhttpd stop","If you used Kaspersky Scan Engine GUI, run this command:","service klScanEngineUI stop","Create backup copies of the following data:","/opt/kaspersky/ScanEngine/etc/klScanEngineUI.xml","If Kaspersky Scan Engine worked in ICAP mode:","/opt/kaspersky/ScanEngine/etc/kavicapd.xml","/opt/kaspersky/ScanEngine/icap_data, if you configured ICAP rules in kavicapd_gui_rules.conf","If Kaspersky Scan Engine worked in HTTP mode: ","/opt/kaspersky/ScanEngine/etc/kavhttpd.xml","If Kaspersky Scan Engine used TLS, you need to copy the private key and certificate generated for use in TLS connections. The location of these files is specified in the TlsCertificateKeyFile and TlsCertificateFile elements of the kavhttpd.xml configuration file.","If you generated a certificate and a private key to use with the Kaspersky Scan Engine GUI, copy the certificate and the private key.","You can find information on the location of the certificate and private key in the SSLCertificatePath and SSLPrivateKeyPath elements of the klScanEngineUI.xml file.","The key file (if Kaspersky Scan Engine was activated in offline licensing mode) or the activation code (if Kaspersky Scan Engine was activated in online licensing mode).","You can find information on the location of the key file or activation code in the LicensePath element of the kavhttpd.xml configuration file (if Kaspersky Scan Engine worked in HTTP mode) or kavicapd.xml configuration file (if Kaspersky Scan Engine worked in ICAP mode).","In the /opt/kaspersky/ScanEngine directory, uninstall Kaspersky Scan Engine with uninstall.","If you used the Kaspersky Scan Engine GUI and you want to continue using the kavebase database created earlier in PostgreSQL, you do not need to submit the deletion of data from this database. However, you need to upgrade the database with the following command:","psql -d kavebase -a -f %tempdir%/samples/migrate.sql","The above command imports the contents of %tempdir%/samples/migrate.sql.","%tempdir% in this command is the directory that contains the unpacked Kaspersky Scan Engine distribution kit contents.","Make sure that the user running the database queries has access to the directory containing migrate.sql and also has read access to migrate.sql itself.","Do not use migrate.sql to upgrade the database used by Kaspersky Scan Engine version below 2.0.","You also need to specify the same username and password as used to connect to the previous version of the database. You can specify the username and password later, during the installation of Kaspersky Scan Engine.","If you forgot the username or password, use the psql utility.","If you forgot the username or password used to connect to the database, use the psql utility to get the username or to change the password.","To see the database username, run the following command:","postgres=# \\l kavebase","The psql utility displays information about the database name and its owner (username):","List of databases","-[ RECORD 1 ]-----+--------------------------","Name              | kavebase","Owner             | scanengine ","If you forgot the password, you need to change it with the following command:","alter user %USERNAME% with password '%PASSWORD%'; ","Here, %PASSWORD% is the new password for the %USERNAME% user.","Remove files form the directory /opt/kaspersky/ScanEngine/ or delete this directory.","Install the new version of Kaspersky Scan Engine with the installer.","Stop Kaspersky Scan Engine:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","service kavicapd stop","If you used Kaspersky Scan Engine in HTTP mode, run this command:","service kavhttpd stop","If you used Kaspersky Scan Engine GUI, run this command:","service klScanEngineUI stop","Copy data that you backed up earlier:","Copy klScanEngineUI.xml to /opt/kaspersky/ScanEngine/etc/","If the previous version of Kaspersky Scan Engine worked in ICAP mode:","Copy kavicapd.xml to /opt/kaspersky/ScanEngine/etc/","Copy data from icap_data to /opt/kaspersky/ScanEngine/icap_data, if you configured ICAP rules in kavicapd_gui_rules.conf ","If the previous version of Kaspersky Scan Engine worked in HTTP mode, copy kavhttpd.xml to /opt/kaspersky/ScanEngine/etc/","If you made copies of the private key and certificate to connect via TLS in HTTP mode, copy the private key and certificate to the directories, specified in the TlsCertificateKeyFile and TlsCertificateFile elements of the kavhttpd.xml configuration file.","Make sure that only users with administrator rights have read access to the certificate and the private key.","If you used Kaspersky Scan Engine GUI and you made copies of the certificate and the private key, place them in the locations that are specified in the SSLCertificatePath and SSLPrivateKeyPath elements of the klScanEngineUI.xml file, respectively.","Make sure that only users with administrator rights have read access to the certificate and the private key.","Make sure that the key file (if the previous version of Kaspersky Scan Engine was activated in offline licensing mode) or the activation code (if the previous version of Kaspersky Scan Engine was activated in online licensing mode) is located in the correct directory. ","You can find information on the location of the key file or activation code in the LicensePath element of the kavhttpd.xml configuration file (if Kaspersky Scan Engine worked in HTTP mode) or kavicapd.xml configuration file (if Kaspersky Scan Engine worked in ICAP mode).","Run Kaspersky Scan Engine:","To use Kaspersky Scan Engine in ICAP mode, run service kavicapd start","To use Kaspersky Scan Engine in HTTP mode, run service kavhttpd start","To use the Kaspersky Scan Engine GUI, run service klScanEngineUI start","If you are using the Kaspersky Scan Engine GUI, clear your browser cache after the upgrade.","If you decided to use the same kavebase database when installing the new version of Kaspersky Scan Engine, the password you specified in the previous version for Kaspersky Scan Engine GUI administrator remains valid, it is not reset to the default password.","Manually upgrading Kaspersky Scan Engine 2.0 and later","225714.htm");
Page[33]=new Array("To manually upgrade Kaspersky Scan Engine 1.0:","Make sure you have root (administrator) privileges.","Stop Kaspersky Scan Engine:","If you use Kaspersky Scan Engine in ICAP mode, run this command:","/etc/init.d/kavicapd stop","If you use Kaspersky Scan Engine in HTTP mode, run this command:","/etc/init.d/kavhttpd stop","If you use Kaspersky Scan Engine GUI, run this command:"," /etc/init.d/klScanEngineUI stop","Create backup copies of the following data:","If Kaspersky Scan Engine worked in ICAP mode and you configured ICAP rules in kavicapd_gui_rules.conf, you need to copy /opt/kaspersky/ScanEngine/icap_data.","If you generated a certificate and a private key to use with the Kaspersky Scan Engine GUI, copy the certificate and the private key.","You can find information on the location of the certificate and private key in the SSLCertificatePath and SSLPrivateKeyPath elements of the klScanEngineUI.xml file.","The key file (if Kaspersky Scan Engine was activated in offline licensing mode) or the activation code (if Kaspersky Scan Engine was activated in online licensing mode).","You can find information on the location of the key file or activation code in the LicensePath element of the kavhttpd.xml configuration file (if Kaspersky Scan Engine worked in HTTP mode) or kavicapd.xml configuration file (if Kaspersky Scan Engine worked in ICAP mode).","In the /opt/kaspersky/ScanEngine directory, uninstall Kaspersky Scan Engine with uninstall.","If you used the Kaspersky Scan Engine GUI, you also need to confirm deletion of data from the kavebase database. The structure of database in Kaspersky Scan Engine 1.0 differs significantly from the new version, so you cannot use the old database with the new version of Kaspersky Scan Engine.","Remove files form the directory /opt/kaspersky/ScanEngine/ or delete this directory.","Install the new version of Kaspersky Scan Engine with the installer.","Stop Kaspersky Scan Engine:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","service kavicapd stop","If you used Kaspersky Scan Engine in HTTP mode, run this command:","service kavhttpd stop","If you used Kaspersky Scan Engine GUI, run this command:","service klScanEngineUI stop","Copy data that you backed up earlier:","Copy klScanEngineUI.xml to /opt/kaspersky/ScanEngine/etc/ ","To be able to use Kaspersky Scan Engine GUI:","Go to /opt/kaspersky/ScanEngine/tools/","Run the following command:","./kav_encrypt -d '%USERNAME%:%PASSWORD%'","Here, %USERNAME% and %PASSWORD% are the username and password used to connect to the kavebase database.","If you forgot the username or password, use the psql utility.","If you forgot the username or password used to connect to the database, use the psql utility to get the username or to change the password.","To see the database username, run the following command:","postgres=# \\l kavebase","The psql utility displays information about the database name and its owner (username):","List of databases","-[ RECORD 1 ]-----+--------------------------","Name              | kavebase","Owner             | scanengine ","If you forgot the password, you need to change it with the following command:","alter user %USERNAME% with password '%PASSWORD%'; ","Here, %PASSWORD% is the new password for the %USERNAME% user.","If the previous version of Kaspersky Scan Engine worked in ICAP mode and you configured ICAP rules in kavicapd_gui_rules.conf, copy data from /opt/kaspersky/ScanEngine/icap_data.","If you used Kaspersky Scan Engine GUI and you made copies of the certificate and the private key, place them in the locations that are specified in the SSLCertificatePath and SSLPrivateKeyPath elements of the klScanEngineUI.xml file, respectively.","Make sure that only users with administrator rights have read access to the certificate and the private key.","Make sure that the key file (if the previous version of Kaspersky Scan Engine was activated in offline licensing mode) or the activation code (if the previous version of Kaspersky Scan Engine was activated in online licensing mode) is located in the correct directory. ","You can find information on the location of the key file or activation code in the LicensePath element of the kavhttpd.xml configuration file (if Kaspersky Scan Engine worked in HTTP mode) or kavicapd.xml configuration file (if Kaspersky Scan Engine worked in ICAP mode).","Run Kaspersky Scan Engine:","To use Kaspersky Scan Engine in ICAP mode, run service kavicapd start","To use Kaspersky Scan Engine in HTTP mode, run service kavhttpd start","To use the Kaspersky Scan Engine GUI, run service klScanEngineUI start","If you are using the Kaspersky Scan Engine GUI, clear your browser cache after the upgrade.","Manually upgrading Kaspersky Scan Engine 1.0","225715.htm");
Page[34]=new Array("Kaspersky Scan Engine uses updatable modules and the anti-malware database that allow you to extend detection functionality. ","This section explains how to update the anti-malware database and updatable modules of Kaspersky Scan Engine, and describes the best practices for updating.","Updating the anti-malware database and updatable modules","96464.htm");
Page[35]=new Array("Updating the anti-malware database and updatable modules on a regular basis ensures that Kaspersky Scan Engine provides a consistent level of security. See also best practices for database updates.","To update the database and modules, you must have a valid KEY file or an activation code for Kaspersky Scan Engine.","When the anti-malware database and modules are updated, the encrypted User-Agent string of Kaspersky Scan Engine is transferred to Kaspersky. See also the full list of data that is transferred to Kaspersky during an update.","Kaspersky Scan Engine supports the following methods of updating:","Regular updating by using the built-in functionality of Kaspersky Scan Engine","This method does not require any additional software to be installed.","This is the recommended method of updating.","Updating by using Updater SDK","You can use Updater SDK to download updates and to create mirror servers for updates.","Updater SDK, including the documentation on Updater SDK API, is delivered as a separate package.","Manual updating","This method is not recommended.","Updating by using the built-in functionality of Kaspersky Scan Engine","To configure regular updates by using the built-in functionality of Kaspersky Scan Engine:","If you are using Kaspersky Scan Engine in HTTP mode, configure updating for HTTP mode.","If you are using Kaspersky Scan Engine in ICAP mode, configure updating for ICAP mode.","You can also configure updating in Kaspersky Scan Engine GUI.","Updating by using Updater SDK","Updater SDK allows you to update Kaspersky Scan Engine and to create mirrors that keep your own copies of updates for updatable modules and the anti-malware database downloaded from the Kaspersky update servers. These mirrors can be deployed within the boundaries of a local enterprise network, allowing you to retrieve updates once, and then redistribute the updates to multiple endpoints within the local network and without having to contact the Kaspersky update servers each time. You can also use Updater SDK to download the updated anti-malware database to computers with Kaspersky Scan Engine installed.","For more information about updating with Updater SDK, see the Updater SDK documentation. You can get the Updater SDK documentation from the person at Kaspersky who provided you with the Kaspersky Scan Engine distribution kit.","Manual updating","Manual updating is not recommended.","You can run an update manually in the following ways:","Update the anti-virus database on demand in HTTP mode.","Update the anti-virus database by sending a SIGUSR2 signal in ICAP mode.","On the Kaspersky Scan Engine dashboard, by clicking the Update button.","About the update procedure","Updates are available through the Kaspersky update servers, which are dedicated servers on the Internet operated by Kaspersky that have the most recent versions of files provided by Kaspersky. Kaspersky Scan Engine can also download updates from mirror servers created with Updater SDK.","When the update is performed from the Kaspersky infrastructure, data is transmitted over a secure channel. The HTTPS (TLS) protocol can be used. The protocol to use is selected by the Kaspersky infrastructure.","The following data is downloaded during the update procedure of Kaspersky Scan Engine:","Malware definition files","Malware definitions store malware signature data. Scanning components of Kaspersky Scan Engine use these definitions for detection.","Updates for updatable modules","Updatable modules implement enhanced detection methods in Kaspersky Scan Engine.","Updates are performed by using a differential updating technique. This technique allows Kaspersky Scan Engine to update files by downloading only the part of the file that has changed since the last update.","Getting information about the current anti-malware database","You can get information about the current anti-malware database in the following ways:","On the Kaspersky Scan Engine dashboard.","Sending an HTTP request (in HTTP mode).","Getting the status of the kavicapd service by using the status command (in ICAP mode).","About updating","218188.htm");
Page[36]=new Array("The anti-malware database can be damaged if connectivity issues occur while Kaspersky Scan Engine is downloading updates. For this reason, Kaspersky Scan Engine has a mechanism of automatic database recovery.","You can configure backup in the following ways:","Use the Back up the anti-virus database toggle switch in Kaspersky Scan Engine GUI. To enable backup, turn on this toggle switch.","Specify the DisableBackup parameter in the kavhttpd.xml configuration file (HTTP mode). To enable backup, set this parameter to 0.","Specify the DisableBackup parameter in the kavicapd.xml configuration file (ICAP mode). To enable backup, set this parameter to 0.","Make sure that your hard disk has enough free space for a full copy of the database. ","If KAV Engine cannot start with a newly updated database, Kaspersky Scan Engine automatically restores the previous version of the database from the backup copy during the next initialization. ","After the database recovery is completed, Kaspersky Scan Engine deletes the backup copy. If no backup copy is found, Kaspersky Scan Engine tries to initialize with the current database.","When connectivity issues are resolved, try to update again.","Database backup and recovery","218259.htm");
Page[37]=new Array("You can use the reduced databases kit instead of the full databases kit. The reduced databases kit is smaller in size than the full kit and takes up less RAM when used. To ensure the same detection rate as when using the full databases kit, you must use the reduced kit together with KSN.","Reduced anti-malware databases kit and KSN","It is not recommended to use the reduced databases kit without KSN, because the detection rate will be lower than when using the full database kit. If there is no connection to the KSN servers (for example, when access to the Internet becomes unavailable), it is recommended to switch to the full databases kit.","If you download databases to mirror servers, always update both the reduced and full databases kits, so that the full kit will be up-to-date when Kaspersky Scan Engine switches to it.","Switching to the reduced databases kit by using the built-in functionality of Kaspersky Scan Engine","The instruction below shows the scenario of switching to the reduced databases kit by using the built-in functionality of Kaspersky Scan Engine.","To switch to the reduced databases kit:","Make sure that the current license supports KSN usage.","Enable KSN by using one of the following methods:","KAV_SHT_ENGINE_KSN flag in HTTP mode.","UseKSN parameter of the KSNSetting section of the ICAP mode configuration file in ICAP mode.","Make sure that you have read and accepted the End User License Agreement (EULA). You can find the text of the EULA in /doc/ksn_license.txt. To accept the EULA, the parameter Settings &gt; EULA &gt; KSN in the klScanEngineUI.xml configuration file must be set to accepted.","Enable reputation checking toggle switch in the scanning settings of Kaspersky Scan Engine GUI.","To start using the reduced databases kit, in HTTP and ICAP modes, specify 1 for the UseReducedBases parameter of the kavhttpd.xml and kavicapd.xml configuration files. By default, the value is 0.","Restart kavhttpd (in HTTP mode) or kavicapd (in ICAP mode).","Notice that the full databases kit is not removed and remains on the hard drive.","Switching to the full databases kit by using the built-in functionality of Kaspersky Scan Engine","The scenario below demonstrates how to switch to the full databases kit by using the built-in functionality of Kaspersky Scan Engine.","To switch to the full databases kit:","Set the UseReducedBases parameter to 0 (see UseReducedBases for HTTP or ICAP mode).","Restart kavhttpd (in HTTP mode) or kavicapd (in ICAP mode).","Notice that the reduced databases kit is not removed and remains on the hard drive.","Switching from the full databases kit to the reduced kit and removing the full databases kit","To switch from the full databases kit to the reduced kit, and then remove the full databases kit:","Perform steps 1 to 4 from subsection \"Switching to the reduced databases kit by using the built-in functionality of Kaspersky Scan Engine\" (see above).","Click Update from scratch on the Kaspersky Scan Engine dashboard.","After this, the reduced databases kit is downloaded.","Reduced anti-malware databases kit usage","218262.htm");
Page[38]=new Array("The best practices listed here help you maintain a consistent level of security in Kaspersky Scan Engine.","Avoid using an out-of-date or extremely out-of-date database. If Kaspersky Scan Engine is not up to date, maximum protection cannot be guaranteed.","Do not download updates to an empty directory on regular basis","In some cases, Kaspersky public update servers do not contain some of the components to update. Therefore, we recommend that you do not regularly update databases from scratch (download the anti-virus database from an update server to an empty directory). If you do, Kaspersky Scan Engine may not start or may work incorrectly. Make sure that the target directory to which the updates are downloaded contains an existing anti-virus database. If you have problems with updating an existing anti-virus database, you can try using the anti-virus database from the distribution kit instead.","Schedule a daily update","You must run the update procedure and obtain new malware definitions and updates for modules at least once an hour.","This measure reduces the risk of a scenario where KSN becomes unavailable due to an expired KSN encryption key file.","The KSN encryption key file is used to secure the communication between Kaspersky Scan Engine and KSN servers. This file is updated during the regular anti-malware database update procedure. By default, Kaspersky Scan Engine checks the status of the KSN encryption key file during every update and if the current KSN encryption key file is expired, a new key is downloaded during the update.","The following classification must be used when considering updates.","Database up-to-dateness classification","Anti-malware database is considered","If the update was last run","Up to date","Less than one day ago.","Out of date","Less than three days ago.","Extremely out of date","More than a week ago.","Use the reduced anti-malware databases kit","You can use the reduced anti-malware databases kit if you want to reduce the hard disk space that Kaspersky Scan Engine uses.","Use the anti-malware databases backup","We recommend that you turn on the anti-malware databases backup. If Kaspersky Scan Engine cannot initialize after some update, it can restore the anti-malware databases from backup.","Best practices for database updates","218298.htm");
Page[39]=new Array("This functionality is available starting with Kaspersky Scan Engine 2.0.","You can configure your environment for getting updates from an HTTPS server.","To configure updating from an HTTPS server:","Create an HTTPS server as a mirror for storing the anti-virus database files.","On the HTTPS server, configure Updater SDK (or the keep-up-to-date tool) to perform updating and distribution of the anti-virus database files.","You must use Updater SDK or the keep-up-to-date tool on the HTTPS server. It is not possible to create or configure the mirror server by using Kaspersky Scan Engine. You can get the Updater SDK from the person at Kaspersky who provided you with the Kaspersky Scan Engine distribution kit.","On the computers that will use the HTTPS server, configure Kaspersky Scan Engine to download updates from the HTTPS server.","For the kavhttpd or kavicapd service, do the following:","In the UpdateSettings &gt; UpdatesCertFile element of the kavhttpd or kavicapd configuration file, specify the local path to the root certificate of the key with which the TLS certificate of your HTTPS server is signed.","You can leave the value of this element empty.","In the UpdateSettings &gt; UpdateSources element of the kavhttpd or kavicapd configuration file, specify the address of the HTTPS server.","In the UpdateSettings &gt; UseOnlyCustomSources element of the kavhttpd or kavicapd configuration file, specify 1.","In the UpdateSettings &gt; CertificateConfirmationAction element of the kavhttpd or kavicapd configuration file, specify the value according to the desired action to undertake if the update server uses an untrusted certificate.","Restart Kaspersky Scan Engine.","Updating from an HTTPS server","218349.htm");
Page[40]=new Array("This chapter contains information about using Kaspersky Scan Engine in HTTP mode.","Using Kaspersky Scan Engine in HTTP mode","192979.htm");
Page[41]=new Array("Hypertext Transfer Protocol (HTTP) is the standard communication protocol in the client-server computer model. In HTTP mode, Kaspersky Scan Engine operates as a REST-like service that receives HTTP requests in JSON or plain text format from client applications. The service scans objects passed in these requests, and sends back HTTP responses with scan results in JSON or plain text format.","In addition, a sample HTTP client source code is shipped in the distribution package. This sample HTTP client demonstrates how to make requests to Kaspersky Scan Engine in HTTP mode. You can also use the compiled sample to scan files from the command line.","Connection types","Kaspersky Scan Engine supports two connection types:","TCP connection","UNIX socket connection","For Linux systems only.","Scanning capabilities","Kaspersky Scan Engine supports the following scan modes:","scanfile","In this mode, the sample HTTP client passes file paths to Kaspersky Scan Engine, which reads the files and scans them.","scanmemory","In this mode, the sample HTTP client passes file contents to Kaspersky Scan Engine, which scans the contents. The maximum size of an object sent for scanning in scanmemory mode is limited by the system memory of the computer.","checkurl","In this mode, the sample HTTP client passes URLs to Kaspersky Scan Engine, which checks them for malicious and phishing addresses.","You can scan files and URLs by making HTTP requests via KAV protocols version 3 or KAV protocol versions 1 and 2.","API token authorization","Kaspersky Scan Engine supports API token authorization.","If API token authorization is enabled, HTTP clients must specify an API token in the request header when sending requests to Kaspersky Scan Engine. This request header field used for sending an API token has a custom name. The Kaspersky Scan Engine administrator can specify this name in the Authorization section of the Kaspersky Scan Engine GUI. The default name is Authorization.","If you have enabled API token authorization and the kavhttpd service is not running, starting klScanEngineUI will also initiate the start of the kavhttpd service.","The usual procedure for creating and using an API token is as follows:","The Kaspersky Scan Engine administrator creates a token in the Authorization section of the Kaspersky Scan Engine GUI.","The Kaspersky Scan Engine administrator provides the token to the users who can use it to get access to the kavhttpd service.","When making HTTP requests, the HTTP client sends the token as the value of the authorization field in the request header. The name of the authorization field in the request header must be the same as specified in the Kaspersky Scan Engine settings (see the description of the Authorization header field element of the Authorization section).","If authorization is successful, Kaspersky Scan Engine provides access to its functions.","To try API token authorization and understand how it works, you can use the HTTP client provided with Kaspersky Scan Engine: configure Kaspersky Scan Engine to authorize requests, create an API token, and then use the HTTP client to send a request containing the token. You can find the examples of such requests sent over the KAV protocol version 1 or 2 and version 3.","For security reasons, an HTTPS connection is required to send requests that need authorization.","Keep-Alive connections","By default, Kaspersky Scan Engine supports Keep-Alive connections, so it can process multiple objects one after another, by using the same connection.","To open a Keep-Alive connection, an HTTP client has to add the following header to the request:","Connection: Keep-Alive","To close the connection, an HTTP client has to add the following header to the request:","Connection: close","Kaspersky Scan Engine and HTTP mode","184921.htm");
Page[42]=new Array("Kaspersky Scan Engine in HTTP mode supports HTTPS to establish a secure connection. ","Kaspersky Scan Engine does not check the HTTP client certificate.","Kaspersky Scan Engine supports the following secure protocols and cipher suites:","TLS 1.3 protocol and the following cipher suites:","TLS_AES_256_GCM_SHA384","TLS_CHACHA20_POLY1305_SHA256","TLS_AES_128_GCM_SHA256","TLS 1.2 protocol and the following cipher suites:","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256","To configure an HTTPS connection, you need to specify the following parameters in the HTTP mode configuration file:","A path to the private key file (the ServerSettings &gt; TlsCertificateKeyFile element)","A path to the certificate file (the ServerSettings &gt; TlsCertificateFile element)","The https protocol (the ServerSettings &gt; ConnectionString element)","In addition, you can configure an HTTPS connection by using Kaspersky Scan Engine GUI.","Below is an example of how to generate private key and certificate files.","To generate a private key and a certificate (Linux):","Go to /opt/kaspersky/ScanEngine/tools.","Run the following command:","./openssl req -new -x509 -config openssl.cnf -newkey ec -pkeyopt ec_paramgen_curve:secp384r1 -nodes -days 3650 -subj \"/C=RU/CN=localhost\" -keyout kavhttpd.key -out kavhttpd.cert","In /opt/kaspersky/ScanEngine/tools, two files are created:","kavhttpd.key&#8212;the private key","kavhttpd.cert&#8212;the certificate","To generate a private key and a certificate (Windows):","Go to %service_dir%\\tools.","Run the following command:","openssl.exe req -new -x509 -config openssl.cnf -newkey ec -pkeyopt ec_paramgen_curve:secp384r1 -nodes -days 3650 -subj \"/C=RU/CN=localhost\" -keyout kavhttpd.key -out kavhttpd.cert","In %service_dir%\\tools, two files are created:","kavhttpd.key&#8212;the private key","kavhttpd.cert&#8212;the certificate","HTTPS connections","210245.htm");
Page[43]=new Array("This section describes the recommended settings for Kaspersky Scan Engine in HTTP mode.","If you use the Kaspersky Scan Engine GUI, specify the recommended parameters as described in the table below.","Recommended settings for HTTP mode in the Kaspersky Scan Engine GUI","Settings in the Kaspersky Scan Engine GUI","Recommended settings","Service &gt; Keep-alive connection","See the description of KeepAliveSettings below","Service &gt; Connection timeout","See the description of TimeoutMs in KeepAliveSettings below","Service &gt; Sessions","See the description of MaxHTTPSessionsNum below","Service &gt; Connections","See the description of MaxIncomingConnectionsNum below","Service &gt; Threads","Twice the value of ScannersCount","Service &gt; Processes","Equal to the number of processor cores","Scanning &gt; Enable reputation checking","Turn on the toggle switch","Scanning &gt; Enable Phishing Protection","Turn on the toggle switch","Scanning &gt; Object scan timeout","10000 (10 seconds)","Scanning &gt; Heuristic analysis level","Low","Scanning &gt; Actions on detected objects","See the description of Mode below","Scanning &gt; Size limit for the received file","10343 KB (10.1 MB)","Get an updated value from your TAM at least once a year","Scanning &gt; Maximum depth","5","Scanning &gt; Types of files to scan","Select the checkbox:","Packed objects","Archives","Emails databases","Emails","If you do not use the Kaspersky Scan Engine GUI, specify the recommended parameters in the kavhttpd.xml configuration file as described in the table below.","Recommended settings for HTTP mode in the configuration file","Parameter in kavhttpd.xml","Recommended settings","ScannersCount","Equal to the number of processor cores","ThreadsCount","Twice the value of ScannersCount","MaxIncomingConnectionsNum","See the description of MaxIncomingConnectionsNum below","MaxHTTPSessionsNum","See the description of MaxHTTPSessionsNum below","QueueLen","Greater than or equal to the value of MaxHTTPSessionsNum","Greater than the ThreadsCount value","MaxTCPFileSize","10591440 bytes (10.1 MB)","Get an updated value from your TAM at least once a year","Flags","Specify the flags:","KAV_O_M_PACKED","KAV_O_M_ARCHIVED","KAV_O_M_MAILPLAIN","KAV_O_M_MAILBASES","KAV_O_M_HEURISTIC_LEVEL_SHALLOW","KAV_SHT_ENGINE_KSN","KAV_SHT_ENGINE_APUF","Mode","See the description of Mode below","MaxArchivesScanningDepth","5","SessionTimeout","10000 (10 seconds)","KeepAliveSettings","See the description of KeepAliveSettings below","ScannersCount","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Processes.","The recommended number of scanning processes is equal to the number of processor cores. For example, if Kaspersky Scan Engine is running on a computer with a 4-core processor, set ScannersCount to 4.","See also subsection \"Example of Kaspersky Scan Engine work in HTTP mode depending on the ScannersCount, ThreadsCount, QueueLen, MaxIncomingConnectionsNum, and MaxHTTPSessionsNum settings.\"","ThreadsCount","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Threads.","The recommended number of scanning threads depends on the number of scanning processes specified in ScannersCount: the value of ThreadsCount is twice the value of ScannersCount. For example, if Kaspersky Scan Engine is running on a computer with a 4-core processor and ScannersCount is set to 4, set ThreadsCount to 8.","See also the subsection \"Example of Kaspersky Scan Engine work in HTTP mode depending on the ScannersCount, ThreadsCount, QueueLen, MaxIncomingConnectionsNum, and MaxHTTPSessionsNum settings.\"","MaxIncomingConnectionsNum","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Connections.","You can configure this parameter to set the queue length of the incoming TCP connections waiting for connection with HTTPD. See section \"Setting up the connection queue in HTTP mode\" for connection queue setup details. ","For example, you expect, on average, ten simultaneous connections with clients. If MaxHTTPSessionsNum value is set to 10, all 10 connections simultaneously occurred will be accepted by HTTPD for processing. The 11th incoming TCP connection will wait for connection with HTTPD. At least 11 additional connections can wait for HTTPD acceptance, the 12th additional  connection will cause an error message. So, when setting the value for MaxIncomingConnectionsNum, consider the value for MaxHTTPSessionNum: the value specified in MaxIncomingConnectionsNum should be multiple times bigger than the value specified in MaxHTTPSessionNum.","MaxHTTPSessionsNum","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Sessions.","When specifying the value for this parameter, consider the following:","the maximum number of scanning threads (ThreadsCount).","the maximum length of the queue for scan tasks (QueueLen).","the maximum length of the scan waiting queue (MaxIncomingConnectionsNum).","specifics of the НТТPD: in general, HTTPD runs one scanning process for one scan task.","The recommended value is:","greater than or equal to:","5*ThreadsCount/4 (when scanning files and URL).","3*ThreadsCount/2 (when scanning system memory).","corresponds to the expected number of HTTP clients that make requests to HTTPD.","See also the subsection \"Example of Kaspersky Scan Engine work in HTTP mode depending on the ScannersCount, ThreadsCount, QueueLen, MaxIncomingConnectionsNum, and MaxHTTPSessionsNum settings.\"","QueueLen","Since the scan tasks are enqueued from all simultaneously open sessions, consider the MaxHTTPSessionsNum settings. The queue length should not be less than the MaxHTTPSessionsNum value. Otherwise, some clients will get an error when opening sessions.","Since the scan tasks are processed by the threads from the queue, the queue length should not be less than the number of threads in ThreadsCount. Otherwise, some threads will be not in use.","The recommended QueueLen value is:","greater than the ThreadsCount value.","greater than or equal to MaxHTTPSessionsNum value.","See also the subsection \"Example of Kaspersky Scan Engine work in HTTP mode depending on the ScannersCount, ThreadsCount, QueueLen, MaxIncomingConnectionsNum, and MaxHTTPSessionsNum settings.\"","MaxTCPFileSize","During scanning, HTTPD loads the files into the system memory. The greater the file size and the number of active sessions, the more system memory is consumed. The value specified should be less than the RAM size.","To  increase performance, you can specify the maximum size of HTTP messages sent to HTTPD and set the value to 10591440 bytes (10.1 MB). This value provides detecting most of the malware.","If you have followed the recommendation above, we also recommend consulting with your Technical Account Manager (TAM) once a year to get an updated recommended value, as the average malware size changes from year to year.","Flags","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Types of files to scan, Settings &gt; Scanning &gt; Heuristic analysis level and Settings &gt; Scanning &gt; Enable reputation checking.","The recommended value for Flags is the following:","KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW | KAV_SHT_ENGINE_KSN","If the KAV_SHT_ENGINE_KSN flag is used, it is also recommended to enable Phishing Protection by using one of the following ways:","In the Flags element of the kavhttpd.xml configuration file, add the KAV_SHT_ENGINE_APUF flag.","On the Settings &gt; Scanning page of the Kaspersky Scan Engine GUI, turn on the Enable Phishing Protection toggle switch.","Phishing Protection is useful when Kaspersky Scan Engine checks URLs. ","Mode","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Actions on detected objects.","If it is expected to specify the object local path (request scanfile to scan a local file), specify the following:","KAV_DELETE (if the object is to be deleted without a disinfection attempt).","KAV_CLEAN_DELETE (if the object is to be disinfected or to be deleted, if disinfection is impossible).","Specify KAV_SKIP in all other cases.","MaxArchivesScanningDepth","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Maximum depth.","We recommend that you limit the maximum depth of nested archives to be unpacked during scanning. The recommended value for MaxArchivesScanningDepth is 5.","SessionTimeout","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Object scan timeout.","You can set a timeout for all operations in a session: connection with a client, data receipt, and object checking.  Timeout configuring can be used with the X-KAV-Timeout header (see Setting the session timeout). ","Setting the timeout allows the following:","immediate releasing the scanning thread, if the session time has expired.","faster managing the queue of the incoming TCP connections (the queue length is set in MaxIncomingConnectionsNum).","Initially, HTTPD receives the data, and then loads the files into the system memory during scanning. The greater the file size and the number of active sessions, the more system memory is consumed. To  increase performance, you can specify the maximum size of HTTP messages sent to HTTPD (see MaxTCPFileSize above) and limit the session time in SessionTimeout. This will allow you to skip the large objects or objects requiring a long time for scanning.","Before setting a value to SessionTimeout, we recommend that you estimate the expected number of HTTP clients requesting the HTTPD, as well as probable length of the incoming TCP connections queue.","Generally, the default value for SessionTimeout is 10000 (10 seconds).","KeepAliveSettings","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Keep-alive connection.","We recommend enabling Keep-Alive. When Keep-Alive is enabled, Kaspersky Scan Engine maintains a persistent connection even after the request has been processed and the session timed out. This gives the following advantages:","reduce network traffic.","reduce the use of server resources.","reduce latency in processing requests.","Keep-Alive is especially useful for HTTPS connections that require more CPU time and more client-server interactions.","To enable Keep-Alive, set the Enabled element in KeepAliveSettings to 1.","To determine the values for TimeoutMs and MaxRequests, estimate the number of clients and the number of requests from clients.","For example, you have estimated that the maximum number of clients is 10, so you set MaxHTTPSessionsNum to 10. If TimeoutMs and MaxRequests are unlimited, and all 10 clients send requests continuously, Kaspersky Scan Engine maintains connections with these 10 clients without limits. As a result, new connections cannot be accepted by HTTPD for processing.","Another example. You have estimated that the maximum number of clients is 10, so you set MaxHTTPSessionsNum to 10. You have also estimated that the maximum number of requests from one client is 15, so you set MaxRequests to 15. If you did not set the limit for TimeoutMs, and clients do not send 15 requests, Kaspersky Scan Engine maintains connections with these 10 clients without limits, so new connections cannot be accepted by HTTPD for processing.","Example of Kaspersky Scan Engine work in HTTP mode depending on the ScannersCount, ThreadsCount, QueueLen, MaxIncomingConnectionsNum, and MaxHTTPSessionsNum settings","Let's say Kaspersky Scan Engine is installed on a computer with four CPU cores, there are 15 simultaneous connections to this computer, and Kaspersky Scan Engine is configured as follows:","ScannersCount = 4","ThreadsCount = 8","QueueLen = 20","MaxHTTPSessionsNum = 10","MaxIncomingConnectionsNum = 20","In this case:","Five out of fifteen clients will be enqueued for connection.","Ten sessions will open for ten clients.","Ten open sessions will form a queue of scan tasks. If the number of scan tasks surpass the value of QueueLen, the client will receive the error 503 - Service overloaded.","Kaspersky Scan Engine runs four scanning processes.","Four scanning processes create eight threads for simultaneous processing of eight scan tasks from the queue (one thread for one scan task).","Recommended settings for HTTP mode","225526.htm");
Page[44]=new Array("This section explains how to manually configure Kaspersky Scan Engine for use in HTTP mode without using Kaspersky Scan Engine GUI.","Configuring Kaspersky Scan Engine in HTTP mode","192980.htm");
Page[45]=new Array("The HTTP mode configuration file (hereinafter, also configuration file) is an XML file that specifies general settings for Kaspersky Scan Engine.","HTTP mode configuration file (Linux)","The Kaspersky Scan Engine distribution kit for Linux contains a %distr_kit%/etc/kavhttpd.xml configuration file. ","After installing Kaspersky Scan Engine, you can copy kavhttpd.xml to your preferred location:","If you copy kavhttpd.xml to the /etc/ directory, Kaspersky Scan Engine automatically finds and parses this file.","If you copy kavhttpd.xml to a different location, you must set the path to this location when you start Kaspersky Scan Engine:","by using the systemd unit file","by running Kaspersky Scan Engine from the command line manually","HTTP mode configuration file (Windows)","The Kaspersky Scan Engine distribution kit for Windows contains a %distr_kit%\\bin\\kavhttpd.xml configuration file.","We recommend specifying full paths to files in kavhttpd.xml. In particular, it is strongly recommended to specify the full paths to the certificate (the TlsCertificateFile element) and the key file (the TlsCertificateKeyFile element).","Parameters of the HTTP mode configuration file","Most elements of the configuration file have default values that are used when the element is absent. Elements that are present in the configuration file must not be empty, unless stated otherwise.","KAV HTTPD configuration file contains the following parent elements:","ServerSettings","KSNSettings","KAVScanningSettings","DirectorySettings","UseHTTPProxy","HTTPProxy","UpdateSettings","FormatRecognizerSettings","Structure of the configuration file","Following is an example of the HTTP mode configuration file.","&lt;Configuration&gt;","&lt;ServerSettings&gt;","&lt;ConnectionString&gt;/tmp/.kavhttpd&lt;/ConnectionString&gt;","&lt;MaxIncomingConnectionsNum&gt;100&lt;/MaxIncomingConnectionsNum&gt;","&lt;MaxHTTPSessionsNum&gt;50&lt;/MaxHTTPSessionsNum&gt;","&lt;MaxTCPFileSize&gt;100&lt;/MaxTCPFileSize&gt;","&lt;SessionTimeout&gt;1000&lt;/SessionTimeout&gt;","&lt;Flags&gt;KAV_SHT_ENGINE_KSN | KAV_SHT_ENGINE_APUF&lt;/Flags&gt;","&lt;TlsCertificateKeyFile&gt;opt/kaspersky/http_data/https_key.pem&lt;/TlsCertificateKeyFile&gt;","&lt;TlsCertificateFile&gt;opt/kaspersky/http_data/https_cert.crt&lt;/TlsCertificateFile&gt;","&lt;CORS&gt;","&lt;AccessControlAllowOrigin&gt;https://example.com&lt;/AccessControlAllowOrigin&gt;","&lt;AccessControlAllowOrigin&gt;https://kaspersky.ru&lt;/AccessControlAllowOrigin&gt;","&lt;/CORS&gt;","&lt;KeepAliveSettings&gt;			","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","&lt;AuthSettings&gt;","&lt;UseAccessToken&gt;0&lt;/UseAccessToken&gt; &lt;!--Enable or disable API-token authentication --&gt;","&lt;AuthRequestField&gt;Authorization&lt;/AuthRequestField&gt;","&lt;UseBearerAuthScheme&gt;1&lt;/UseBearerAuthScheme&gt;","&lt;AccessTokens&gt;","&lt;Token&gt;","    &lt;Name&gt;Unlimited key&lt;/Name&gt;","    &lt;Value&gt;JWXA529CU2q7Udv7r3ji6BEMsha-5yu0KqU3yvKtf-6I+TU2AEQACKAABIgpEIIM&lt;/Value&gt;","    &lt;Description&gt;Kaspersky Scan Engine Clients. Full access scope&lt;/Description&gt;","    &lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;Token&gt;","    &lt;Name&gt;Key for URL-scanning&lt;/Name&gt;","    &lt;Value&gt;MIIEpgIBAAKCAQEA2UT+I6-ftKvy3UqK0uy5-ahsMEB6ij3r7vdU7q2UC925AXWJ&lt;/Value&gt;","    &lt;Description&gt;Server access key. Only URL-scanning&lt;/Description&gt;","    &lt;Enabled&gt;0&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;/AccessTokens&gt;","&lt;/AuthSettings&gt;","&lt;/ServerSettings&gt;","&lt;KSNSettings&gt;","&lt;UrlCheckTimeoutMs&gt;20000&lt;/UrlCheckTimeoutMs&gt;","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","&lt;/KSNSettings&gt;","&lt;KAVScanningSettings&gt;","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","&lt;Flags&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILBASES | KAV_O_M_MAILPLAIN | KAV_O_M_HEURISTIC_LEVEL_DETAIL&lt;/Flags&gt;","&lt;Mode&gt;KAV_SKIP&lt;/Mode&gt;","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","&lt;/KAVScanningSettings&gt;","&lt;DirectorySettings&gt;","&lt;BasesPath&gt;/home/bases&lt;/BasesPath&gt;","&lt;TempPath&gt;/home/temp&lt;/TempPath&gt;","&lt;LicensePath&gt;/home/license&lt;/LicensePath&gt;","&lt;LicensingMode&gt;1&lt;/LicensingMode&gt;","&lt;ScanningPaths&gt;","&lt;ScanningPath&gt;&lt;/ScanningPath&gt;","&lt;/ScanningPaths&gt;","&lt;/DirectorySettings&gt;","&lt;UseHTTPProxy&gt;1&lt;/UseHTTPProxy&gt;","&lt;HTTPProxy&gt;","&lt;url&gt;myproxy.mycompany.com&lt;/url&gt;","&lt;port&gt;3128&lt;/port&gt;","&lt;user&gt;doOTrypDTxpVJxUHYeKQTw==&lt;/user&gt;","&lt;pass&gt;8mSHXFix3uL+RP9oNeKDZQ==&lt;/pass&gt;","&lt;/HTTPProxy&gt;","&lt;UpdateSettings&gt;","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","&lt;UpdatePeriodMinutes&gt;0&lt;/UpdatePeriodMinutes&gt;","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","&lt;UpdateSources&gt;","&lt;Source&gt;[update source]&lt;/Source&gt;","&lt;/UpdateSources&gt;","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","&lt;/UpdateSettings&gt;","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","&lt;KAV_FF_GENERAL_CSV/&gt;","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt; ","&lt;/Configuration&gt;","HTTP mode configuration file","184799.htm");
Page[46]=new Array("Specifies server settings for KAV HTTPD. ","Path","ServerSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","ConnectionString","MaxIncomingConnectionsNum","MaxHTTPSessionsNum","MaxTCPFileSize","SessionTimeout","Flags","TlsCertificateKeyFile","TlsCertificateFile","CORS","KeepAliveSettings","AuthSettings","Example","The following is an example of a ServerSettings element.","&lt;ServerSettings&gt;","&lt;ConnectionString&gt;/tmp/.kavhttpd&lt;/ConnectionString&gt;","&lt;MaxIncomingConnectionsNum&gt;100&lt;/MaxIncomingConnectionsNum&gt;","&lt;MaxHTTPSessionsNum&gt;50&lt;/MaxHTTPSessionsNum&gt;","&lt;MaxTCPFileSize&gt;100&lt;/MaxTCPFileSize&gt;","&lt;SessionTimeout&gt;1000&lt;/SessionTimeout&gt;","&lt;Flags&gt;KAV_SHT_ENGINE_KSN | KAV_SHT_ENGINE_APUF&lt;/Flags&gt;","&lt;TlsCertificateKeyFile&gt;opt/kaspersky/http_data/https_key.pem&lt;/TlsCertificateKeyFile&gt;","&lt;TlsCertificateFile&gt;opt/kaspersky/http_data/https_cert.crt&lt;/TlsCertificateFile&gt;","&lt;CORS&gt;","&lt;AccessControlAllowOrigin&gt;http://example.com&lt;/AccessControlAllowOrigin&gt;","&lt;AccessControlAllowOrigin&gt;https://www.kaspersky.com&lt;/AccessControlAllowOrigin&gt;","&lt;/CORS&gt;","&lt;KeepAliveSettings&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","&lt;AuthSettings&gt;","&lt;UseAccessToken&gt;0&lt;/UseAccessToken&gt; &lt;!--Enable or disable API-token authentication --&gt;","&lt;AuthRequestField&gt;Authorization&lt;/AuthRequestField&gt;","&lt;UseBearerAuthScheme&gt;1&lt;/UseBearerAuthScheme&gt;","&lt;AccessTokens&gt;","&lt;Token&gt;","&lt;Name&gt;Unlimited key&lt;/Name&gt;","&lt;Value&gt;SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==&lt;/Value&gt;","&lt;Description&gt;Kaspersky Scan Engine Clients. Full access scope&lt;/Description&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;Token&gt;","&lt;Name&gt;Key for URL-scanning&lt;/Name&gt;","&lt;Value&gt;XUmCkYURUdWQldFGIT3TlEQUQQwkBy2LLNaNMVtrkSQUR2kSNUZV=NT2zLRzQJycVW5VNhUVOdLVcUd3YeVFnT=h&lt;/Value&gt;","&lt;Description&gt;Server access key. Only URL-scanning&lt;/Description&gt;","&lt;Enabled&gt;0&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;/AccessTokens&gt;","&lt;/AuthSettings&gt;","&lt;/ServerSettings&gt;","ServerSettings","201021.htm");
Page[47]=new Array("Specifies the IP address and the port for Kaspersky Scan Engine with a protocol (http:// or https://), or a path to the UNIX socket used by Kaspersky Scan Engine. This is a string value.","If you want to use the HTTPS protocol, the elements TlsCertificateKeyFile and TlsCertificateFile are mandatory.","Path","ServerSettings &gt; ConnectionString","Attributes","This element has no attributes.","Value","Mandatory parameter. The default value is /tmp/.kavhttpd in Linux and 127.0.0.1:9999 in Windows. You can specify an IP address and a port for a TCP connection in the following format: protocol://ip_addr:port.","Example","The following is an example of this element.","&lt;ConnectionString&gt;/tmp/.kavhttpd&lt;/ConnectionString&gt;","ConnectionString","201026.htm");
Page[48]=new Array("Specifies the maximum number of pending TCP connections to Kaspersky Scan Engine in HTTP mode. Extra connections may be dropped.","Path","ServerSettings &gt; MaxIncomingConnectionsNum","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 100. ","See also the examples of setting up the connection queue in HTTP mode.","Example","The following is an example of this element.","&lt;MaxIncomingConnectionsNum&gt;100&lt;/MaxIncomingConnectionsNum&gt;","MaxIncomingConnectionsNum","201027.htm");
Page[49]=new Array("Specifies the maximum number of active TCP connections that Kaspersky Scan Engine can maintain simultaneously.","It is not recommended to specify a value greater than the number of TCP connections that your HTTP client can simultaneously maintain with Kaspersky Scan Engine.","Path","ServerSettings &gt; MaxHTTPSessionsNum","Attributes","This element has no attributes.","Value","This value must be an unsigned integer. The default value is 10. If you set MaxHTTPSessionsNum to 0, the default value is used. ","See also the examples of setting up the connection queue in HTTP mode.","Example","The following is an example of this element.","&lt;MaxHTTPSessionsNum&gt;50&lt;/MaxHTTPSessionsNum&gt;","MaxHTTPSessionsNum","201028.htm");
Page[50]=new Array("Specifies the maximum allowed size (in bytes) of the headers and bodies of the HTTP messages that are passed to Kaspersky Scan Engine.","Path","ServerSettings &gt; MaxTCPFileSize","Attributes","This element has no attributes.","Value","This value must be an unsigned integer. It is recommended to specify at least 100 KB for the headers.","The default value is 104857600 (100 MB). If you set MaxTCPFileSize to 0, the default value is used.","Example","The following is an example of this element.","&lt;MaxTCPFileSize&gt;100&lt;/MaxTCPFileSize&gt;","MaxTCPFileSize","201029.htm");
Page[51]=new Array("Specifies the timeout for processing the request and sending the response, in milliseconds (ms). ","Path","ServerSettings &gt; SessionTimeout","Attributes","This element has no attributes.","Value","This value must be an unsigned integer. The default value is 1000. If you set SessionTimeout to 0, the timeout for processing the request and sending the response is not limited. See also the detailed information about setting the session timeout.","Example","The following is an example of this element.","&lt;SessionTimeout&gt;1000&lt;/SessionTimeout&gt;","SessionTimeout","201030.htm");
Page[52]=new Array("Specifies the initialization options for Kaspersky Scan Engine. Initialization options are defined by a combination of flags separated by pipes (|).","Path","ServerSettings &gt; Flags","Attributes","This element has no attributes.","Value","This is a string value.","Possible values:","KAV_SHT_ENGINE_KLAV","Enable KLAV anti-virus engine.","If you set this flag, you do not have to specify the KAV_SHT_ENGINE_KLAVEMU flag. Enabling KLAV Engine automatically turns on the KLAV emulator.","KAV_SHT_ENGINE_KLAVEMU","Enable the advanced heuristic anti-virus engine (KLAV emulator). Add this flag if you want to use heuristics.","KAV_SHT_ENGINE_WMUF","Enable detection of malicious websites.","KAV_SHT_ENGINE_APUF","Use phishing protection.","KAV_SHT_ENGINE_KSN","Use KSN to check the reputation of files and URLs.","Before specifying the KAV_SHT_ENGINE_KSN flag, make sure that your key file allows you to use this functionality and that you accepted the terms of the EULA for KSN.","KAV_SHT_ENGINE_STATISTIC_MAIL","Submit statistical information to KSN in Linux.","Before specifying the KAV_SHT_ENGINE_STATISTIC_MAIL flag, make sure that your key file allows you to use this functionality.","KAV_SHT_ENGINE_STATISTIC","Submit statistical information to KSN in Windows.","Before specifying the KAV_SHT_ENGINE_STATISTIC flag, make sure that your key file allows you to use this functionality.","Notice that by enabling the KAV_SHT_ENGINE_KSN, KAV_SHT_ENGINE_STATISTIC_MAIL, or KAV_SHT_ENGINE_STATISTIC flags, you agree to transfer data to Kaspersky, as described in the corresponding About data provision*.txt file. See also the detailed information about data provisioning and statistics submitted to KSN.","Example","The following is an example of this element.","&lt;Flags&gt;KAV_SHT_ENGINE_KSN | KAV_SHT_ENGINE_APUF&lt;/Flags&gt;","Flags","201031.htm");
Page[53]=new Array("Specifies a path to the private key file.","Path","ServerSettings &gt; TlsCertificateKeyFile","Attributes","This element has no attributes.","Value","This can be either absolute or a relative path. A relative path is calculated relative to the kavhttpd binary file.","This element is mandatory if the ConnectionString element contains the https:// protocol.","Example","The following is an example of this element.","&lt;TlsCertificateKeyFile&gt;opt/kaspersky/http_data/https_key.pem&lt;/TlsCertificateKeyFile&gt;","TlsCertificateKeyFile","200613.htm");
Page[54]=new Array("Specifies a path to the certificate file.","Path","ServerSettings &gt; TlsCertificateFile","Attributes","This element has no attributes.","Value","This can be either absolute or a relative path. A relative path is calculated relative to the kavhttpd binary file.","This element is mandatory if the ConnectionString element contains the https:// protocol.","Example","The following is an example of this element.","&lt;TlsCertificateFile&gt;opt/kaspersky/http_data/https_cert.crt&lt;/TlsCertificateFile&gt;","TlsCertificateFile","200614.htm");
Page[55]=new Array("Contains the cross-origin resource sharing mechanism settings.","This element is optional.","Path","ServerSettings &gt; CORS","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","AccessControlAllowOrigin","Specifies the list of origins (IP addresses or host names with a protocol) to which an access to the kavhttpd service must be provided. ","Possible values:","IP address or a host name of an origin, including the protocol (http:// or https://), that initiates requests to the kavhttpd service","*","This value allows any origin to access the kavhttpd service.","Empty value","Kaspersky Scan Engine in HTTP mode may receive an HTTP request with the Origin header field which contains the IP address or host name that initiates the request. If the HTTP mode configuration file contains one or more AccessControlAllowOrigin elements, the value of the Origin header field is mapped to the values defined in these elements. The following results are possible:  ","The value of the Origin header field matches at least one of the AccessControlAllowOrigin element values","In this case, the value of the Origin header field will be specified in the Access-Control-Allow-Origin field of the response header. ","No matches ","In this case, Access-Control-Allow-Origin will contain the https://scanengine.kaspersky.com value.","At least one of the AccessControlAllowOrigin element contains the * value","In this case, the Access-Control-Allow-Origin field of the response header will contain the * value regardless of the Origin header field value.","If the request does not contain the Origin header field, the kavhttpd service processes it in the standard way.","Example","The following is an example of this element.","&lt;CORS&gt;","&lt;AccessControlAllowOrigin&gt;http://example.com&lt;/AccessControlAllowOrigin&gt;","&lt;AccessControlAllowOrigin&gt;https://www.kaspersky.com&lt;/AccessControlAllowOrigin&gt;","&lt;/CORS&gt;","CORS","201900.htm");
Page[56]=new Array("By default, Kaspersky Scan Engine supports Keep-Alive (persistent connections), so an HTTP client can use the same connection to send multiple requests. With KeepAliveSettings, you can configure Keep-Alive support or even disable it.","Path","ServerSettings &gt; KeepAliveSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","Enabled.","TimeoutMs.","MaxRequests.","Example","The following is an example of this element.","&lt;KeepAliveSettings&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","KeepAliveSettings","207348.htm");
Page[57]=new Array("Specifies if Keep-Alive support is enabled or disabled.","This element is optional.","Path","ServerSettings &gt; KeepAliveSettings &gt; Enabled","Attributes","This element has no attributes.","Value","Valid values:","0 - Keep-Alive support is disabled.","1 - Keep-Alive support is enabled.","The default value is 1.","Example","The following is an example of this element.","&lt;Enabled&gt;1&lt;/Enabled&gt;","Enabled","207346.htm");
Page[58]=new Array("The amount of time an idle connection has to be kept open (in milliseconds), waiting for a new request from an HTTP client.","This element is optional.","Path","ServerSettings &gt; KeepAliveSettings &gt; TimeoutMs","Attributes","This element has no attributes.","Value","The valid value is an integer from 0 to 18000 (milliseconds).","If TimeoutMs is set to 0, there is no time limit for the connection.","The default value is 5000.","Example","The following is an example of this element.","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","TimeoutMs","207350.htm");
Page[59]=new Array("The maximum number of requests for one connection before the connection is closed.","This element is optional.","Path","ServerSettings &gt; KeepAliveSettings &gt; MaxRequests","Attributes","This element has no attributes.","Value","The valid value is an integer from 0 to 1000.","If MaxRequests is set to 0, the number of requests for one connection is not limited.","The default value is 1000.","Example","The following is an example of this element.","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","MaxRequests","207352.htm");
Page[60]=new Array("Settings for API token authentication.","This element is optional.","Path","ServerSettings &gt; AuthSettings","Nested elements","This element is a container for the following nested elements:","UseAccessToken","AuthRequestField","UseBearerAuthScheme","AccessTokens","Example","The following is an example of this element.","&lt;AuthSettings&gt;","&lt;UseAccessToken&gt;0&lt;/UseAccessToken&gt; &lt;!--Enable or disable API-token authentication --&gt;","&lt;AuthRequestField&gt;Authorization&lt;/AuthRequestField&gt;","&lt;UseBearerAuthScheme&gt;1&lt;/UseBearerAuthScheme&gt;","&lt;AccessTokens&gt;","&lt;Token&gt;","&lt;Name&gt;Unlimited key&lt;/Name&gt;","&lt;Value&gt;SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==&lt;/Value&gt;","&lt;Description&gt;ScanEngine Clients. Full access scope&lt;/Description&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;Token&gt;","&lt;Name&gt;Key for URL-scanning&lt;/Name&gt;","&lt;Value&gt;XUmCkYURUdWQldFGIT3TlEQUQQwkBy2LLNaNMVtrkSQUR2kSNUZV=NT2zLRzQJycVW5VNhUVOdLVcUd3YeVFnT=h&lt;/Value&gt;","&lt;Description&gt;Server access key. Only URL-scanning&lt;/Description&gt;","&lt;Enabled&gt;0&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;/AccessTokens&gt;","&lt;/AuthSettings&gt;","AuthSettings","222092.htm");
Page[61]=new Array("Specifies if API token authorization is enabled or disabled.","If you have enabled API token authorization and the kavhttpd service is not running, starting klScanEngineUI will also initiate the start of the kavhttpd service.","The UseAccessToken element cannot be empty. The element is optional.","Path","ServerSettings &gt; AuthSettings &gt; UseAccessToken","Value","Valid values:","0&#8212;API token authorization is disabled.","1&#8212;API token authorization is enabled.","The default value is 0.","Example","The following is an example of this element.","&lt;UseAccessToken&gt;0&lt;/UseAccessToken&gt;","UseAccessToken","222099.htm");
Page[62]=new Array("Specifies the name of the request header field that contains the API token.","If the element UseAccessToken is set to 1, the AuthRequestField element is mandatory.","Path","ServerSettings &gt; AuthSettings &gt; AuthRequestField","Value","The value must meet the following requirements:","3 to 40 characters long.","Consists of characters allowed for header field names according to RFC 7230.","The default value is Authorization.","Example","The following is an example of this element.","&lt;AuthRequestField&gt;Authorization&lt;/AuthRequestField&gt;","AuthRequestField","222116.htm");
Page[63]=new Array("Specifies if Kaspersky Scan Engine supports the Bearer authentication scheme. When support for the Bearer authentication scheme is enabled, Kaspersky Scan Engine expects that the request header field, named as specified in AuthRequestField, starts with the Bearer prefix.","If the element UseAccessToken is set to 1, the UseBearerAuthScheme element is mandatory.","Path","ServerSettings &gt; AuthSettings &gt; UseBearerAuthScheme","Value","Valid values:","0&#8212;Support for the Bearer authentication scheme is disabled.","1&#8212;Support for the Bearer authentication scheme is enabled.","The default value is 1.","Example","The following is an example of this element.","&lt;UseBearerAuthScheme&gt;1&lt;/UseBearerAuthScheme&gt;","UseBearerAuthScheme","222121.htm");
Page[64]=new Array("This element is a container for Token elements. If authentication of HTTP clients is enabled, Kaspersky Scan Engine provides access to its functions only to those HTTP clients that have successfully authenticated by using the API token.","If the element UseAccessToken is set to 1, the AccessTokens element is mandatory.","Path","ServerSettings &gt; AuthSettings &gt; AccessTokens","Example","The following is an example of this element.","&lt;AccessTokens&gt;","&lt;Token&gt;","&lt;Name&gt;Unlimited key&lt;/Name&gt;","&lt;Value&gt;SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==&lt;/Value&gt;","&lt;Description&gt;ScanEngine Clients. Full access scope&lt;/Description&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;Token&gt;","&lt;Name&gt;Key for URL-scanning&lt;/Name&gt;","&lt;Value&gt;XUmCkYURUdWQldFGIT3TlEQUQQwkBy2LLNaNMVtrkSQUR2kSNUZV=NT2zLRzQJycVW5VNhUVOdLVcUd3YeVFnT=h&lt;/Value&gt;","&lt;Description&gt;Server access key. Only URL-scanning&lt;/Description&gt;","&lt;Enabled&gt;0&lt;/Enabled&gt;","&lt;/Token&gt;","&lt;/AccessTokens&gt;","AccessTokens","224176.htm");
Page[65]=new Array("Specifies parameters of an API token, such as its name and value. In the AccessTokens element, there can be several Token elements.","If the element UseAccessToken is set to 1, there must be at least one Token element and it cannot be empty. ","Path","ServerSettings &gt; AuthSettings &gt; AccessTokens &gt; Token","Nested elements","This element is a container for the following nested elements:","Name;","Value;","Description;","Enabled.","See the description of these elements below.","Token &gt; Name","The unique name of the token. Each token in the AccessTokens element must have a unique name. ","The name must contain from 1 to 40 Unicode characters.","If the element UseAccessToken is set to 1, there must be at least one Name element and it cannot be empty. ","Token &gt; Value","An element containing the encrypted value of the API token, 88 ASCII characters long.","Do not specify this value directly in the configuration file; use the Kaspersky Scan Engine GUI or kl_access_util instead. When the token is added via Kaspersky Scan Engine GUI or kl_access_util, its value is being encrypted. Do not put the original token in the Value element.","If the element UseAccessToken is set to 1, there must be at least one Value element and it cannot be empty.","Token &gt; Description","The description contains additional information about the token. For example, the name of the client that uses the token, or the date and time the token was created.","The description can contain up to 1000 Unicode characters.","This element is optional.","Token &gt; Enabled","Indicates whether Kaspersky Scan Engine should authorize clients that specified the token in the request header.","Possible values:","0&#8212;The token is disabled. Kaspersky Scan Engine does not authorize clients that specified the token in the request header.","1&#8212;The token is enabled. Kaspersky Scan Engine can authorize clients that specified the token in the request header.","If the element UseAccessToken is set to 1, there must be at least one Enabled element and it cannot be empty.","Example","The following is an example of the Token element.","&lt;Token&gt;","&lt;Name&gt;Unlimited key&lt;/Name&gt;","&lt;Value&gt;SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==&lt;/Value&gt;","&lt;Description&gt;Kaspersky Scan Engine Clients. Full access scope&lt;/Description&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;/Token&gt;","Token","224177.htm");
Page[66]=new Array("Specifies KSN settings. ","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","UrlCheckTimeoutMs","ObjectCheckOnDemandTimeoutMs","CacheSizeKb","Example","The following is an example of a KSNSettings element.","&lt;KSNSettings&gt;","&lt;UrlCheckTimeoutMs&gt;20000&lt;/UrlCheckTimeoutMs&gt;","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","&lt;/KSNSettings&gt;","KSNSettings","201022.htm");
Page[67]=new Array("Specifies the maximum time that Kaspersky Scan Engine waits for a response from KSN when running reputation checks for URLs (in milliseconds). ","Path","KSNSettings &gt; UrlCheckTimeoutMs","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 20000.","Notice that this parameter only sets the timeout for reputation checks in KSN. This timeout does not include the time needed for sending a scan request and receiving a reputation status from KSN.<br>This timeout can be exceeded if KSN finds that the reputation status of the scanned file is Danger.","Example","The following is an example of this element.","&lt;UrlCheckTimeoutMs&gt;20000&lt;/UrlCheckTimeoutMs&gt;","UrlCheckTimeoutMs","200623.htm");
Page[68]=new Array("Specifies the timeout for response from KSN when running reputation checks for files (in milliseconds). ","Path","KSNSettings &gt; ObjectCheckOnDemandTimeoutMs","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 10000.","Notice that this parameter only sets the timeout for reputation checks in KSN. This timeout does not include the time needed for sending a scan request and receiving a reputation status from KSN.<br>This timeout can be exceeded if KSN finds that the reputation status of the scanned file is Danger.","Example","The following is an example of this element.","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","ObjectCheckOnDemandTimeoutMs","200624.htm");
Page[69]=new Array("Specifies the maximum size of the KSN status cache (in kilobytes). This cache is used by Kaspersky Scan Engine to store scan results obtained from KSN.","Path","KSNSettings &gt; CacheSizeKb","Attributes","This element has no attributes.","Value","This value must be an unsigned integer. If the value of this parameter is 0, the KSN status cache is not used. The maximum value is 262143.","The default value is 30720.","Example","The following is an example of this element.","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","CacheSizeKb","201036.htm");
Page[70]=new Array("Specifies scanning settings for the KAV SDK, which is a part of Kaspersky Scan Engine.","Path","KAVScanningSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","ScannersCount","ThreadsCount","QueueLen","Flags","Mode","MaxArchivesScanningDepth","Example","The following is an example of a KAVScanningSettings element.","&lt;KAVScanningSettings&gt;","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","&lt;Flags&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILBASES | KAV_O_M_MAILPLAIN | KAV_O_M_HEURISTIC_LEVEL_DETAIL&lt;/Flags&gt;","&lt;Mode&gt;KAV_SKIP&lt;/Mode&gt;","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","&lt;/KAVScanningSettings&gt;","KAVScanningSettings","201023.htm");
Page[71]=new Array("Specifies the number of scanning processes. You can have up to 256 scanning processes.","Path","KAVScanningSettings &gt; ScannersCount","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 4.","Example","The following is an example of this element.","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","ScannersCount","201037.htm");
Page[72]=new Array("Specifies the number of simultaneously running scanning threads. You can have up to 256 scanning threads.","Path","KAVScanningSettings &gt; ThreadsCount","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 8.","Example","The following is an example of this element.","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","ThreadsCount","201038.htm");
Page[73]=new Array("Specifies the maximum length of the queue for scan tasks.","Path","KAVScanningSettings &gt; QueueLen","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 1024.","Example","The following is an example of this element.","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","QueueLen","200631.htm");
Page[74]=new Array("Specifies a scanning mode.","Path","KAVScanningSettings &gt; Flags","Attributes","This element has no attributes.","Value","Scanning modes are defined by a combination of flags separated by vertical bars (|). This is a string value. ","Possible values: ","KAV_O_M_PACKED","Scan compressed executable files.","KAV_O_M_ARCHIVED","Scan archived files.","KAV_O_M_MAILBASES","Scan email database files.","KAV_O_M_MAILPLAIN","Scan email messages.","KAV_O_M_HEURISTIC_LEVEL_SHALLOW","Set the scanning level of the advanced heuristic code analyzer to shallow (the Low level in the graphical user interface).","KAV_O_M_HEURISTIC_LEVEL_MEDIUM","Set the scanning level of the advanced heuristic code analyzer to medium (the Medium level in the graphical user interface).","KAV_O_M_HEURISTIC_LEVEL_DETAIL","Set the scanning level of the advanced heuristic code analyzer to detailed (the High level in the graphical user interface).","KAV_O_M_MSOFFICE_MACRO","Notify the user if a Microsoft Office document file contains a macro.","This element can be empty. In this case, the value of 0 is used.","The default value is KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILBASES | KAV_O_M_MAILPLAIN | KAV_O_M_HEURISTIC_LEVEL_DETAIL.","Example","The following is an example of this element.","&lt;Flags&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILBASES | KAV_O_M_MAILPLAIN | KAV_O_M_HEURISTIC_LEVEL_DETAIL&lt;/Flags&gt;","Flags","201040.htm");
Page[75]=new Array("Specifies a cleaning mode","Path","KAVScanningSettings &gt; Mode","Attributes","This element has no attributes.","Value","This is a string value. This is a mandatory parameter.","Possible values:","KAV_SKIP","If malware is detected while scanning an object, Kaspersky Scan Engine will not try to disinfect or delete the object. The infected object will be skipped.","Specify this value if you want to use scanmemory mode.","KAV_DELETE","If malware is detected while scanning an object, Kaspersky Scan Engine will try to delete the object. If deletion is not possible, the infected object will be skipped.","KAV_CLEAN_DELETE","If malware is detected while scanning an object, Kaspersky Scan Engine will try to disinfect the object. If the disinfection attempt fails, or disinfection is not possible for specific malware, the object will be deleted. If deletion is not possible, the infected object will be skipped.","The above actions will be performed only if Kaspersky Anti-Virus Engine detects a threat while processing a scanfile request. In all other cases, Kaspersky Scan Engine will only send a notification if the specified actions can be applied to the detected object.","KAV_CLEAN_SKIP","If malware is detected while scanning an object, Kaspersky Scan Engine will try to disinfect the object. If the disinfection attempt fails, the infected object will be skipped.","The default value is KAV_SKIP.","Example","The following is an example of this element.","&lt;Mode&gt;KAV_SKIP&lt;/Mode&gt;","Mode","201041.htm");
Page[76]=new Array("Specifies the maximum depth of nested archives to be unpacked during scanning. This parameter is optional.","Path","KAVScanningSettings &gt; MaxArchivesScanningDepth","Attributes","This element has no attributes.","Value","The value must be an unsigned integer. ","The default value is 0.","The recommended value is 5.","Example","The following is an example of this element.","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","MaxArchivesScanningDepth","207145.htm");
Page[77]=new Array("Specifies directory settings for KAV SDK, which is a part of Kaspersky Scan Engine. ","Path","DirectorySettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","BasesPath ","TempPath","LicensePath","LicensingMode","ScanningPaths","Example","The following is an example of a DirectorySettings element.","&lt;DirectorySettings&gt;","&lt;BasesPath&gt;/home/bases&lt;/BasesPath&gt;","&lt;TempPath&gt;/home/temp&lt;/TempPath&gt;","&lt;LicensePath&gt;/home/license&lt;/LicensePath&gt;","&lt;LicensingMode&gt;1&lt;/LicensingMode&gt;","&lt;ScanningPaths&gt;","&lt;ScanningPath&gt;&lt;/ScanningPath&gt;","&lt;/ScanningPaths&gt;","&lt;/DirectorySettings&gt;","DirectorySettings","201024.htm");
Page[78]=new Array("Specifies a directory where the database is located. ","This element is mandatory.","Path","DirectorySettings &gt; BasesPath","Attributes","This element has no attributes.","Value","This is a string value. ","Notice that in Windows systems you have to specify a full path to the directory where the database is located.","Example","The following is an example of this element.","&lt;BasesPath&gt;/home/bases&lt;/BasesPath&gt;","BasesPath","201042.htm");
Page[79]=new Array("Specifies a directory where the files created at runtime are stored. ","This element is mandatory.","Path","DirectorySettings &gt; TempPath","Attributes","This element has no attributes.","Value","This is a string value. The path must be absolute.","Do not delete any files from this directory.","Example","The following is an example of this element.","&lt;TempPath&gt;/home/temp&lt;/TempPath&gt;","TempPath","200640.htm");
Page[80]=new Array("Specifies a directory where the application ID file, the licensing file, and the key file are stored.","This element is mandatory.","Path","DirectorySettings &gt; LicensePath","Attributes","This element has no attributes.","Value","This is a string value. Kaspersky Scan Engine looks for these files in the following directories:","The directory that is specified in LicensePath.","The directory that contains the kavhttpd executable file.","The %service_dir%/ppl directory. For Linux systems only.","Example","The following is an example of this element.","&lt;LicensePath&gt;/home/license&lt;/LicensePath&gt;","LicensePath","201044.htm");
Page[81]=new Array("Specifies the licensing mode used in Kaspersky Scan Engine.","Path","DirectorySettings &gt; LicensingMode","Attributes","This element has no attributes.","Value","Possible values:","1&#8212;Offline licensing mode","2&#8212;Online licensing mode","The default value is 1.","Example","The following is an example of this element.","&lt;LicensingMode&gt;1&lt;/LicensingMode&gt;","LicensingMode","201045.htm");
Page[82]=new Array("Contains paths to the locations where scanning is allowed when an HTTP client sends scan requests over a TCP socket from a remote computer. Scanning in other locations is prohibited. These paths are located in the file system of the computer with the Kaspersky Scan Engine server. Restricting the scan area prevents scanning the whole file system of the Kaspersky Scan Engine server by a command from the outside.","By default, Kaspersky Scan Engine scans objects in KAV_SKIP mode, which means that Kaspersky Scan Engine does not add or remove objects in the directories specified in ScanningPath. The HTTP client has to send objects to scan, then remove them after scanning.","If Kaspersky Scan Engine scans objects in KAV_DELETE, KAV_CLEAN_DELETE, or KAV_CLEAN_SKIP mode, sometimes the directory specified in ScanningPaths must have write access as root.","Path","DirectorySettings &gt; ScanningPaths","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","ScanningPath","Specifies a location where scanning over a TCP socket in scanfile mode is allowed.","It is not recommended to use links as paths due to security reasons. Use absolute paths instead.","Possible values:","Absolute paths to a directory","Allows scanning files that are located inside this directory and all its subdirectories.","The directory must be located on the same computer as Kaspersky Scan Engine or on a remote hard disk mounted on that computer.","The path must start from the root directory of the computer that Kaspersky Scan Engine is installed on.","The kavhttpd service must have permissions to read files in the directory and its subdirectories.","Absolute path to a file","Allows scanning of the specified file.","The file must be located on the same computer as Kaspersky Scan Engine or on a remote hard disk mounted on that computer.","The path must start from the root directory of the computer that Kaspersky Scan Engine is installed on.","The kavhttpd service must have permissions to read the file.","/ (forward slash)","Allows scanning of all files.","For Linux systems only.","Each path is specified inside its own &lt;ScanningPath&gt; element.","Example","The following is an example of this element.","&lt;ScanningPaths&gt;","&lt;ScanningPath&gt;&lt;/ScanningPath&gt;","&lt;/ScanningPaths&gt;","ScanningPaths","201076.htm");
Page[83]=new Array("Specifies whether Kaspersky Scan Engine uses proxy when connecting to the Internet.","Path","UseHTTPProxy","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseHTTPProxy element possible values","Value","Description","0","Proxy is not used.","This value is default.","1","Proxy is used.","Example","The following is an example of a UseHTTPProxy element.","&lt;UseHTTPProxy&gt;1&lt;/UseHTTPProxy&gt;","UseHTTPProxy","200598.htm");
Page[84]=new Array("Specifies proxy settings.","Path","HTTPProxy","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","url is the address of the proxy. This is a string value.","The value of this parameter can be an IPv4 address, an IPv6 address, or a domain name. Do not specify a protocol (http:// or https://) in this parameter.","If UseHTTPProxy is set to 1, this parameter is mandatory.","port is the port of the proxy. This value must be an unsigned integer and cannot be 0.","The default value is 3128.","user is the encrypted user name used to authenticate on a proxy server. The user name is encrypted by the kav_encrypt utility.  This is a string value.","If UseHTTPProxy is set to 1, this parameter is mandatory.","pass is the encrypted password used to authenticate on a proxy server. The password is encrypted by the kav_encrypt utility. This is a string value.","If UseHTTPProxy is set to 1, this parameter is mandatory.","Example","The following is an example of an HTTPProxy element.","&lt;HTTPProxy&gt;","&lt;url&gt;myproxy.mycompany.com&lt;/url&gt;","&lt;port&gt;3128&lt;/port&gt;","&lt;user&gt;doOTrypDTxpVJxUHYeKQTw==&lt;/user&gt;","&lt;pass&gt;8mSHXFix3uL+RP9oNeKDZQ==&lt;/pass&gt;","&lt;/HTTPProxy&gt;","HTTPProxy","201047.htm");
Page[85]=new Array("The following parameters specify update settings for Kaspersky Scan Engine.","Path","UpdateSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","DisableBackup","UpdatePeriodMinutes","UseOnlyCustomSources","UpdateSources","UpdatesCertFile","CertificateConfirmationAction","UseReducedBases","Example","The following is an example of an UpdateSettings element.","&lt;UpdateSettings&gt;","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","&lt;UpdatePeriodMinutes&gt;0&lt;/UpdatePeriodMinutes&gt;","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","&lt;UpdateSources&gt;","&lt;Source&gt;[update source]&lt;/Source&gt;","&lt;/UpdateSources&gt;","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","&lt;/UpdateSettings&gt;","UpdateSettings","201025.htm");
Page[86]=new Array("Defines whether the database backup is disabled. ","Path","UpdateSettings &gt; DisableBackup","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","DisableBackup element possible values","Value","Description","0","Anti-virus database backup is enabled.","This value is default.","1","Anti-virus database backup is disabled.","Example","The following is an example of this element.","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","DisableBackup","200649.htm");
Page[87]=new Array("Specifies automatic update interval (in minutes). ","Path","UpdateSettings &gt; UpdatePeriodMinutes","Attributes","This element has no attributes.","Value","This value must be an unsigned integer. The maximum value is 44640.","If this parameter is 0, Kaspersky Scan Engine does not perform automatic updates.","The preset value in the configuration file is 0.","Example","The following is an example of this element.","&lt;UpdatePeriodMinutes&gt;0&lt;/UpdatePeriodMinutes&gt;","UpdatePeriodMinutes","200650.htm");
Page[88]=new Array("Specifies whether the default update sources are used. ","Path","UpdateSettings &gt; UseOnlyCustomSources","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseOnlyCustomSources element possible values","Value","Description","0","Kaspersky update servers are used along with custom update sources.","This value is default.","1","Only the custom update sources are used.","Example","The following is an example of this element.","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","UseOnlyCustomSources","200651.htm");
Page[89]=new Array("Contains custom update sources.","Path","UpdateSettings &gt; UpdateSources","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","Source","Specifies a custom update source. This is a string value.","Each update source is specified inside its own &lt;Source&gt; element. See an example of specifying custom database update sources.","If Kaspersky Scan Engine must use TLS when connecting to a custom update source, you must specify the https:// protocol in the address of this custom update source.","Example","The following is an example of this element.","&lt;UpdateSources&gt;","&lt;Source&gt;[update source]&lt;/Source&gt;","&lt;/UpdateSources&gt;","UpdateSources","201051.htm");
Page[90]=new Array("Path to the PEM-formatted root certificate to be used for downloading updates from custom HTTPS update servers. ","The parameter is optional.","Path","UpdateSettings &gt; UpdatesCertFile","Attributes","This element has no attributes.","Value","You can specify either an absolute or relative path. A relative path is relative to the location of the kavhttpd executable file.","Example","The following is an example of this element.","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","UpdatesCertFile","200653.htm");
Page[91]=new Array("Specifies action to undertake if the update server uses an untrusted certificate.","The parameter is optional.","Path","UpdateSettings &gt; CertificateConfirmationAction","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","CertificateConfirmationAction element possible values","Value","Description","0","The update server must not be used.","This value is default.","1","The update server must be still used.","Example","The following is an example of this element.","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","CertificateConfirmationAction","200654.htm");
Page[92]=new Array("Specifies a parameter that  is one of the terms that defines whether a reduced databases kit is updated or not.","The parameter is optional.","Path","UpdateSettings &gt; UseReducedBases","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseReducedBases element possible values","Value","Description","0","The full databases kit is always updated.","This value is default.","1","The built-in functionality of KAV SDK updates the reduced kit, if all terms of updating to a reduced databases kit are observed. If at least one of the acceptance terms is not observed, the full databases kit is updated.","Example","The following is an example of this element.","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","UseReducedBases","200655.htm");
Page[93]=new Array("Specifies Format Recognizer settings. ","Path","FormatRecognizerSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","FormatsToSkipScanning","Specifies which file formats must not be scanned by Kaspersky Scan Engine in HTTP mode.","To disable the format skipping functionality, remove the FormatRecognizerSettings section from the configuration file or leave the FormatsToSkipScanning list empty.","Example","The following is an example of a FormatRecognizerSettings element.","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","&lt;KAV_FF_GENERAL_CSV/&gt;","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt;  ","FormatRecognizerSettings","201055.htm");
Page[94]=new Array("Format Recognizer is a component that can be used in Kaspersky Scan Engine to recognize and skip files of certain formats during the scanning process. Skipping files increases the processing speed of Kaspersky Scan Engine in HTTP mode.","Enabling Format Recognizer","To enable Format Recognizer:","In the HTTP mode configuration file, locate the FormatRecognizerSettings section.","If this section is missing, add it manually as follows:","&lt;FormatRecognizerSettings&gt;","...","&lt;/FormatRecognizerSettings&gt;  ","Within this section, in the FormatsToSkipScanning list, specify which file formats must not be scanned by Kaspersky Scan Engine, as follows:","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","...","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt;","For the changes to take effect, restart the kavhttpd service with the following command:","service kavhttpd restart","Format Recognizer will start recognizing and skipping files of the formats specified in the FormatsToSkipScanning list. Kaspersky Scan Engine will not scan the skipped files, which will increase its processing speed.","Disabling Format Recognizer","To disable Format Recognizer:","In the HTTP mode configuration file, remove the FormatRecognizerSettings section or leave the FormatsToSkipScanning list empty.","For the changes to take effect, restart the kavhttpd service with the following command:","service kavhttpd restart","Configuring Format Recognizer for use in HTTP mode","179868.htm");
Page[95]=new Array("The connection queue contains pending connections to Kaspersky Scan Engine. By configuring the connection queue, you can influence the performance of Kaspersky Scan Engine in HTTP mode. This section explains how to configure the connection queue.","Three parameters allow you to configure the connection queue: MaxHTTPSessionsNum, MaxIncomingConnectionsNum, and ThreadsCount. These parameters can be set in the HTTP mode configuration file.","MaxHTTPSessionsNum","This parameter specifies the maximum number of active TCP connections that Kaspersky Scan Engine can maintain simultaneously. When a TCP connection with a client closes, Kaspersky Scan Engine can accept another connection in its place.","MaxIncomingConnectionsNum","This parameter specifies the maximum number of pending TCP connections to Kaspersky Scan Engine. If the number of pending connections reaches MaxIncomingConnectionsNum, additional connections may be dropped.","ThreadsCount","This parameter specifies the maximum number of simultaneously running scan threads. When a scan thread completes a scanning task, it picks up another one from the scan queue.","Examples of the connection queue configuration","These examples show how you can use the connection queue to influence the behavior of Kaspersky Scan Engine.","Kaspersky Scan Engine without a connection queue","Consider the following example: the value of MaxIncomingConnectionsNum is 16, the value of ThreadsCount is 16, and the value of MaxHTTPSessionsNum is 50. In this example, Kaspersky Scan Engine can accept only 16 connections at a time, but because MaxHTTPSessionsNum is 50, their scan tasks are accepted immediately. Additional connections may be dropped. Sixteen scan threads is usually enough to process scan tasks from 16 clients quickly, so the scan queue will be short.","Kaspersky Scan Engine with a connection queue","Consider the following example: the value of MaxIncomingConnectionsNum is 100, the value of ThreadsCount is 16, and the value of MaxHTTPSessionsNum is 50. In this example, Kaspersky Scan Engine can accept 50 connections at a time. Kaspersky Scan Engine starts processing scan tasks from some of these clients in 16 scan threads, and the rest of the scan tasks form the scan queue. Other pending connections form the connection queue and wait to be accepted. Additional connections may be dropped.","Setting up the connection queue in HTTP mode","179869.htm");
Page[96]=new Array("There are parameters that affect the session timeout: the SessionTimeout and TimeoutMs parameters of the HTTP mode configuration file and the X-KAV-Timeout request header. This section explains how to configure the session timeout for Kaspersky Scan Engine in HTTP mode by using these values.","SessionTimeout","This parameter of the configuration file sets the maximum time that Kaspersky Scan Engine can spend on receiving a scan request for an object and on processing this request (scanning operation), in milliseconds. This timeout is valid for all objects sent to Kaspersky Scan Engine.","Consider the following example: the value of SessionTimeout is set to 4000 (four seconds), and the request does not contain the X-KAV-Timeout header. Kaspersky Scan Engine spends one second on receiving the request. Then Kaspersky Scan Engine spends the remaining three seconds on scanning.","X-KAV-Timeout","This header sets the time that Kaspersky Scan Engine can spend on a scanning operation (in milliseconds), regardless of the value of the SessionTimeout parameter.","The range of values for this parameter is from 0 to 4294967295 (an unsigned 32-bit integer).","Consider the following example: the value of SessionTimeout is set to 4000 (four seconds), and the value of X-KAV-Timeout is set to 10000 (10 seconds). Kaspersky Scan Engine spends one second on receiving the request. Then Kaspersky Scan Engine spends 10 seconds (which is the value of X-KAV-Timeout) on scanning.","If SessionTimeout is exceeded during the reception of the request, the session is closed, regardless of the value of X-KAV-Timeout.","Consider the following example: the value of SessionTimeout is set to 4000 (four seconds), and the value of X-KAV-Timeout is set to 10000 (10 seconds). Kaspersky Scan Engine spends four seconds on receiving the request, and the session is closed because SessionTimeout is exceeded.","You can choose the value of X-KAV-Timeout on the basis of the size of the files that you want to scan. For example, Kaspersky Scan Engine could require 10 seconds to scan a large file, or 0.1 seconds to scan a small one.","TimeoutMs","By default, Kaspersky Scan Engine supports Keep-Alive connections, so it can process multiple objects one after another, by using the same connection.","For each new object, Kaspersky Scan Engine starts the new SessionTimeout. After Kaspersky Scan Engine sends scan results, it keeps the connection open for as much time as TimeoutMs specifies, even if the SessionTimeout time has already expired. If a new object was received before TimeoutMs expired, the new SessionTimeout begins while the same connection remains open.","If Keep-Alive connections support is disabled, Kaspersky Scan Engine closes the connection after the SessionTimeout time is expired.","Setting the session timeout","179870.htm");
Page[97]=new Array("You can configure Kaspersky Scan Engine by changing one or more variables in its unit file, %distr_kit%/etc/kavhttpd.service.","Changing the path to the Kaspersky Scan Engine PID file","You can change this variable if you want to create a PID file of Kaspersky Scan Engine in a directory other than /var/run/kavhttpd.pid.","The following example shows how this variable is set in the unit file:","PIDFile=/var/run/kavhttpd.pid","Changing environment variables","You must change these environment variables if Kaspersky Scan Engine is located in a directory other than /opt/kaspersky/ScanEngine.","The unit file uses the following environment variables:","SDKPATH&#8212;Specifies the directory where Kaspersky Scan Engine is located. The following example shows how this variable is set in the unit file:","Environment=SDKPATH=/opt/kaspersky/ScanEngine","KL_PLUGINS_PATH&#8212;Specifies the path to the directory containing the PPL plug-in files used by Kaspersky Scan Engine. The following example shows how this variable is set in the unit file:","Environment=KL_PLUGINS_PATH=/ppl","LD_LIBRARY_PATH&#8212;Specifies the path to the directory containing shared libraries used by Kaspersky Scan Engine. The following block shows how this variable is set in the unit file:","Environment=LD_LIBRARY_PATH=/lib:/ppl","Changing paths in the command executed on kavhttpd startup","You must change paths in the command executed on kavhttpd startup if you put the kavhttpd executable file or the HTTP mode configuration file in directories different from the ones specified in the unit file, or if you want to create a PID file of Kaspersky Scan Engine in a directory other from /var/run/kavhttpd.pid.","The following example shows how this command is set in the unit file:","ExecStart=/bin/sh -c 'cd ${SDKPATH}/bin; ./kavhttpd -c /etc/kavhttpd.xml -p /var/run/kavhttpd.pid'","Monitoring enabling and disabling in the command executed on kavhttpd startup","You can enable or disable monitoring by adding or removing the -w option in the command executed on kavhttpd startup.","The following example shows how to enable monitoring in the unit file:","ExecStart=/bin/sh -c 'cd ${SDKPATH}/bin; ./kavhttpd -c /etc/kavhttpd.xml -p /var/run/kavhttpd.pid -w'","Changing variables in the HTTP mode unit file","179872.htm");
Page[98]=new Array("This section explains how to configure updating in Kaspersky Scan Engine.","Specifying the update settings","Kaspersky Scan Engine uses update settings stored in the HTTP mode configuration file. Set the necessary update settings in kavhttpd.xml before starting Kaspersky Scan Engine.","Specifying custom database update sources","Kaspersky Scan Engine updates the anti-virus database from database update sources. A database update source used by Kaspersky Scan Engine can be either default or custom. The default update sources are Kaspersky update servers.","You can use the default update sources, custom update sources, or both.","To specify custom update sources:","Specify custom update sources in the UpdateSources element of the kavhttpd.xml configuration file. Use a separate Source element for each source.","To use a local directory, specify an absolute path. To use a network location, specify a URL, including the protocol. The supported protocols are HTTP and FTP.","The following example shows two update sources:","&lt;UpdateSources&gt;","&lt;Source&gt;httpd://example.com/update/source1&lt;/Source&gt;","&lt;Source&gt;httpd://example.com/update/source2&lt;/Source&gt;","&lt;/UpdateSources&gt;","If you want to use only custom sources, set the UseOnlyCustomSources parameter of kavhttpd.xml to 1.","If UseOnlyCustomSources is 0, Kaspersky Scan Engine uses default sources together with custom sources. In this case, Kaspersky Scan Engine first looks for updates in custom update sources.","The settings that you specified will be used after the kavhttpd service is started or restarted.","Configuring database backup","Database backup is a mechanism that protects Kaspersky Scan Engine from possible faults caused by the database update process.","By default, database backup is enabled. Kaspersky Scan Engine creates database backup copies automatically during updates. Make sure that your hard disk has enough free space for a full copy of the database.","To disable database backup,","Set the DisableBackup parameter in kavhttpd.xml to 1.","The setting that you specified will be used after the kavhttpd service is started or restarted.","Establishing connections to update sources","To connect to update sources, Kaspersky Scan Engine uses the connection settings defined in kavhttpd.xml.","Scheduling automatic database updates","If you want to update the database at regular intervals, use automatic updates.","By default, automatic updates are disabled.","To set up automatic updates:","Set the UpdatePeriodMinutes parameter in kavhttpd.xml to the required update interval (in minutes).","Restart the kavhttpd service.","Kaspersky Scan Engine will perform updates automatically.","You can also update the database manually.","Configuring updating in HTTP mode","179873.htm");
Page[99]=new Array("This section explains how to run Kaspersky Scan Engine in HTTP mode.","Running Kaspersky Scan Engine in HTTP mode","192981.htm");
Page[100]=new Array("You can run the kavhttpd service by manually executing the kavhttpd binary file.","The following options are available when the kavhttpd service is run manually:","Options for running the kavhttpd binary file","Parameter","Description","-c &lt;path&gt;","Optional parameter.","Specifies the path to the HTTP mode configuration file.","The path can be absolute or relative. Relative path is specified relative to the current working directory.","The default path to the configuration file is ./kavhttpd.xml. ","-p &lt;path&gt;","Optional parameter.","Specifies the path to the PID file. ","The path can be absolute or relative. Relative path is specified relative to the current working directory.","-w","Optional parameter.","Runs the kavhttpd service in watchdog mode.","In this mode, the kavhttpd service automatically restarts if it freezes or crashes.","-n","Optional parameter.","Enables nodaemon mode for the kavhttpd service.","Specifying this parameter forces the kavhttpd service to run in foreground.","-v","Optional parameter.","Shows the Kaspersky Scan Engine version.","-h","Optional parameter.","Shows Help.","Running Kaspersky Scan Engine in HTTP mode manually","179876.htm");
Page[101]=new Array("For Linux systems only.","You can run the Kaspersky Scan Engine in HTTP mode by using the kavhttpd.service unit file for systemd. The unit file allows you to add the kavhttpd service to the service startup list and to manage the service manually from the command line.","This section assumes that you want to add the kavhttpd service for all users. For information on how to add and manage a service under a specific user, please see the official documentation for systemd and systemctl.","Starting Kaspersky Scan Engine automatically","To start Kaspersky Scan Engine automatically, add kavhttpd to the service startup list.","To add kavhttpd to the service startup list:","Place the kavhttpd.service unit file in the /etc/systemd/system/ directory.","If necessary, edit the unit file.","Reload systemd by running the following command:","systemctl daemon-reload","Make sure that the kavhttpd.service unit file is installed by running the following command:","systemctl list-unit-files","Enable kavhttpd to launch when the system starts by running the following command:","systemctl enable kavhttpd.service","Remove Kaspersky Scan Engine from the service startup list","To remove kavhttpd from the service startup list, run the following command:","systemctl disable kavhttpd.service","Managing Kaspersky Scan Engine with systemd from the terminal","To start kavhttpd without rebooting the computer, run the following command:","systemctl start kavhttpd","After this command is executed, the script prints the [OK] message and immediately returns control to the terminal, but it will take the kavhttpd service some time to start.","To stop kavhttpd without rebooting the computer, run the following command:","systemctl stop kavhttpd","To reload the anti-virus database, run the following command:","systemctl reload kavhttpd","Running Kaspersky Scan Engine in HTTP mode with systemd unit file (Linux)","184956.htm");
Page[102]=new Array("If you registered the kavehttpd as a Windows service, you can start it from the command line by using the following commands:","If you installed Kaspersky Scan Engine by using the installer or registered kavehttpd as a service manually:","net start \"Kaspersky ScanEngine\"","If you registered kavehttpd by using the kavehttpd binary file:","net start kavhttpd","Running Kaspersky Scan Engine in HTTP mode as service (Windows)","192984.htm");
Page[103]=new Array("Kaspersky Scan Engine distribution kit includes a BAT script that allows you to manage the kavhttpd service and the klScanEngineUI service.","This script will not work if you manually added the kavhttpd service to the list of Windows services.","The script is run from the command line.","Syntax:","kl_control.bat start | stop | restart | status | help","The table below describes the kl_control.bat options. If you specify more than one option, the script will execute the first one and exit.","The kl_control.bat options","Option","Description","start","Starts the kavhttpd service. If Kaspersky Scan Engine GUI is enabled, also starts the klScanEngineUI service.","stop","Stops the kavhttpd service. If Kaspersky Scan Engine GUI is enabled, also stops the klScanEngineUI service.","restart","Stops and restarts the kavhttpd service. If Kaspersky Scan Engine GUI is enabled, it also stops and restarts the klScanEngineUI service.","status","Checks whether the kavhttpd and klScanEngineUI services are running.","help","Shows Help.","The kl_control.bat script prints an error message if an error occurred when you tried to stop or start the kavhttpd service. If you receive an error message, you can check the state of the kavhttpd service or the klScanEngineUI service by using Windows Task Manager.","Running Kaspersky Scan Engine in HTTP mode with a BAT script (Windows)","186032.htm");
Page[104]=new Array("When monitoring is enabled, the kavhttpd service automatically restarts if it freezes or crashes.","If logging is enabled along with monitoring, the monitoring process writes log messages to a separate file.","To enable monitoring:","Set the option -w in the startup command on the systemd unit file for the kavhttpd service.","Restart Kaspersky Scan Engine by running the following command: ","service kavhttpd restart","See also the information about editing the unit file.","Monitoring Kaspersky Scan Engine in HTTP mode","179880.htm");
Page[105]=new Array("This section explains how to make requests to Kaspersky Scan Engine when working in HTTP mode.","Making requests in HTTP mode","192985.htm");
Page[106]=new Array("A client application uses the KAV protocol to interact with Kaspersky Scan Engine by means of HTTP requests. The current KAV protocol version is 3, but versions 1 and 2 are also supported.","Choose the protocol version that works best for your solution:","KAV protocol version 3","In version 3 of the protocol, the bodies of request messages and response messages are in JSON format. Version 3 supports more API methods than versions 1 and 2.","This is the recommended version of the protocol.","Note that on Windows systems, only KAV protocol version 3 is used.","KAV protocol versions 1 and 2","In versions 1 and 2 of the protocol, the bodies of request messages and response messages are in plain text format.","Use these versions of the protocol if plain text format is necessary for your solution.","About KAV protocol","181167.htm");
Page[107]=new Array("This section explains how to make HTTP requests to Kaspersky Scan Engine by using KAV protocol version 3.","Making requests in HTTP mode via KAV protocol version 3","179875.htm");
Page[108]=new Array("The following table lists the API methods that Kaspersky Scan Engine supports in HTTP mode when using KAV protocol version 3. The format of the requests does not depend on whether the client uses TCP or UNIX sockets for interaction with Kaspersky Scan Engine.","API methods supported in HTTP mode in KAV protocol version 3","API method","HTTP method","Format","Description","/api/v3.0/scanfile","/api/v3.1/scanfile","POST","Request format","Scans a file.","Use the /api/v3.1/scanfile API method to get more information about the scanning process.","/api/v3.0/scanmemory","/api/v3.1/scanmemory","POST","Request format","Scans a block of system memory.","Use the /api/v3.1/scanmemory API method to get more information about the scanning process.","Use only the KAV_SKIP cleaning mode when scanning system memory. Kaspersky Scan Engine cannot disinfect or delete files in this mode.","/api/v3.0/checkurl","POST","Request format","Checks a URL.","/api/v3.0/basesdate","GET","Request format","Gets the release date of the anti-virus database. You can use this method to check whether kavhttpd is running.","/api/v3.0/version","GET","Request format","Gets the current version of KAV SDK. You can use this method to check whether kavhttpd is running.","/api/v3.0/licenseinfo","GET","Request format","Gets information about the current key file or activation code. You can use this method to check whether kavhttpd is running.","/api/v3.0/getstatistics","GET","Request format","Gets the accumulated statistics.","/api/v3.0/clearstatistics","POST","Request format","Clears the accumulated statistics.","/api/v3.0/update/start","POST","Request format","Updates the anti-virus database.","/api/v3.0/update/status","/api/v3.1/update/status","GET","Request format","Gets the status of the database update process.","Use the /api/v3.1/update/status API method to get more information about the database update process.","/api/v3.1/ksninfo","GET","Request format","Gets the information about KSN.","Supported API methods in KAV protocol version 3","181169.htm");
Page[109]=new Array("Scan POST requests have the following format:","* Request headers *","* Request body *","{","\"timeout\": \"%TIMEOUT%\",","\"omitCleanSubobjectResults\": %TO_OMIT_CLEAN_SUBOBJECT_RESULTS%,","\"url\": \"%URL%\",","\"hostIp\": \"%HOST_IP%\",","\"requestHeaders\": \"%REQUEST_HEADERS%\",","\"responseHeaders\": \"%RESPONSE_HEADERS%\",","\"object\": \"%OBJECT%\",","\"name\": \"%SCAN_OBJECT_NAME%\"","}","where:","timeout is the object scan timeout in milliseconds (ms). This field is optional.","omitCleanSubobjectResults is a binary flag that specifies whether the subObjectsScanResults array returned in the response must contain objects with the CLEAN scan result. If the value is true, such objects are omitted; if the value is false, such objects are retained. The default value is true. This field is optional.","See also the detailed information about the structure of the subObjectsScanResults array.","url is the URL to use as the scan task context. This field is optional.","This field can be used for increasing the detection rate.","hostIp is the IP of the host that hosts the scanned URL. This field is optional.","This field can be used for increasing the detection rate. You need to enable KSN to use this field.","requestHeaders specifies the text of the HTTP request headers extracted from the HTTP transaction message. This field is optional.","This field can be used for increasing the detection rate.","responseHeaders specifies the text of the HTTP response headers extracted from the HTTP transaction message. This field is optional.","This field can be used for increasing the detection rate.","object is the full path to the file to scan (if a request is made to /api/v3.0/scanfile) or a Base64-encoded string (if a request is made to /api/v3.0/scanmemory). Only one object can be specified in this field. This field is mandatory.","name is the name of the object to scan in scanmemory mode (if a request is made to /api/v3.1/scanmemory). The value can be from 1 to 300 Unicode characters. This field is optional.","If the request body contains any special characters, they must be escaped in accordance with Standard ECMA-404 (The JSON Interchange Syntax).","Format of a scan POST request","193000.htm");
Page[110]=new Array("If a scan POST request is successfully processed, the response body contains a JSON object with the following fields:","{","\"object\": \"%SCAN_OBJECT%\",","\"scanResult\": \"%SCAN_RESULT%\",","\"detectionName\": \"%DETECTED_OBJECT%\",","\"name\": \"%SCAN_OBJECT_NAME%\",","\"containsOfficeMacro\": \"%IS_MACRO_CONTAINED%\",","\"subObjectsScanResults\": [","{","\"object\": \"%SCAN_FILE%\",","\"scanResult\": \"%SCAN_RESULT%\",","\"detectionName\": \"%DETECTED_OBJECT%\",","\"containsOfficeMacro\": \"%IS_MACRO_CONTAINED%\"","},","...","{","\"object\": \"%SCAN_FILE%\",","\"scanResult\": \"%SCAN_RESULT%\",","\"detectionName\": \"%DETECTED_OBJECT%\",","\"containsOfficeMacro\": \"%IS_MACRO_CONTAINED%\"","}","]","}"," where:","object contains the full path to the scanned file (if a request is made to /api/v3.0/scanfile) or to a \"memory\" string (if a request is made to /api/v3.0/scanmemory).","scanResult is the scan result and can have the following values:","CLEAN","DETECT","DISINFECTED","DELETED","NON_SCANNED","SERVER_ERROR","If a request is made to /api/v3.0/scanfile or to /api/v3.0/scanmemory, the reason that the object is not scanned may be added to the NON_SCANNED result. For example:","{","\"object\": \"\\/home\\/user\\/Documents\\/filestoscan\\/test.zip\",","\"scanResult\": \"NON_SCANNED (PASSWORD PROTECTED)\",","\"containsOfficeMacro\": \"false\"","}","Possible values:","NON_SCANNED (CANCELED)","Scan canceled.","NON_SCANNED (CORRUPTED)","The scanned object is corrupted. ","NON_SCANNED (ACCESS DENIED)","Access to the object is denied.","NON_SCANNED (SKIPPED)","Scan skipped.","NON_SCANNED (PASSWORD PROTECTED)","The object to scan is password protected.","NON_SCANNED","The reason that the object is not scanned is not identified.","detectionName is the name of the detected malicious object in the Kaspersky classification system.","name is the name of the object specified in the name field of the request body (if a request is made to /api/v3.1/scanmemory). If the scanned object has nested sub-objects, the name element is specified only in the parent object.","containsOfficeMacro is the binary flag that has a value of true if a macro was detected in the object and false otherwise.","subObjectsScanResults is an array of scan results for each sub-object nested in the object that was scanned. This field with all of its sub-fields is only included in the response body if the scanned object contains nested sub-objects.","subObjectsScanResults/object is the path to the nested sub-object. Note that the path to the sub-object is separated from the path to its parent object by a double slash (//), for example:","/home/user/archive.tar//folder/subobject","subObjectsScanResults/scanResult is the scan result for the nested sub-object.","subObjectsScanResults/detectionName is the name of the detected malicious object in the Kaspersky classification system.","subObjectsScanResults/containsOfficeMacro is the binary flag that has a value of true if a macro was detected in the nested sub-object and false otherwise.","If a POST scan request is processed with an error, the response body contains a JSON object with a single error field:","{","\"error\": \"%ERROR_MESSAGE%\"","}"," where error contains the description of the error that occurred during the request processing.","Additional fields in KAV protocol version 3.1","The reason field appears only if you use KAV protocol version 3.1. This field specifies the reason why the object is not scanned. This field appears if a request is made to /api/v3.1/scanfile or to /api/v3.1/scanmemory, and if the value of the scanResult field is NON_SCANNED.","Possible values:","Canceled","Scan canceled.","Corrupted","The scanned object is corrupted. ","Access denied","Access to the object is denied.","Skipped","Scan skipped.	","Password protected","The object to scan is password protected.","Max depth exceeded","The maximum depth of nested archives to be unpacked during scanning is exceeded.","Format of a response to a scan POST request","193001.htm");
Page[111]=new Array("When an HTTP request is made to scan a file or a block of memory, there are two ways to increase the detection rate by specifying an optional scan task context:","Provide the origin of the object to scan in the url field of the POST request body:","If the object to scan was received from the web, specify the web address of origin, including the protocol, for example:","http://example.com","The supported protocols are HTTP, HTTPS, and FTP.","If the URL is unknown, we recommend that you use http://example.com as the scan task context.","If the object to scan was received by email, specify the sender's email address in the following format: [from:%sender_address%], for example:","[from:example@example.com]","If the sender's email address is unknown, we recommend that you use [from:test@relay.example] as the scan task context.","Below is an example of an HTTP request to scan a local file received from the web. Note the use of the url field to specify the web address of origin:","POST /api/v3.0/scanfile HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 22","{","\"timeout\": \"10000\",","\"object\": \"\\/home\\/user\\/eicar\",","\"url\": \"http:\\/\\/example.com\"","}","The response is the same as in the example of an HTTP request to scan a local file.","Provide request and response headers gathered from HTTP traffic related to the object to scan in the requestHeaders and responseHeaders fields of the POST request body.","Note that you can combine the two types of scan task context to further boost the detection rate. In the example below, the request and response headers are specified along with the web address of origin.","POST /api/v3.0/scanfile HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 22","{","\"object\": \"\\/home\\/user\\/eicars.tar\",","\"requestHeaders\": \": authority: example.com\\r\\n: method: GET\\r\\n path:\\/ \\r\\n:scheme: https\\r\\naccept: text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,image\\/webp,image\\/apng,*\\/*;q=0.8\\r\\naccept-encoding: gzip, deflate, br\\r\\naccept-language: ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,mt;q=0.6\\r\\ncache-control: no-cache\\r\\npragma: no-cache\\r\\nupgrade-insecure-requests: 1\\r\\nuser-agent: Mozilla\\/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/71.0.3578.98 Safari\\/537.36\",","\"responseHeaders\": \"accept-ranges: bytes\\r\\ncache-control: max-age=604800\\r\\ncontent-type: text\\/html; charset=UTF-8\\r\\ndate: Thu, 31 Jan 2019 18:51:11 GMT\\r\\netag: \\\"1541025663\\\"\\r\\nexpires: Thu, 07 Feb 2019 18:51:11 GMT\\r\\nlast-modified: Fri, 09 Aug 2013 23:54:35 GMT\\r\\nserver: ECS (dca\\/532C)\\r\\nstatus: 200\\r\\nvary: Accept-Encoding\\r\\nx-cache: HIT\",","\"url\": \"http:\\/\\/example.com\"","}","The successfully processed request will result in the following response:","HTTP/1.0 200 Ok","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 15:46:29 GMT","Content-Length: 75","{","\"object\": \\/home\\/user\\/eicars.tar\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"multiple\",","\"subObjectsScanResults\": [","{","\"object\": \"\\/home\\/user\\/eicars.tar\\/\\/eicar1\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"EICAR-Test-File\"","},","{","\"object\": \"\\/home\\/user\\/eicars.tar\\/\\/eicar2\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"EICAR-Test-File\"","}","]","}","Increasing the detection rate","181065.htm");
Page[112]=new Array("Protocol version 3.0","If HTTP clients authorization is enabled in Kaspersky Scan Engine, all HTTP requests must contain an API token.","The following example shows an HTTP request containing an API token in the Authorization field:","POST /api/v3.0/scanfile HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 22","Authorization: SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==","{","\"timeout\": \"10000\",","\"object\": \"\\/home\\/user\\/eicar\"","}","In this example, Authorization is the default name of the request header field used for authorization. You can change this name in the Authorization section of the Kaspersky Scan Engine GUI.","The following block shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 15:46:29 GMT","Content-Length: 75","{","\"object\": \"\\/home\\/user\\/eicar\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"EICAR-Test-File\"","}","If the authorization failed and the Bearer prefix was specified, the response is as follows:","HTTP/1.1 401 Unauthorized","WWW-Authenticate: Bearer realm=\"API Kaspersky Scan Engine\"","If the authorization failed and the Bearer prefix was not specified, the response is as follows:","HTTP/1.1 401 Unauthorized","WWW-Authenticate: Token realm=\"API Kaspersky Scan Engine\"","Example of an HTTP request containing an API token for authorization","224308.htm");
Page[113]=new Array("Protocol version 3.0","The following example shows an HTTP request to scan a local file:","POST /api/v3.0/scanfile HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 22","{","\"timeout\": \"10000\",","\"object\": \"\\/home\\/user\\/eicar\"","}","In the object field, only one object can be specified.","See also the description of all possible fields in the request body and recommendations on how to increase the detection rate.","The following block shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 15:46:29 GMT","Content-Length: 75","{","\"object\": \"\\/home\\/user\\/eicar\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"EICAR-Test-File\"","}","See also the description of all possible fields in the response body.","Protocol version 3.1","The format of the request is the same, but the response has additional fields.","Example of an HTTP request to scan a local file","193002.htm");
Page[114]=new Array("Protocol version 3.0","The following example shows an HTTP request to scan a block of memory:","POST /api/v3.0/scanmemory HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 105","{","\"timeout\": \"10000\",","\"object\": \"WDVPIVAlQEFQWzRcUFpYNTQoUF4pN0NDKTd9JEVJQ0FSLVNUQU5EQVJELUFOVElWSVJVUy1URVNULUZJTEUhJEgrSCo=\"","}","In the object field, only one object can be specified.","See also the description of all possible fields in the request body and recommendations on how to increase the detection rate.","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 16:08:12 GMT","Content-Length: 72","{","\"object\": \"memory\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"EICAR-Test-File\"","}","See also the description of all possible fields in the response body.","Protocol version 3.1","The format of the request is the same, but the response has additional fields.","Example of an HTTP request to scan a block of memory","193003.htm");
Page[115]=new Array("The following example shows an HTTP request to check a URL:","POST /api/v3.0/checkurl HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 50","{","\"timeout\": \"10000\",","\"url\": \"http:\\/\\/bug.qainfo.ru\\/TesT\\/Aphish_w\",","\"hostIp\": \"233.252.0.1\"","}","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 16:15:44 GMT","Content-Length: 104","{","\"url\": \"http:\\/\\/bug.qainfo.ru\\/TesT\\/Aphish_w\",","\"scanResult\": \"DETECT\",","\"detectionName\": \"PHISHING_URL\"","}"," where:","url is the URL that was checked.","scanResult is the scan result and can have the following values:","CLEAN","DETECT","DISINFECTED","DELETED","NON_SCANNED","SERVER_ERROR","detectionName is the name of the detected malicious object in the Kaspersky classification system. It can have one of the following values:","PHISHING_URL","MALICIOUS_URL","ADWARE_URL","RISKWARE_URL","Example of an HTTP request to check a URL","193004.htm");
Page[116]=new Array("This release date request is usually made after a database update to make sure that the anti-virus database has been updated to the latest version.","The following example shows an HTTP request to get the release date of the anti-virus database:","GET /api/v3.0/basesdate HTTP/1.0","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 19:03:18 GMT","Content-Length: 50","{","\"databaseVersion\": \"30.01.2019 18:38 GMT\"","}"," where databaseVersion contains the current version of the anti-virus database in the following format: DD.MM.YYYY hh:mm GMT.","Example of an HTTP request to get the release date of the anti-virus database","193005.htm");
Page[117]=new Array("The following example shows an HTTP request to get the current KAV SDK version:","GET /api/v3.0/version HTTP/1.0","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 19:05:51 GMT","Content-Length: 36","{","\"KAVSDKVersion\": \"8.8.2.58\"","}"," where KAVSDKVersion contains the current KAV SDK version in the following format: MajorVersion.MinorVersion.BuildNumber.Revision.","Example of an HTTP request to get the current KAV SDK version","193007.htm");
Page[118]=new Array("The following example shows an HTTP request to get licensing information:","GET /api/v3.0/licenseinfo HTTP/1.0","The following example shows the corresponding response that contains licensing information when offline licensing mode is used:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 19:04:30 GMT","Content-Length: 81","{","\"licenseName\": \"EXAMPLE.key\",","\"licenseExpirationDate\": \"05.12.2020\"","}","where:","licenseName is the name of the current key file.","licenseExpirationDate is the expiration date of the key file in the following format: DD.MM.YYYY.","The following block shows the corresponding response, which contains licensing information when online licensing mode is used. In this example, the license ticket has expired:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD/1.0","Content-Length: 185","Connection: close","Content-Type: text/plain","{","\"activationCode\": \"EXMPL-*****-*****-12345\",","\"licenseExpirationDate\": \"05.12.2020\",","\"ticketExpired\": \"The license ticket has expired. Computer must be connected to the Internet to update the license ticket.\"","}","where:","activationCode is the activation code.","licenseExpirationDate is the expiration date of the activation code in the following format: DD.MM.YYYY.","ticketExpired contains a message that is included in the response body only if the license ticket has expired.","Example of an HTTP request to get licensing information","193008.htm");
Page[119]=new Array("The following example shows an HTTP request to get accumulated statistics:","GET /api/v3.0/getstatistics HTTP/1.0","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 19:07:54 GMT","Content-Length: 314","{","\"statistics\": {","\"total_requests\": 3,","\"infected_requests\": 3,","\"protected_requests\": 3,","\"error_requests\": 0,","\"engine_errors\": 0,","\"processed_data\": 204,","\"infected_data\": 204,","\"processed_urls\": 1,","\"infected_urls\": 1","}","}"," where statistics is an object containing the following accumulated statistics:","total_requests is the total number of requests to scan a file or a block of memory or to check a URL.","infected_requests is the number of requests for which Kaspersky Scan Engine returned a DETECT, DISINFECTED, or DELETED scan result.","protected_requests is the number of requests for which Kaspersky Scan Engine returned a DISINFECTED or DELETED scan result.","error_requests is the number of requests for which Kaspersky Scan Engine returned a NON_SCANNED scan result (due to errors related to the scanned object).","engine_errors is the number of requests for which Kaspersky Scan Engine returned a SERVER_ERROR scan result (due to errors not related to the scanned object).","processed_data is the total amount of scanned data in bytes.","infected_data is the amount of scanned data, in bytes, passed in requests for which Kaspersky Scan Engine returned a DETECT, DISINFECTED, or DELETED scan result.","processed_urls is the total number of checked URLs.","infected_urls is the number of URLs recognized by Kaspersky Scan Engine as malicious, phishing, adware, or legitimate programs that can be used by intruders to damage computers and data.","Example of an HTTP request to get accumulated statistics","193009.htm");
Page[120]=new Array("The following example shows an HTTP request to clear accumulated statistics:","POST /api/v3.0/clearstatistics HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 2","{}","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 19:09:27 GMT","Content-Length: 27","{","\"error\": \"CLEARED\"","}","Example of an HTTP request to clear accumulated statistics","193010.htm");
Page[121]=new Array("This request can be made only if the client and Kaspersky Scan Engine are installed and running on the same computer. If you send this request from a different computer, Kaspersky Scan Engine will throw a 405 Method Not Allowed error.","The following example shows an HTTP request to update the anti-virus database:","POST /api/v3.0/update/start HTTP/1.0","Content-Type: application/octet-stream","Content-Length: 2","{}","The following example shows the corresponding response that is returned if the database update has been successfully initiated:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 18:05:44 GMT","Content-Length: 26","{","\"status\": \"update started\"","}","The following example shows the corresponding response that is returned if an update is already in progress:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 18:05:44 GMT","Content-Length: 35","{","\"status\": \"update already launched\"","}","The following example shows the corresponding response that is returned if an error occurred when launching the update:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 18:05:44 GMT","Content-Length: 40","{","\"status\": \"error while launching update\"","}","Example of an HTTP request to update the anti-virus database","193011.htm");
Page[122]=new Array("This request can be made only if the client and Kaspersky Scan Engine are installed and running on the same computer. If you send this request from a different computer, Kaspersky Scan Engine will throw a 405 Method Not Allowed error.","Protocol version 3.0","The following example shows an HTTP request to get the database update status:","GET /api/v3.0/update/status HTTP/1.0","The following example shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 30 Jan 2019 18:05:44 GMT","Content-Length: 116","{","\"status\": \"not started\",","\"last_update_result\": \"success\",","\"last_update_time\": \"21:03:53 30.01.2019\"","}","See also the description of all the fields that can be included in the response body.","Protocol version 3.1","The format of the request is the same, but the response has additional fields.","Example of an HTTP request to get the database update status","193012.htm");
Page[123]=new Array("The following block shows an HTTP request:","GET /api/v3.1/ksninfo","The following block shows the corresponding response:","HTTP/1.0 200 OK","Connection: close","Content-Type: text/plain","Server: KAVHTTPD/1.0","X-KAV-ProtocolVersion: 3","Date: Wed, 02 Dec 2019 18:06:50 GMT","Content-Length: 190","{","\"ksnStatus\": \"Connected\",","\"whiteApplications\": %whiteApplications%,","\"malwareApplications\": %malwareApplications%,","\"blockedThreats\": %blockedThreats%,","\"region\": \"%ksnRegion%\",","\"responseTimestamp\": \"%responseTimestamp%\"","}","If KSN is turned off, the response body contains a JSON object with a single ksnStatus field:","{","\"ksnStatus\": \"KSN turned off\"","}","Example of an HTTP request to get the KSN information","193338.htm");
Page[124]=new Array("This section explains how to make HTTP requests to Kaspersky Scan Engine by using KAV protocol versions 1 and 2.","Making requests in HTTP mode via KAV protocol versions 1 and 2","181038.htm");
Page[125]=new Array("In addition to using KAV protocol version 3, you can make POST and GET requests to Kaspersky Scan Engine by means of KAV protocol versions 1 and 2.","The following table lists the API methods that Kaspersky Scan Engine supports in HTTP mode in KAV protocol versions 1 and 2.","API methods supported in HTTP mode in KAV protocol versions 1 and 2","API method","HTTP method","Description","/scanfile","POST","Scans a file.","/scanmemory","POST","Scans a block of system memory.","Use only the KAV_SKIP cleaning mode when scanning system memory. Kaspersky Scan Engine cannot disinfect or delete files in this mode.","/checkurl","POST","Checks a URL. ","/basesdate","GET","Gets the release date of the anti-virus database. You can use this method to check whether kavhttpd is running.","/version","GET","Gets the current version of KAV SDK. You can use this method to check whether kavhttpd is running.","/licenseinfo","GET","Gets information about the current key file or activation code. You can use this method to check whether kavhttpd is running.","/getstatistics","GET","Gets the accumulated statistics.","/clearstatistics","POST","Clears the accumulated statistics.","Supported API methods in KAV protocol versions 1 and 2","181170.htm");
Page[126]=new Array("An HTTP request, using the POST method, to Kaspersky Scan Engine must include the Content-Length header.","When making an HTTP request, there are three request headers specific to Kaspersky Scan Engine that you can set:","X-KAV-ProtocolVersion","This header specifies the KAV protocol version used. This header is mandatory.","X-KAV-Timeout","This header specifies a scanning operation timeout in milliseconds (but not a session timeout). This header is optional. ","This header takes values ranging from 0 to 4294967295 (unsigned 32-bit integer value). Set the value based on the characteristics of the object to scan (for example, its size or whether it is multipart or not; Kaspersky Scan Engine takes longer to scan a large multipart object).","See also the detailed information about a scanning timeout and a session timeout.","X-KAV-ObjectURL","This header contains the scan task context that Kaspersky Scan Engine uses to increase the detection rate. This header is optional.","The use of this header does not affect scanning performance.","We recommend that you use the scan task context in gateway integrations.","Use the following format for the context:","If the object to scan is received from the web, specify the web address of origin, including the protocol, for example:","http://example.com","The supported protocols are HTTP, HTTPS, and FTP.","If the URL is unknown, we recommend to use http://example.com as the scan task context.","If the object to scan was received by email, specify the sender's email address in the following format: [from:%sender_address%], for example:","[from:example@example.com]","If the sender's email address is unknown, we recommend that you use [from:test@relay.example] as the scan task context.","Scan task context is only applicable to file and memory scanning. If you specify scan task context for a URL, it will be ignored.","X-KAV-HostIP","This header specifies the IP address of the host that hosts the URL to scan. Adding it to a request increases detection rate.","Request headers","181073.htm");
Page[127]=new Array("If HTTP clients authorization is enabled in Kaspersky Scan Engine, all HTTP requests must contain an API token.","The following example shows an HTTP request containing an API token in the Authorization field:","POST /scanfile HTTP/1.0","Content-Length: 35","X-KAV-ProtocolVersion: 1","X-KAV-Timeout: 10","Authorization: SldYQTUyOUNVMnE3VWR2N3Izamk2QkVNc2hhLTV5dTBLcVUzeXZLdGYtNkkrVFUyQUVRQUNLQUFCSWdwRUlJTQ==","* Full path to the EICAR test file * ","In this example, Authorization is the default name of the request header field used for authorization. You can change this name in the Authorization section of the Kaspersky Scan Engine GUI.","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 32","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","DETECT EICAR-Test-File","If the authorization failed and the Bearer prefix was specified, the response is as follows:","HTTP/1.1 401 Unauthorized","WWW-Authenticate: Bearer realm=\"API Kaspersky Scan Engine\"","If the authorization failed and the Bearer prefix was not specified, the response is as follows:","HTTP/1.1 401 Unauthorized","WWW-Authenticate: Token realm=\"API Kaspersky Scan Engine\"","Example of an HTTP request containing an API token for authorization","224307.htm");
Page[128]=new Array("The following example shows an HTTP request to scan a local file:","POST /scanfile HTTP/1.0","Content-Length: 35","X-KAV-ProtocolVersion: 1","X-KAV-Timeout: 10","* Full path to the EICAR test file * ","If the file to scan is large, consider specifying the X-KAV-Timeout header.","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 32","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","DETECT EICAR-Test-File","Example of an HTTP request to scan a local file","181074.htm");
Page[129]=new Array("The following example shows an HTTP request to scan a block of memory:","POST /scanmemory HTTP/1.0","Content-Length: 35","X-KAV-ProtocolVersion: 1","X-KAV-Timeout: 10","* Contents of the EICAR test file * ","If the file to scan is large, consider specifying the X-KAV-Timeout header.","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 64","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","DETECT EICAR-Test-File","You can also make a multipart scan request.","Example of an HTTP request to scan a block of memory","181076.htm");
Page[130]=new Array("In Kaspersky Scan Engine, a multipart HTTP request is an HTTP request that contains request or response headers that were gathered from HTTP traffic related to the object being scanned. You can send multipart HTTP requests to improve the detection rate. ","Kaspersky Scan Engine does not support multipart HTTP requests, as defined in RFC 1341.","To make multipart HTTP requests, use the KAV protocol version 2 by specifying it in the X-KAV-ProtocolVersion request header.","The body of a multipart HTTP request must contain no more than three parts. These parts contain the following data:","Request headers (optional)","This part must begin with the \"Request headers\" string followed by \\r\\n characters. These characters must be followed by request headers from HTTP traffic related to the object that is being scanned.","Response headers (optional)","This part must begin with the \"Response headers\" string followed by \\r\\n characters. These characters must be followed by response headers from HTTP traffic related to the object that is being scanned.","Object for scanning.","This part can contain the full path to the file to scan (if a request is made to /scanfile) or a string (if a request is made to /scanmemory).","The following example shows a multipart HTTP request to scan a block of memory:","POST /scanmemory HTTP/1.0","Content-Length: 753","X-KAV-ProtocolVersion: 2","X-KAV-Timeout: 10","X-KAV-ObjectURL: http://example.com","Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08jU534c0p","--gc0p4Jq0M2Yt08jU534c0p","Request headers","GET /files/test.exe HTTP/1.1","Host: source.example.com","Accept: application/octet-stream","Referer: http://malicious.example.com/","Host: source.example.com","Connection: Keep-Alive","--gc0p4Jq0M2Yt08jU534c0p","Response headers","HTTP/1.1 200 OK","Content-Type: application/octet-stream","Content-Length: 21541","Date: Mon, 25 Sep 2017 11:01:54 GMT","Last-Modified: Fri, 28 Sep 2017 03:15:02 GMT","--gc0p4Jq0M2Yt08jU534c0p","* Contents of the EICAR test file *","--gc0p4Jq0M2Yt08jU534c0p--","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Fri, 28 Sep 2017 03:15:02 GMT","Server: KAVHTTPD","Content-Length: 64","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 2","DETECT EICAR-Test-File","Example of a multipart HTTP request to scan a block of memory","181078.htm");
Page[131]=new Array("The following example shows an HTTP request to check a URL:","POST /checkurl HTTP/1.0","Content-Length: 27","X-KAV-ProtocolVersion: 1","X-KAV-Timeout: 15","* Phishing URL to check * ","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:22 GMT","Server: KAVHTTPD","Content-Length: 110","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","DETECT PHISHING_URL","Example of an HTTP request to check a URL","181080.htm");
Page[132]=new Array("The following example shows an HTTP request to get the release data of the anti-virus database:","GET /basesdate HTTP/1.0","Host: example.com","X-KAV-ProtocolVersion: 1","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 15:03:21 GMT","Server: KAVHTTPD","Content-Length: 40","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","database version: 9.02.2014 15:03 GMT","Example of an HTTP request to get the release date of the anti-virus database","181082.htm");
Page[133]=new Array("The following example shows an HTTP request to get the current KAV SDK version:","GET /version HTTP/1.0","Host: example.com","X-KAV-ProtocolVersion: 1 ","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 27","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","KAV SDK version: 8.8.0.80","Example of an HTTP request to get the current KAV SDK version","181084.htm");
Page[134]=new Array("The following example shows an HTTP request to get licensing information:","GET /licenseinfo HTTP/1.0","Host: example.com","X-KAV-ProtocolVersion: 1 ","The following example shows the corresponding response that contains licensing information when offline licensing mode is used:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 65","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","key file name: EXAMPLE.key","license expiration date: 05.12.2020","The following example shows the corresponding response that contains licensing information when the online licensing mode is used. In this example, the license ticket has expired:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 185","Connection: close","Content-Type: text/plain","X-KAV-ProtocolVersion: 1","activation code: EXMPL-*****-*****-12345","license expiration date: 05.12.2020","The license ticket has expired. Computer must be connected to the Internet to update the license ticket.","Example of an HTTP request to get licensing information","181086.htm");
Page[135]=new Array("The following example shows an HTTP request to get accumulated statistics:","GET /getstatistics HTTP/1.0","Host: example.com","X-KAV-ProtocolVersion: 1","For a description of the statistics returned in the HTTP response, see the example of making this request in KAV protocol version 3.","Example of an HTTP request to get accumulated statistics","181088.htm");
Page[136]=new Array("The following example shows an HTTP request to clear accumulated statistics:","POST /clearstatistics HTTP/1.0","User-Agent: KAV HTTP Client","Content-Length: 0","X-KAV-ProtocolVersion: 1","The following example shows the corresponding response:","HTTP/1.0 200 OK","Date: Mon, 10 February 2014 12:25:21 GMT","Server: KAVHTTPD","Content-Length: 0","Connection: close","X-KAV-ProtocolVersion: 1","Example of an HTTP request to clear accumulated statistics","181090.htm");
Page[137]=new Array("When Kaspersky Scan Engine is working in HTTP mode, you can make the OPTIONS request to all supported API methods. This request allows you to get information about the HTTP methods that are supported in the kavhttpd service.","To make a request, specify an API method for the OPTIONS method.","The following block shows an example of the OPTIONS request:","OPTIONS /api/v3.1/version HTTP/1.1","The following example shows the corresponding response:","HTTP/1.1 200 OK","Date: Wed, 15 Jul 2020 10:15:44 GMT","Content-Length: 0","Allow: OPTIONS, GET","where Allow contains the list of HTTP methods that are supported in this API method.","If the HTTP request contains the Origin field (a field that contains the IP address or host name that initiates the request) and if the AccessControlAllowOrigin element is defined in the HTTP mode configuration file, the response will contain the Access-Control-Allow-Origin and Access-Control-Allow-Methods fields instead of the Allow field. In this case, the Access-Control-Allow-Origin field can contain the values that are described in the ServerSettings &gt; CORS section and the Access-Control-Allow-Methods field value is similar to the Allow field value.","Getting the list of HTTP methods supported in the service","201538.htm");
Page[138]=new Array("This section explains how to use the sample HTTP client from the command line. The sample HTTP client is located in %service_dir%/bin.","This section explains how to use the executable file of the sample HTTP client. Explaining the implementation of the sample HTTP client is beyond the scope of this documentation. The source code of the sample HTTP client is located in the /samples/kavhttp directory of the Kaspersky Scan Engine distribution package.","About the sample HTTP client","The sample HTTP client is a console application that demonstrates how to implement a client for Kaspersky Scan Engine in HTTP mode. You can also use it to scan files from the console.","The sample HTTP client makes HTTP requests to Kaspersky Scan Engine. It supports TCP connections (Windows and Linux) and UNIX socket connections (Linux only), and can pass file paths or file contents to Kaspersky Scan Engine.","When Kaspersky Scan Engine finishes scanning files, it sends a response to the sample HTTP client. The sample HTTP client prints the scan result to the standard output.","Using the sample HTTP client","179883.htm");
Page[139]=new Array("You can supply one or more options to the sample HTTP client.","Options","The following options are available in the sample HTTP client:","Options for running the sample HTTP client","Option","Description","-s","Specifies the address of Kaspersky Scan Engine or a path to the Unix socket. The connection string can be specified with or without quotation marks. If this option is not specified, the default /tmp/.kavhttpd Unix socket is used.","The UNIX sockets are supported only on Linux systems.","-t","Specifies the request processing timeout, in milliseconds.","-u","Specifies the URL to scan.","Only one URL can be specified at a time.","-i","Specifies the IP address (IPv4 or IPv6) of the host referred to by a URL. This option can only be used with -u.","Specifying an IP address increases the detection rate of Kaspersky Scan Engine.","-f","Enables the scanfile mode.","-c","Specifies the scan task context. If this option is specified, the request must have the X-KAV-ObjectURL header that contains the option value, without quotation marks.","--req","Specifies a path to a file with request headers that were gathered from the HTTP traffic for the scanned object.","--resp","Specifies a path to a file with response headers that were gathered from the HTTP traffic for the scanned object.","-b","Shows the release date of the anti-virus database. You can use this option to check whether kavhttpd is running. Can be used with options -s, -t, and -j.","-v","Shows the version of KAV SDK. You can use this option to check whether kavhttpd is running. Can be used with options -s, -t, and -j.","-l","Shows information about the current key file. You can use this option to check whether kavhttpd is running. Can be used with options -s, -t, and -j.","-h","Shows Help information.","-j","Makes an HTTP request in JSON format.","-d","Makes an HTTP request to launch the anti-virus database update. Can be used with options -s, -t, and -j.","-p","Shows the status of the database update process. Can be used with options -s, -t, and -j.","&#8209;&#8209;getstat","Gets the accumulated statistics. Can be used with options -s, -t, and -j.","&#8209;&#8209;clearstat","Clears the accumulated statistics. Can be used with options -s, -t, and -j.","-o","When making an HTTP request in JSON format, omits objects with the CLEAN scan result from the subObjectsScanResults array in the response message. Can only be used with option -j.","--cipher","Specifies a cipher suite which must be used for exchange with the kavhttpd service. ","The following cipher suites are supported in TLS 1.2:","ECDHE-ECDSA-AES256-GCM-SHA384","ECDHE-ECDSA-AES256-SHA384","ECDHE-ECDSA-AES128-GCM-SHA256","ECDHE-ECDSA-AES128-SHA256","ECDHE-RSA-AES256-GCM-SHA384","ECDHE-RSA-AES256-SHA384","ECDHE-RSA-AES128-GCM-SHA256","ECDHE-RSA-AES128-SHA256","ECDHE-RSA-CHACHA20-POLY1305","DHE-RSA-AES256-GCM-SHA384","DHE-RSA-AES256-SHA256","DHE-RSA-AES128-SHA256","DHE-RSA-CHACHA20-POLY1305","The following cipher suites are supported in TLS 1.3:","TLS_AES_256_GCM_SHA384","TLS_CHACHA20_POLY1305_SHA256","TLS_AES_128_GCM_SHA256","By default, the following value is used: ECDHE-ECDSA-AES256-GCM-SHA384.","&#8209;-check&#8209;period","Checks if the validity period of a certificate conforms to the current date, based on time zone.","By default, checking is not performed.","&#8209;-check&#8209;subject","Checks if the subject name of a certificate (SubjectAltNames and Common Name fields) matches the domain name of the server.","--check&#8209;chain","Checks a certificate by a certification path.","--ca-path","Specifies a full path to the directory where CA certificates are stored. A certificate from the specified directory is used to check the validity of a TLS certificate and its configuration.","In Linux, if this parameter is not specified, the HTTP client uses the following paths:","/etc/pki/tls/certs","/etc/ssl/certs","To use the --ca-path option, prepare the directory containing the certificates as described in Syntax examples.","--ca-cert","Specifies a full path to the directory where a CA bundle is stored. The bundle file is used to check the validity of a TLS certificate and its configuration.","In Linux, if this parameter is not specified, the HTTP client uses one of the following files (whichever is found first):","/etc/ssl/certs/ca-certificates.crt","/etc/pki/tls/certs/ca-bundle.crt","/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem","/etc/ssl/ca-bundle.pem","&#8209;&#8209;repeat&#8209;timeout&nbsp;REPEAT_TIMEOUT","Specifies that scanning of objects will be repeated for at least REPEAT_TIMEOUT seconds.","If the argument is not specified, all of the objects will be scanned one time. Otherwise, scanning will be performed for at least the specified seconds.","--quiet ","Suppresses scan results.That is, scan results are not displayed.","&#8209;&#8209;threads&nbsp;THREADS&nbsp;(=1)","Specifies the number of threads to scan files in parallel.","-m&nbsp;[&nbsp;&#8209;&#8209;measure&nbsp;]","Measures and displays the following:","Scan time in the %H:%M:%S.%ms format","Accumulated scan statistics before and after scanning","--auth-field","Specifies the name of the request header field used for authentication.","If not specified, the default name Authorization is used.","--access-token","Specifies the value of an API token used for authentication. ","Combine this option with --auth-field.","--add-bearer-prefix","Adds the Bearer prefix to the API token value specified in --access-token.","Combine this option with --access-token.","Connection type","Two connection types are supported by the sample HTTP client:","TCP connection","To use a TCP connection, specify an IP address in the -s option in the following format: \"ip_addr:port\".","UNIX socket connection (Linux only)","To use a UNIX socket connection, specify the path to the socket in the -s option.","This is the default option. The default socket file is /tmp/.kavhttpd.","Timeout","The sample HTTP client uses the value specified in the -t option to determine the scan timeout, similarly to the X-KAV-Timeout header.","The default timeout value is 2000.","If 0 is specified in this option, the timeout is infinite.","Scan mode","The sample HTTP client supports two scan modes, which you can specify by using the -f option:","scanfile mode (-f).","In this mode, the sample HTTP client passes file paths to Kaspersky Scan Engine, which reads and scans the files.","To send a scan request to a remote computer over a TCP socket, you must specify the paths to the files that you want to scan or the directories that contain these files. You do not have to do that if the sample HTTP client and Kaspersky Scan Engine are located on the same computer.","scanmemory mode (default).","In this mode, the sample HTTP client passes the file contents to Kaspersky Scan Engine, which scans the contents.","Use only the KAV_SKIP cleaning mode with the scanmemory scan mode. Kaspersky Scan Engine cannot disinfect or delete files in the scanmemory mode.","Scan task context","Kaspersky Scan Engine uses the scan task context to increase the detection rate. Using this option does not affect scanning performance.","It is recommended to use the scan task context in gateway integrations.","Use the following format for the context:","If the object to scan is received from the Internet, specify the web address of the source, including the protocol.","Example: http://example.com","The supported protocols are HTTP, HTTPS, and FTP. If the source URL is unknown, it is recommended to use http://example.com as the scan task context.","If the object to scan is received by email, specify the sender's email address. Use the following format: [from:%sender_address%].","Example: [from:example@example.com]","If the object is received by email, but the sender's email address is unknown, it is recommended to use [from:test@relay.example] as the scan task context.","The scan task context is applicable to file scanning only. If you specify the scan task context for a URL, it will be ignored.","Request and response headers","Specifying request and response headers that were gathered from HTTP traffic related to the scanned object improves the detection rate. It is recommended to use the request and response headers in gateway integrations.","Information messages","The -b, -v, and -l options can only be used together with the -s, -j, and -t options. If you use them with any other option, kavhttp_client returns an error.","You can use the -b, -v, and -l options to check whether kavhttpd is running.","Scanning files","You can specify one or more files to scan, separating them by a white space. Depending on the scan mode, the sample HTTP client then passes the paths to these files or their contents to Kaspersky Scan Engine.","Also, you can specify a directory where files are stored. All files that are located inside this directory and all its subdirectories will be scanned.","Use the following syntax to scan files in scanfile mode:","./kavhttp_client [-s &lt;ip:port | unix-socket&gt;] [-t &lt;timeout&gt;] [-c &lt;context&gt;] [--req &lt;req_file&gt;] [--resp &lt;resp_file&gt;] -f &lt;file1&gt; [&lt;file2&gt;...]","Use the following syntax to scan the contents of files in scanmemory mode:","./kavhttp_client [-s &lt;ip:port | unix-socket&gt;] [-t &lt;timeout&gt;] [-c &lt;context&gt;] [--req &lt;req_file&gt;] [--resp &lt;resp_file&gt;] &lt;file1&gt; [&lt;file2&gt;...]","Scanning URLs","You can specify a URL to scan. If the URL contains spaces or tabs, enclose the URL in quotation marks or make these characters percent-encoded. Similarly, if the URL contains quotation marks (\"), make them percent-encoded.","Simultaneous scanning of multiple URLs is not supported. If you specify more than one URL, only the first one will be scanned.","Files cannot be scanned when the -u option is specified. The -u and -f options cannot be used together.","Use the following syntax to scan a URL:","./kavhttp_client [-s &lt;IP:port | unix-socket&gt;] [-t &lt;timeout&gt;] [-i &lt;IP&gt;] -u &lt;URL&gt;","Syntax and options for the HTTP client","179884.htm");
Page[140]=new Array("You can send scan requests in both scanmemory mode and scanfile mode from the HTTP client on a remote computer to the computer on which the kavhttpd service runs. ","In scanmemory mode, the content of the scanned object is sent in the HTTP request message and is scanned in the system memory of the computer that the kavhttpd service runs on.","In scanfile mode, the HTTP client sends to the kavhttpd service the path to the object that is located on the same computer as the kavhttpd service, or on a remote hard disk successfully mounted on that computer. The kavhttpd service reads the object from the hard disk and scans it.","However, when Kaspersky Scan Engine receives a scan request from a client on remote computer in scanfile mode, it scans only those files that are placed at locations specified in the &lt;ScanningPath&gt; elements of the HTTP mode configuration file. This restriction is necessary to prevent the HTTP client from accidentally scanning the whole file system from the remote computer. ","To scan a file by using a TCP socket in scanfile mode:","In a &lt;ScanningPath&gt; element of the configuration file, specify the location of the file that you want to scan.","Kaspersky Scan Engine does not add or remove objects in the directories specified by ScanningPath. The HTTP client has to send objects to scan, then remove them after scanning.","The following example shows how to specify a directory that contains files to scan:","&lt;ScanningPaths&gt;","&lt;ScanningPath&gt;/mnt/to_scan/&lt;/ScanningPath&gt;","&lt;/ScanningPaths&gt;","Connect to Kaspersky Scan Engine on a remote computer by using a TCP socket and scan the file in scanfile mode. ","The following example shows how to scan the eicar.txt file that is located in the /mnt/to_scan/ directory on the computer the kavhttpd service runs on:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s 192.0.2.42:9999 /mnt/to_scan/eicar.txt","Scanning files over TCP socket in scanfile mode","182976.htm");
Page[141]=new Array("This section contains examples of using a sample HTTP client application from the command line.","Scanning files and URLs","Use the default UNIX socket to scan one file by passing the file contents:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client eicar.txt","Use the default UNIX socket to scan one file by passing the path to the file:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f eicar.txt","Connect to Kaspersky Scan Engine over a TCP socket and scan two files by passing their contents:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s 192.0.2.42:9999 eicar.txt test.sh","Connect to Kaspersky Scan Engine over a TCP socket and scan two files by passing their contents with a 10-second timeout:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s 192.0.2.42:9999 -t 10000 eicar.txt test.sh","Connect to Kaspersky Scan Engine over a TCP socket and scan a file by passing the file path:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s 192.0.2.42:9999 /mnt/to_scan/eicar.txt","Connect to Kaspersky Scan Engine over a TCP socket and scan a URL:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s 192.0.2.42:9999 -u http://example.com","Connect to Kaspersky Scan Engine over a TCP socket and scan a URL with the IP of the host referred to by the URL:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s 192.0.2.42:9999 -i 233.252.0.1 -u http://bug.qainfo.ru/TesT/Aphish_w","Connect to Kaspersky Scan Engine over a TCP socket and request the release date of the anti-virus database:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client &#8211;b -s 192.0.2.42:9999","Scanning files and URLs after authorizing with an API token","Authorize using an API token, connect to Kaspersky Scan Engine over a TCP socket, and scan a file by passing the file path:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://192.0.2.42:443/mnt/to_scan/eicar.txt --auth-field --access-token Ab345-KAV","Authorize using an API token, connect to Kaspersky Scan Engine over a TCP socket, and scan a URL:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s https://192.0.2.42:443 -u http://example.com --auth-field --access-token Ab345-KAV","Authorize using an API token and the Bearer authentication scheme, connect to Kaspersky Scan Engine over a TCP socket, and scan a file by passing the file path:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://192.0.2.42:443 /mnt/to_scan/eicar.txt --auth-field --add-bearer-prefix --access-token Ab345-KAV","Authorize using an API token and the Bearer authentication scheme, connect to Kaspersky Scan Engine over a TCP socket, and scan a URL:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s https://192.0.2.42:443 -u http://example.com -auth-field --add-bearer-prefix --access-token Ab345-KAV","Scanning files and URLs, and checking the TLS certificate","In Linux, to use the --ca-path option, prepare the directory containing the certificates:","openssl rehash /mnt/your-cert-dir/","In Windows, to use the --ca-path option, you have to name the certificates files in the search directory as follows: &lt;hash&gt;.0, &lt;hash&gt;.1, &lt;hash&gt;.2, etc., where &lt;hash&gt; is the hash of the file (for example, d93f38c8.0).","To get the hash of a file, use the following command:","openssl.exe x509 -hash -noout -in \"full path to the certificate file\"","Scan a file and specify the full path to the certificate bundle:","In Windows:","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt -j --ca-cert C:\\your-cert-dir\\CertificateFile.cert","In Linux:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt --ca-cert /mnt/your-cert-dir/CertificateFile.cert","Scan a URL and specify the path to the folder that contains the certificate file:","In Windows:","%service_dir%\\bin\\kavhttp_client -s https://127.0.0.1:443 &#8211;u https://example.com -j --ca-path C:\\your-cert-dir\\","In Linux:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -s https://127.0.0.1:443 &#8211;u https://example.com --ca-path /mnt/your-cert-dir/","Scan a file and specify certificate checking options:","In Windows:","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt -j --check-period","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt -j --check-subject","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt -j --check-chain","In Linux:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt --check-period","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt --check-subject","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt --check-chain","Scan a file and specify certificate checking options within one command:","In Windows:","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt -j --check-period --check-subject --check-chain --ca-path C:\\your-cert-dir\\","In Linux:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt --check-period --check-subject --check-chain --ca-path /mnt/your-cert-dir/","Scan a file and check both the certificate bundle and the certificate file:","In Windows:","%service_dir%\\bin\\kavhttp_client -f -s https://127.0.0.1:443 C:\\eicar.txt  -j --ca-path C:\\your-cert-dir\\ --ca-cert C:\\your-cert-dir\\CertificateFile.cert","In Linux:","user@computer:/opt/kaspersky/ScanEngine/bin# ./kavhttp_client -f -s https://127.0.0.1:443 /mnt/to_scan/eicar.txt  --ca-path /mnt/your-cert-dir/ --ca-cert /mnt/your-cert-dir/CertificateFile.cert","Syntax examples","179885.htm");
Page[142]=new Array("For each scanned file, the sample HTTP client prints a scan result that specifies whether a scanned object is considered uninfected or malicious.","The following scan results are possible:","CLEAN","Scanned object is considered uninfected.","DETECT","Scanned object is considered malicious. This scan result is followed by the name of the detected object or the type of the detected URL.","Kaspersky Scan Engine detects URLs of the following types:","Malicious URLs. When such a URL is detected, Kaspersky Scan Engine returns DETECT MALICIOUS_URL. The priority of this type is 1 (highest priority).","Phishing URLs. When such a URL is detected, Kaspersky Scan Engine returns DETECT PHISHING_URL. The priority of this type is 2.","Adware URLs. When such a URL is detected, Kaspersky Scan Engine returns DETECT ADWARE_URL. The priority of this type is 3.","A URL of this type can only be detected when Cloud Protection is enabled.","URLs leading to legitimate software that can be used by intruders to damage computers or users' personal data). When such a URL is detected, Kaspersky Scan Engine returns DETECT RISKWARE_URL. The priority of this type is 4 (lowest priority).","A URL of this type can only be detected when Cloud Protection is enabled.","A URL can belong to several types simultaneously. In this case, Kaspersky Scan Engine returns the DETECT scan result of the highest priority.","DISINFECTED","Scanned object has been successfully disinfected.","DELETED","Scanned object was deleted.","If the scanned object contains macros, the scan result of this file is appended with \"AND CONTAINS OFFICE MACRO\".","Below is an example of the output produced by the sample HTTP client:","./kavhttp_client test.sh service.sh eicar.txt","Server address: /tmp/.kavhttpd","Network timeout: 2000","Scan mode: scanmemory","Scan file: test.sh","CLEAN","Scan file: service.sh","CLEAN","Scan file: eicar.txt","DETECT EICAR-Test-File","If the scanning operation failed, the scan result will contain one of the following error codes:","NON_SCANNED","Specified object was not scanned. The reason for it is provided as well.","SERVER_ERROR","An error occurred in Kaspersky Scan Engine.","CONNECTION_CLOSED","Connection was closed by Kaspersky Scan Engine.","CLIENT_TIMEOUT","Operation timed out. This happens when the client timeout is exceeded.","CONNECTION_FAILED","Failed to establish a connection to Kaspersky Scan Engine.","HTTP_ERROR","The server has responded with an HTTP status code that is not equal to 200. The HTTP status code and its description are provided as well.","Scan results for the HTTP client","179886.htm");
Page[143]=new Array("When a connection error occurs, the HTTP client prints an error message to the console.","Invalid response ","The connection was broken when the client was waiting for a response from the server. The client exits after this error.","Invalid response followed by CONNECTION_CLOSED","The connection was broken when the client was transmitting a file to scan to the server.","Invalid response followed by CLIENT_TIMEOUT","Client timeout (defined by the -t option) was exceeded.","HTTP_ERROR 408 Request Timeout","The processing timeout (defined by the SessionTimeout parameter) was exceeded.","HTTP client connection error messages","179887.htm");
Page[144]=new Array("Kaspersky Scan Engine can use a proxy server to connect to Kaspersky cloud services.","If a proxy server is specified in the HTTP mode configuration file, Kaspersky Scan Engine does the following:","Kaspersky Scan Engine tries to establish a direct connection to the destination.","Note that this happens even if a proxy server is specified.","If a direct connection cannot be established, Kaspersky Scan Engine tries to establish a connection by using the specified proxy server.","If a proxy server connection cannot be established, Kaspersky Scan Engine uses offline technologies only.","Note that this also happens when network problems prevent a proxy server connection from being established. In this case, at regular intervals Kaspersky Scan Engine tries to establish a connection to the proxy server. If a connection is established before a certain timeout, Kaspersky Scan Engine uses online technologies.","You must restart Kaspersky Scan Engine to use the new proxy server settings.","Kaspersky Scan Engine does not print information about using online and offline technologies to the command line. You must analyze log files to get this information.","See also the information about enabling logging and specifying a proxy server.","Using a proxy server","179881.htm");
Page[145]=new Array("With default configuration, Kaspersky Scan Engine uses the anti-virus database from the ./bin/bases directory. You can update the anti-virus database by sending a signal or an HTTP request to Kaspersky Scan Engine.","When the anti-virus database is updated, the encrypted user agent string of Kaspersky Scan Engine is transferred to Kaspersky. See also the full list of data that is transferred to Kaspersky during an update.","Updating the database on demand","If you want to update the database manually, use updating on demand.","To update the database on demand in Linux by using signals:","Before starting the kavhttpd service, specify the update setting in kavhttpd.xml.","Start the kavhttpd service.","Send a SIGUSR2 signal to the kavhttpd service.","If the client and Kaspersky Scan Engine are installed and running on the same computer, you can send an HTTP request to the /api/v3.0/update/start address to update the database. Note that if you send this request from a different computer, Kaspersky Scan Engine will throw a 405 Method Not Allowed error. If the database update has been successfully initiated, the HTTP response will contain the following JSON object:","{","\"status\": \"update started\"","} ","To learn how to track the database update status, see subsection \"Getting the database update status\" below.","To update the database on demand in Linux by using the sample HTTP client,","Call the sample HTTP client with the -d option:","kavhttp_client -j -d","To update the database on demand in Windows,","Call the sample HTTP client with the -d option:","kavhttp_client.exe -j -d","See also the detailed information on scheduling automatic database updates.","Getting the database update status","If you want to obtain the database update status, send a GET request to the /api/v3.0/update/status address or the /api/v3.1/update/status address.","You can only send this request if the client and Kaspersky Scan Engine are installed and running on the same computer.","When Kaspersky Scan Engine receives the request, it returns a response in the following format:","{","\"status\": \"%UPDATE_STATUS%\",","\"progress\": \"%UPDATE_PROGRESS%\",","\"last_update_result\": \"%UPDATE_RESULT%\",","\"last_update_time\": \"%UPDATE_TIME%\",","}","where:","status is the current status of the database update. It can have one of the following values:","\"in progress\"","\"not started\"","progress is the progress, in percent, of the database update.","This element is only included in the response if the database update is being performed at present (that is if the status element has the value of \"in progress\").","last_update_result is the result of the last database update. It can have one of the following values:","\"success\"","\"all components are up to date\"","\"invalid update sources\"","\"not all components are updated\"","\"download error\"","\"error while updating\"","\"error %ERROR_CODE% occurred\", where %ERROR_CODE% is the error code received from Kaspersky Scan Engine","This element is only included in the response if the database update is not in progress at present (that is if the status element has the value of \"not started\").","last_update_time is the date and the time of the last database update in the following format: %hh%:%mm%:%ss% %DD%.%MM%.%YYYY%.","This element is only included in the response if the database update is not in progress at present (that is if the status element has the value of \"not started\").","Additional fields in KAV protocol version 3.1","If you send a GET request to the /api/v3.1/update/status address, you can get more information about the database update process. Some database updates can be used only after a reboot of the operating system or a restart of KAV SDK. In this case a response of KAV HTTPD has the extended format:","{","\"status\": \"%UPDATE_STATUS%\",","\"progress\": \"%UPDATE_PROGRESS%\",","\"last_update_result\": \"%UPDATE_RESULT%\",","\"last_update_time\": \"%UPDATE_TIME%\",","\"action_needed\": \"%ACTION_NEEDED%\",","\"action_apply_period\": \"%APPLY_PERIOD%\"","}","Here:","%ACTION_NEEDED% is the action to perform before you can apply the updates. It can have one of the following values:","Product restart needed","This means that you must restart KAV HTTPD.","OS reboot needed","This means that you must reboot the operating system on which KAV HTTPD runs.","%APPLY_PERIOD% is the recommended period (in hours) to perform the action specified in %ACTION_NEEDED%.","This action is not performed automatically, you must perform it yourself.","Updating the anti-virus database in HTTP mode","179882.htm");
Page[146]=new Array("This section explains how to work with logs in HTTP mode.","Logging in HTTP mode","186768.htm");
Page[147]=new Array("This section explains how to manually configure logging in HTTP mode without using Kaspersky Scan Engine GUI.","See also detailed instructions on enabling logging.","Configuring logging","To configure logging, change the parameters in the httpdkavlog.ini logging configuration file (hereinafter referred to as the logging configuration file) located in the %service_dir%/bin directory. The configuration file consists of several sections.","DebugLogging section","LogLevel&#8212;Specifies the logging level.","Possible values:","0","Disables logging. This is the default value.","1","Enables full logging mode. Use this mode for debugging purposes.","If you enable full logging mode, consider that the log messages will contain sensitive data.","In HTTP mode, Kaspersky Scan Engine does not automatically remove log files from previous initializations. If necessary, you can remove these log files manually.","LogFolder&#8212;Specifies the path to a directory where log files are stored. ","The path can be absolute or relative. A relative path is calculated relative to the directory that contains the kavhttpd binary file.","SyslogLogging section","The settings below are available only for Linux operating systems.","SyslogEnabled&#8212;Specifies whether the Kaspersky Scan Engine sends syslog messages.","Possible values:","0","Disables sending of syslog messages. ","1","Enables sending of syslog messages.","If you enable sending syslog messages, consider that these messages will contain sensitive data, such as personal data as defined by GDPR, configuration data of the product, and licensing information.","SyslogDestination section ","This element contains a group of settings that specify the format of the logs. If it is necessary to write logs into different locations, you can specify several SyslogDestination elements. In this case, the values of the SyslogTarget subelements must vary.","If SyslogEnabled (see above) has the value of 1, you must include at least one SyslogDestination element.","SyslogFormat&#8212;Specifies the format of syslog messages. ","Possible values:","cef&#8212;Specifies the cef format of syslog messages.","raw&#8212;Specifies the raw format of syslog messages. The raw value is used when the value specified in this element is not cef or raw, or no value is specified in this element, or if the logging configuration file does not contain the SyslogFormat parameter.","SyslogTarget&#8212;Specifies the destination address for syslog messages. ","Possible values:","%PROTOCOL%%IP%:%PORT%, where:","%PROTOCOL% is a network protocol (use tcp:// or udp:// for this value). ","%IP% is an IPv4 address that receives syslog messages. ","%PORT% is a port that receives syslog messages.","If you do not specify a protocol as described above, Kaspersky Scan Engine will use the UDP protocol.","localhost&#8212;Indicates that syslog messages are redirected to syslogd.","Path to a directory where log files with syslog messages are stored. The path must begin with /var/log/kaspersky.","The directory contains the httpd_kav_syslog.log file. Log files with syslog messages created by previous sessions are not removed. If the directory contains an old file, Kaspersky Scan Engine writes new information to this file without deleting the old data. ","SyslogEvents&#8212;Specifies events to be logged. ","It is allowed to specify multiple SyslogEvents values. Each of these values sets the type of event that will be logged into the location specified in the SyslogTarget attribute. If you specify several values for one destination, separate them with the semicolon symbol (;).","Possible values:","Audit&#8212;Specifies system audit events.","Init&#8212;Specifies service initialization events. ","Deinit&#8212;Specifies service deinitialization events and watchdog events. ","Update&#8212;Specifies antivirus database update and reload events.","License&#8212;Specifies license-related events.","Engine&#8212;Specifies antivirus engine events.  These events may be published frequently.","ScanResultClean&#8212;Specifies scan completion events when scanned object considered clean.","ScanResultDetect&#8212;Specifies scan completion events when threat was detected.","ScanResultOther&#8212;Specifies scan completion events when object was not scanned.","If the SyslogDestination element does not contain the SyslogEvents child element, all the HTTP events are logged. ","If the SyslogDestination settings are incorrect, logging to the specified destination will be disabled.","When syslog logging is enabled, system audit is enabled as well. If none of the SyslogEvents elements contains the Audit event, system audit settings are set as follows:  SyslogFormat is set to raw, SyslogTarget is set to localhost, and SyslogEvents is set to audit.","Kaspersky Scan Engine can write debug logs and send syslog messages at the same time or separately.","Structure of the logging configuration file","Following is an example of a logging configuration file:","[DebugLogging]","LogLevel=0","LogFolder=logs","[SyslogLogging]","SyslogEnabled=0","[SyslogDestination]","SyslogFormat=raw","SyslogTarget=localhost","SyslogEvents=audit;init;deinit;update;license;engine","[SyslogDestination]","SyslogFormat=cef","SyslogTarget=/var/log/kaspersky/kse_udp_lic_events","SyslogEvents=license;update","Configuring logging in HTTP mode","179879.htm");
Page[148]=new Array("If Kaspersky Scan Engine is configured to write syslog messages in CEF format, the log records about events appears as follows:","CEF:0|Kaspersky|Scan Engine HTTP Service|%VERSION%|%EVENT_CLASS_ID%|%EVENT_NAME%|%SEVERITY%| msg=%EVENT_MSG% src=%CLIENT_IP% dvcpid=%HTTP_SERVICE_PID% sproc=unix_socket dvc=%HTTP_SERVICE_IP% dvchost=%HOSTNAME% start=%EVENT_TIME% fileHash=%SCANNED_FILE_MD5_HASH% fname=%SCANNED_FILE_NAME% request=%SCANNED_URL% act=%ACTION_MADE% cs1=%SCAN_RESULT% cs1Label=Scan result cs2=%VIRUS_NAME% cs2Label=Virus name flexString1=%SDK_VERSION% flexString1Label=Anti-Virus Engine version","A record has the following fields:","%VERSION%","Version of Kaspersky Scan Engine.","%EVENT_CLASS_ID%","Class of the event. Possible values:","1","Service event (not related to scanning).","2","Event related to errors.","3","Event related to scanning (for example, a scan result).","%EVENT_NAME%","Name of the event. Possible values:","Initializing&#8212;Kaspersky Scan Engine initialized.","Deinitializing&#8212;Kaspersky Scan Engine deinitialized.","Service event&#8212;Service event occurred.","Service error&#8212;Error occurred in the kavhttpd service.","Core error&#8212;Error occurred in Kaspersky Anti-Virus Engine.","Scan result&#8212;Kaspersky Scan Engine finished scanning an object.","Audit&#8212;System audit event occurred.","%SEVERITY%","Importance level of the event. The higher the level, the more important the event. Possible values:","3","This value is specified for system audit events, informational level.","5","This value is specified for service events, when the scanning starts, or if the scan result is CLEAN.","6","This value is specified for system audit events, warning level.","7","This value is specified for initialization, deinitialization, and errors.","8","This value is specified for system audit events (critical level) and if the scan result is something other than CLEAN. These events are considered dangerous.","%EVENT_MSG%","Description of the event. For example, the text of an error message.","%CLIENT_IP%","IP address of the HTTP client that sent the scan request to Kaspersky Scan Engine. This field appears only if the request is sent over a TCP socket and is related to scanning.","%HTTP_SERVICE_PID%","PID of Kaspersky Scan Engine.","%HTTP_SERVICE_IP%","IP address that Kaspersky Scan Engine uses to receive scan requests from clients. This field appears only if Kaspersky Scan Engine receives scan requests over a TCP socket.","%HOSTNAME%","Host name of the computer on which Kaspersky Scan Engine is working. This field appears only if syslog logging in CEF format is enabled.","%EVENT_TIME%","Time and date of the event. The time and date are taken from the computer that Kaspersky Scan Engine runs on.","sproc=unix_socket","This field appears only if Kaspersky Scan Engine receives scan requests over a UNIX socket.","%SCANNED_FILE_MD5_HASH%","Hash of the object that was passed for scanning to Kaspersky Scan Engine. This field appears only if a client sent a scan request and Kaspersky Scan Engine has finished scanning.","%SCANNED_FILE_NAME%","Name of the scanned file. If the client sent a request to scan a part of RAM, the value of this field is MEMORY_BLOCK. This field appears only if a client sent a scan request and Kaspersky Scan Engine has finished scanning.","%SCANNED_URL%","URL specified in the X-KAV-ObjectURL header of the scan request. This field appears only if a client sent a scan request and Kaspersky Scan Engine has finished scanning.","%ACTION_MADE%","Action that was performed on the detected threat or a legitimate software that can be used by intruders. This field appears only in events that contain scan results.","%SCAN_RESULT% ","Scan result. This field appears only in events that contain scan results.","cs1Label=Scan result","This field appears only in events that contain scan results.","%VIRUS_NAME%","Name of the detected threat or legitimate software that can be used by intruders. This field appears only if a threat or legitimate software that can be used by intruders was detected.","cs2Label=Virus name","This field appears only if a threat or legitimate software that can be used by intruders was detected.","%SDK_VERSION%","Version of KAV SDK that Kaspersky Scan Engine is based on.","Format of CEF logs in HTTP mode","186767.htm");
Page[149]=new Array("If Kaspersky Scan Engine is configured to write syslog messages in RAW format, the log records about events appear as follows:","&lt;%PRIORITY%&gt;1 %TIMESTAMP% %HTTP_SERVICE_IP% KasperskyHTTPService %HTTP_SERVICE_PID% %MESSAGE_ID% - BOM %MESSAGE%\\n","A record has the following fields:","%PRIORITY%","Severity level of the event. Possible values:","163","This value is specified for errors.","165","This value is specified if the scan result is something other than CLEAN.","166","This value is specified for service events or if the scan result is CLEAN.","%TIMESTAMP%","Date and time of the event in the Coordinated Universal Time (UTC) time zone.","%HTTP_SERVICE_IP%","IP address that Kaspersky Scan Engine uses to receive scan requests from clients. If Kaspersky Scan Engine receives scan requests over a UNIX socket, the field contains the host name of the computer that Kaspersky Scan Engine runs on.","%HTTP_SERVICE_PID%","PID of Kaspersky Scan Engine.","%MESSAGE_ID%","Class of the event. Possible values:","AUDIT_MESSAGE","Audit event.","SERVICE_MESSAGE","Service event.","ERROR_MESSAGE","Error.","SCAN_RESULT_CLEAN_MESSAGE","Scanned object is considered clean.","SCAN_RESULT_DETECT_MESSAGE","Threat was detected.","SCAN_RESULT_OTHER_MESSAGE","Object was not scanned.","%MESSAGE%","Description of the event. For example, the text of an error message.","Format of RAW logs in HTTP mode","186769.htm");
Page[150]=new Array("You can compile the kavehttpd service and the sample HTTP client from the source code located in the %service_dir%/samples/kavhttp/ directory. ","Software requirements","To compile kavehttpd service and the sample HTTP client, you must install the following software on you computer:","Boost 1.72.0 or later. The kavehttpd service source files are liked with Boost dynamically, which requires the boost-devel package.","The boost libraries must be compiled statically. You can find a list of the necessary boost libraries in %service_dir%/samples/kavhttp/Makefile.","OpenSSL library. It is recommended to install the openssl-devel package.","PostgreSQL libraries from 6.4.4 to 7 (non-inclusive). It is recommended to install the libpqxx-devel package.","GNU Compiler Collection (GCC) 7.3.0 or later. Use the same version of GCC to compile Boost and the kavhttpd service.","Compiling Kaspersky Scan Engine and the sample HTTP client in Linux","To compile Kaspersky Scan Engine and the sample HTTP client in Linux:","Navigate to the %service_dir%/samples/kavhttp/ directory.","Run make.","The compiled client executable files will be placed in the %service_dir%/bin directory. The compiled service executable files will be placed in the %service_dir%/opt/kaspersky/ScanEngine/sdk8l3/bin/ directory.","The following example demonstrates building the executable files:","user@computer:/opt/kaspersky/ScanEngine# cd ./samples/kavhttp/","user@computer:/opt/kaspersky/ScanEngine/samples/kavhttp/# make","Kaspersky Scan Engine and the sample HTTP client in Windows","To compile Kaspersky Scan Engine and the sample HTTP client in Windows:","Navigate to the %service_dir%/samples/kavhttp/http_service/windows folder.","Do the following:","If you want to compile the kavehttpd service, open the kavhttpd.vcxproj file in Microsoft Visual Studio 2017 and later.","If you want to compile the sample HTTP client, open the kavhttp_client.vcxproj file in Microsoft Visual Studio 2017 and later.","Right-click the project in Solution Explorer and select Properties.","In the properties window that opens, in the left navigation tree, select Configuration Properties &gt; Linker &gt; Input. For the Additional Dependencies property, add the paths to the Boost, OpenSSL, and PostgreSQL libraries.","In the left navigation tree, select Configuration Properties &gt; С/C++. For the Additional Include Directories property, add the headers of the Boost, OpenSSL, and PostgreSQL libraries.","Right-click the project in Solution Explorer, and then select Build.","If you use Kaspersky Scan Engine GUI and intend to modify the provided binaries, please make sure to get prior approval for all changes from your technical account manager (TAM).","Building executable files for the HTTP service and the HTTP client","179888.htm");
Page[151]=new Array("This chapter contains information about using Kaspersky Scan Engine in ICAP mode.","The ICAP mode is available only for Linux operating systems.","Using Kaspersky Scan Engine in ICAP mode","184798.htm");
Page[152]=new Array("Internet Content Adaptation Protocol (ICAP) is the standard for communication between proxy servers and service providers. In ICAP mode, Kaspersky Scan Engine works with ICAP-compliant proxy servers. Kaspersky Scan Engine scans HTTP traffic that passes through a proxy server, and URLs requested by users.","In ICAP mode, Kaspersky Scan Engine consists of the kavicapd service, configuration files, and libraries, and has the following features:","URL scan","Kaspersky Scan Engine allows you to scan URLs that users request from a proxy server. This function is available in both the request modification (REQMOD) mode and response modification (RESPMOD) mode of ICAP.","HTTP traffic scan","Kaspersky Scan Engine allows you to scan incoming and outgoing HTTP traffic that passes through a proxy server. This function is available in both the request modification (REQMOD) mode and response modification (RESPMOD) mode of ICAP. ","Scanning of multipart objects is supported.","Support for the 204 No Content HTTP status code","The kavicapd service can be configured to reply with this status code if the message sent by a client does not require modification.","Configuring the kavicapd service behavior with service rules","Partial mode","In this mode, also known as Data Trickling, the ICAP plug-in scans files as a whole, and then divides them into batches, and sends the batched files to the user. The plug-in continues to scan files at the same time that it is sending the first batches of files to the user. This function allows users to receive large scanned files quickly.","Preview mode","In this mode, the ICAP client sends preview requests to the ICAP plug-in. The preview requests allow you to skip objects that the plug-in does not consider malicious.","ISTag updates","The ISTag value in the Kaspersky Scan Engine ICAP response header is updated every time after one of these events happens:","Kaspersky Scan Engine is initialized.","Kaspersky Scan Engine settings are changed.","The anti-virus database is updated.","Keep-Alive connections","By default, Kaspersky Scan Engine supports Keep-Alive connections, so it can process multiple objects one after another, by using the same connection.","To open a Keep-Alive connection, an ICAP request has to contain the Connection field with the Keep-Alive value.","To close the connection, an ICAP  request has to contain the Connection field with the close value.","Kaspersky Scan Engine and ICAP mode","192987.htm");
Page[153]=new Array("This section describes the recommended practices for secure integration of your product with Kaspersky Scan Engine. ","Not following these recommendations may result in security issues.","Use the shortest administrative distance","Configure your network so that the administrative distance between the kavicapd service and the proxy service is as short as possible.  ","  ","Recommendations on secure integration","206407.htm");
Page[154]=new Array("This section describes the recommended settings for Kaspersky Scan Engine in ICAP mode.","If you use the Kaspersky Scan Engine GUI, specify the recommended parameters as described in the table below.","Recommended settings for ICAP mode in the Kaspersky Scan Engine GUI","Settings in the Kaspersky Scan Engine GUI","Recommended settings","Service &gt; Processes","Equal to the number of processor cores","Service &gt; Threads","Twice the value of ScannersCount","Service &gt; Sessions","See the description of MaxIcapSessionsCount below","Service &gt; Partial mode","On","Service &gt; Delay","10","Service &gt; Chunk size","4","Service &gt; Prevent re-downloading","On","Service &gt; Maximum cache size","5000","Service &gt; Lifetime for blocked URLs","1800","Service &gt; Keep-alive","See the description of KeepAliveSettings below","Scanning &gt; Skip large objects","On","10343 KB (10.1 MB)","Get an updated value from your TAM at least once a year.","Scanning &gt; Types of files to scan","Select the checkboxes:","Packed objects","Archives","Email databases","Emails","Scanning &gt; Heuristic analysis level","Low","Scanning &gt; Object scan timeout","10000 (10 seconds)","Scanning &gt; Maximum depth","5","Scanning &gt; Scan scope in Request mode","URL (scans only the requested URLs)","Scanning &gt; Scan scope in Response mode","Files","Scanning &gt; Enable reputation checking","See the description of UseKSN below","If you do not use the Kaspersky Scan Engine GUI, specify the recommended parameters in the kavicapd.xml configuration file as described in the table below.","Recommended settings for ICAP mode in the configuration file","Parameter in kavicapd.xml","Recommended settings","ScannersCount","Equal to the number of processor cores","ThreadsCount","Twice the value of ScannersCount","MaxIcapSessionsCount","See the description of MaxIcapSessionsCount below","QueueLen","Greater than the ThreadsCount value.","At least twice the MaxIcapSessionsCount value.","RAMUsageLimit","Does not exceed the RAM size.","Twice the maximum file size for scanning large files.","Not less than 600 MB, which is twice the size of the anti-virus database and Kaspersky Scan Engine libraries (300 MB in total).","ScanMaxFileSize","10343 KB (10.1 MB)","Get an updated value from your TAM at least once a year.","ScanningMode","Specify the flags:","KAV_O_M_PACKED","KAV_O_M_ARCHIVED","KAV_O_M_MAILPLAIN","KAV_O_M_MAILBASES","KAV_O_M_HEURISTIC_LEVEL_SHALLOW","ScanTimeout","10000 (10 seconds)","MaxArchivesScanningDepth","5","ScanInReqMode","URL (scans only the requested URLs)","ScanInRespMode","Content (scans the HTTP message body)","TransferBeforeScanEnding","1","Delay","(Attribute of TransferBeforeScanEnding)","10","ChunkSize","(Attribute of TransferBeforeScanEnding)","4","BlockedUrlCacheEnabled","(Attribute of TransferBeforeScanEnding)","1","BlockedUrlCacheKb","(Attribute of TransferBeforeScanEnding)","5000","BlockedUrlCacheTtlSec","(Attribute of TransferBeforeScanEnding)","1800","UseKSN","See the description of UseKSN below","KeepAliveSettings","See the description of KeepAliveSettings below","ScannersCount","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Processes.","The recommended number of scanning processes is equal to the number of processor cores. For example, if Kaspersky Scan Engine is running on a computer with a 4-core processor, set ScannersCount to 4.","See also the subsection \"Example of Kaspersky Scan Engine work in ICAP mode depending on the ScannersCount, ThreadsCount, QueueLen, and MaxIcapSessionsCount settings.\"","ThreadsCount","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Threads.","The recommended number of scanning threads depends on the number of scanning processes specified in ScannersCount: the value of ThreadsCount is twice the value of ScannersCount. For example, if Kaspersky Scan Engine is running on a computer with a 4-core processor and ScannersCount is set to 4, set ThreadsCount to 8.","See also the subsection \"Example of Kaspersky Scan Engine work in ICAP mode depending on the ScannersCount, ThreadsCount, QueueLen, and MaxIcapSessionsCount settings.\"","MaxIcapSessionsCount","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Sessions.","When specifying the maximum number of simultaneous connections to Kaspersky Scan Engine, consider the following:","the maximum number of scanning threads (ThreadsCount).","the maximum length of the queue for scan tasks (QueueLen).","specifics of the ICAP mode: in general, kavicapd runs two threads for one scan task.","This means that the greater the number of active connections, the faster all scanning threads are getting occupied and, as a result, the longer the queue is for scan tasks.","The recommended MaxIcapSessionsCount value is:","equal to the average number of ICAP client requests per minute.","greater than the ScannersCount value.","greater than the ThreadsCount value.","exceeds the number of active processes used by the proxy server.","exceeds the maximum number of connections from clients served by the proxy server that you use.","See also the subsection \"Example of Kaspersky Scan Engine work in ICAP mode depending on the ScannersCount, ThreadsCount, QueueLen, and MaxIcapSessionsCount settings.\"","QueueLen","The length of the scan task queue must not be less than the number of scanning threads (ThreadsCount). Otherwise, some scanning threads will never be in use. ","Since scan tasks are enqueued from all open sessions, it is necessary to consider the MaxIcapSessionsCount value. The scan task queue must not be less than MaxIcapSessionsCount. Otherwise, some clients will receive a 503 - Service overloaded error when trying to open a session.","The recommended QueueLen value is:","greater than the ThreadsCount value.","at least twice the MaxIcapSessionsCount value.","See also the subsection \"Example of Kaspersky Scan Engine work in ICAP mode depending on the ScannersCount, ThreadsCount, QueueLen, and MaxIcapSessionsCount settings.\"","RAMUsageLimit","If Kaspersky Scan Engine receives a lot of large objects to scan or a lot of simultaneous requests, the program can frequently stop request processing due to excessive consumption of system memory. When request processing stops, Kaspersky Scan Engine writes one of the following messages to the log file: Can't accept request: Not enough memory! or Can't accept new request: Not enough memory! The clients receive the 503 - Service overloaded error message.","We recommend that you limit the maximum amount of system memory to prevent its excessive consumption. When this limit is exceeded, Kaspersky Scan Engine stops scanning objects.","The recommended RAMUsageLimit value:","does not exceed the RAM size.","is twice the maximum file size for scanning large files. For example, scanning a 1 GB file requires about 2 GB of RAM.","is not less than 600 MB, which is twice the size of the anti-virus database and Kaspersky Scan Engine libraries (300 MB in total). The reason for doubling is that the amount of system memory is doubled when the database is reloaded.","ScanMaxFileSize","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Skip large objects.","When specifying the maximum size of a file that Kaspersky Scan Engine can scan, consider the RAMUsageLimit value: ScanMaxFileSize must not be greater than RAMUsageLimit. To improve Kaspersky Scan Engine performance, set ScanMaxFileSize to 10343 KB (10.1 MB). This is the recommended value because it is sufficient to detect most malware.","If you have followed the recommendation above, we also recommend consulting with your Technical Account Manager (TAM) once a year to get an updated recommended value, as the average malware size changes from year to year.","ScanningMode","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Types of files to scan and Settings &gt; Scanning &gt; Heuristic analysis level.","The recommended value for ScanningMode is the following:","KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW","ScanTimeout","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Object scan timeout.","The recommended value for ScanTimeout is 10000 (10 seconds).","MaxArchivesScanningDepth","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Maximum depth.","We recommend that you limit the maximum depth of nested archives to be unpacked during scanning. The recommended value for MaxArchivesScanningDepth is 5.","ScanInReqMode","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Scan scope in Request mode.","The recommended value for ScanInReqMode is URL. If this value is specified, Kaspersky Scan Engine scans only the requested URLs.","ScanInRespMode","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Scan scope in Response mode.","The recommended value for ScanInRespMode is Content. If this value is specified, Kaspersky Scan Engine scans the HTTP message body.","TransferBeforeScanEnding","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service, the Partial mode block of settings.","This parameter prevents the client from interrupting the connection to the proxy server due to a timeout. This may happen when a client sends a large object to scan and could not wait for the scanned object to be received.","The recommended value for TransferBeforeScanEnding is 1 (enable). It is also recommended to use the default attributes:","Delay: 10","ChunkSize: 4","The value must be at least several times less than ScanMaxFileSize (see above).","BlockedUrlCacheEnabled: 1","BlockedUrlCacheKb: 5000","BlockedUrlCacheTtlSec: 1800","See also the detailed description of these attributes.","UseKSN","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Scanning &gt; Enable reputation checking.","We recommend enabling the use of data from KSN (Kaspersky Security Network). This provides faster responses to threats, improves the performance of some protection components, and reduces the likelihood of false positives.","To enable KSN, set UseKSN to 1.","If KSN is enabled, it is also recommended to enable Phishing Protection by using one of the following ways:","In the ScanningMode element of the kavicapd.xml configuration file, add the KAV_O_M_PHISHING flag.","On the Settings &gt; Scanning page of the Kaspersky Scan Engine GUI, turn on the Enable Phishing Protection toggle switch.","Phishing Protection is useful when Kaspersky Scan Engine checks URLs.","KeepAliveSettings","This parameter in the Kaspersky Scan Engine GUI: Settings &gt; Service &gt; Keep-alive.","We recommend enabling Keep-Alive. When Keep-Alive is enabled, Kaspersky Scan Engine maintains a persistent connection even after the request has been processed and the session timed out. This gives the following advantages:","reduce network traffic","reduce the use of server resources","reduce latency in processing requests","Keep-Alive is especially useful for HTTPS connections that require more CPU time and more client-server interactions.","To enable Keep-Alive, set the Enabled element in KeepAliveSettings to 1.","To determine the values for TimeoutMs and MaxRequests, estimate the number of clients and the number of requests from clients.","For example, you have estimated that the maximum number of clients is 50, so you set MaxICAPSessionsCount to 50. If TimeoutMs and MaxRequests are unlimited, and all 50 clients send requests continuously, Kaspersky Scan Engine maintains connections with these 50 clients without limits. As a result, new connections cannot be established.","Another example. You have estimated that the maximum number of clients is 50, so you set MaxICAPSessionsCount to 50. You have also estimated that the maximum number of requests from one client is 15, so you set MaxRequests to 15. If you did not set the limit for TimeoutMs, and clients do not send 15 requests, Kaspersky Scan Engine maintains connections with these 50 clients without limits, so new connections cannot be established.","Example of Kaspersky Scan Engine work in ICAP mode depending on the ScannersCount, ThreadsCount, QueueLen, and MaxIcapSessionsCount settings","Let's say Kaspersky Scan Engine is installed on a computer with four CPU cores, there are 140 simultaneous connections to this computer, and Kaspersky Scan Engine is configured as follows:","ScannersCount = 4","ThreadsCount = 8","QueueLen = 200","MaxIcapSessionsCount = 100","In this case:","Kaspersky Scan Engine tries to open connections for all 140 clients. Generally, 100 sessions are guaranteed to be open. The remaining 40 clients will probably receive the error 429: Too many requests.","The open sessions form a queue of scanning tasks. Ideally, a queue of 200 tasks is guaranteed.","If the QueueLen value limits the queue length to less than 200 tasks, the rest of the clients will receive the error 500 - Internal Server Error.","Kaspersky Scan Engine runs four scanning processes.","Four scanning processes create eight threads for simultaneous processing of eight scanning tasks from the queue. The remaining 192 scanning tasks are queued.","If 500: Internal Server Error is returned to the client, it may mean that the queue length limit specified in QueueLen has been reached. In this case, you can do one of the following:","Decrease MaxIcapSessionsCount.","Before decreasing MaxIcapSessionsCount, evaluate your solution scalability needs. If MaxIcapSessionsCount is decreased, all clients over the number specified in MaxIcapSessionsCount will be unable to create a session and  will receive the error 429: Too many requests.","Increase QueueLen.","Before increasing QueueLen, evaluate your solution scalability needs. If the QueueLen is too large and the bandwidth is low, the request processing time can increase so much that the client is disconnected before Kaspersky Scan Engine finishes processing the request. ","If 503: Service overloaded is returned to the client, it may mean that the system memory consumption limit has been reached while the request was being processed (the log contains the record Not enough memory).  In this case, increase the RAMUsageLimit value.","Recommended settings for ICAP mode","225528.htm");
Page[155]=new Array("This section explains how to manually configure Kaspersky Scan Engine for use in ICAP mode, without using Kaspersky Scan Engine GUI.","Configuring Kaspersky Scan Engine in ICAP mode","192988.htm");
Page[156]=new Array("The ICAP mode configuration file, kavicapd.xml, consists of several sections that specify settings for the kavicapd service and KAV SDK.","Preparing the ICAP mode configuration file after manual installation","If you installed Kaspersky Scan Engine manually, you need to copy the ICAP mode configuration to a location where kavicapd service can find it. By default, the configuration file is located at %distr_kit%/etc/kavicapd.xml.","After installing Kaspersky Scan Engine, copy kavicapd.xml to your preferred location:","If you copy kavicapd.xml to the /etc/ directory, Kaspersky Scan Engine automatically finds and parses this file.","If you copy kavicapd.xml to a different location, you need to set the path to this location when you start Kaspersky Scan Engine manually.","Parameters of the ICAP mode configuration file","Following are the sections of the ICAP mode configuration file, kavicapd.xml. An example configuration file is at the end.","The ICAP mode configuration file contains the following parent elements:","SDKSettings","KSNSettings","UpdateSettings","ProxySettings","FormatRecognizerSettings","ICAPSettings","Some sections of the configuration file are optional. However, if a section exists in the configuration file, all of its child elements must be present. Elements must not be empty, unless stated otherwise.","Structure of the configuration file","Following is an example ICAP mode configuration file.","&lt;Configuration&gt;","&lt;SDKSettings&gt;","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","&lt;ScanTimeout&gt;10000&lt;/ScanTimeout&gt; &lt;!-- 0 = unlimited --&gt;","&lt;LicensePath&gt;/opt/kaspersky/ScanEngine/bin&lt;/LicensePath&gt;","&lt;BasesPath&gt;/opt/kaspersky/ScanEngine/bin/bases&lt;/BasesPath&gt;","&lt;TempPath&gt;/tmp/kavicapd&lt;/TempPath&gt;","&lt;LicensingMode&gt;1&lt;/LicensingMode&gt;&lt;!-- 1 = offline licensing mode; 2 - online licensing mode --&gt;","&lt;ScanningMode&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW&lt;/ScanningMode&gt;","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","&lt;/SDKSettings&gt;","&lt;KSNSettings&gt;","&lt;UseKSN&gt;0&lt;/UseKSN&gt;","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","&lt;/KSNSettings&gt;","&lt;UpdateSettings&gt;","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","&lt;UpdatePeriodMinutes&gt;30&lt;/UpdatePeriodMinutes&gt;  &lt;!-- 0 = turn update off --&gt;","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","&lt;UpdateSources&gt;","&lt;!-- &lt;Source&gt;&lt;/Source&gt; --&gt;","&lt;/UpdateSources&gt;","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","&lt;/UpdateSettings&gt;","&lt;ProxySettings&gt;","&lt;UseProxy&gt;0&lt;/UseProxy&gt;","&lt;Host&gt;myproxy.mycompany.com&lt;/Host&gt;","&lt;Port&gt;3128&lt;/Port&gt;","&lt;User&gt;doOTrypDTxpVJxUHYeKQTw==&lt;/User&gt;","&lt;Pass&gt;8mSHXFix3uL+RP9oNeKDZQ==&lt;/Pass&gt;","&lt;/ProxySettings&gt;","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","&lt;KAV_FF_GENERAL_CSV/&gt;","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt;","&lt;ICAPSettings&gt;","&lt;Port&gt;1344&lt;/Port&gt;","&lt;ReqModeAddress&gt;req&lt;/ReqModeAddress&gt;","&lt;RespModeAddress&gt;resp&lt;/RespModeAddress&gt;","&lt;MaxIcapSessionsCount&gt;100&lt;/MaxIcapSessionsCount&gt;","&lt;ScanMaxFileSize&gt;0&lt;/ScanMaxFileSize&gt; &lt;!-- 0 = unlimited --&gt;","&lt;RAMUsageLimit&gt;0&lt;/RAMUsageLimit&gt; &lt;!-- 0 = unlimited --&gt;","&lt;Allow204&gt;0&lt;/Allow204&gt;","&lt;KeepAliveSettings&gt;&lt;!-- Support for processing multiple requests during one connection --&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","&lt;RequestingICAPHeaders&gt;","&lt;ICAPHeader&gt;HTTPUserNameICAPHeader&lt;/ICAPHeader&gt;","&lt;ICAPHeader&gt;HTTPClientIpICAPHeader&lt;/ICAPHeader&gt;","&lt;/RequestingICAPHeaders&gt;","&lt;HTTPClientIpICAPHeader&gt;X-Client-IP&lt;/HTTPClientIpICAPHeader&gt;","&lt;HTTPUserNameICAPHeader&gt;X-Client-Username&lt;/HTTPUserNameICAPHeader&gt;","&lt;VirusNameICAPHeader&gt;&lt;/VirusNameICAPHeader&gt;","&lt;DatabaseVersionICAPHeader&gt;X-AV-Database-time&lt;/DatabaseVersionICAPHeader&gt;","&lt;SendInfectionFoundICAPHeader&gt;0&lt;/SendInfectionFoundICAPHeader&gt;","&lt;SendResponseInfoICAPHeader&gt;0&lt;/SendResponseInfoICAPHeader&gt;","&lt;SendResponseDescICAPHeader&gt;0&lt;/SendResponseDescICAPHeader&gt;","&lt;SendViolationsFoundICAPHeader&gt;0&lt;/SendViolationsFoundICAPHeader&gt;","&lt;ScanInReqMode&gt;All&lt;/ScanInReqMode&gt;","&lt;ScanInRespMode&gt;Content&lt;/ScanInRespMode&gt;","&lt;RulesFilePath&gt;/opt/kaspersky/ScanEngine/icap_data/kavicapd_gui_rules.conf&lt;/RulesFilePath&gt;","&lt;CmdPath&gt;/opt/kaspersky/ScanEngine/icap_data/scripts&lt;/CmdPath&gt;","&lt;ResponsesPath&gt;/opt/kaspersky/ScanEngine/icap_data/templates&lt;/ResponsesPath&gt;","&lt;TransferBeforeScanEnding Delay=\"10\" ChunkSize=\"4\" BlockedUrlCacheEnabled=\"1\" BlockedUrlCacheKb=\"5000\" BlockedUrlCacheTtlSec=\"1800\"&gt;0&lt;/TransferBeforeScanEnding&gt;","&lt;Exclusions&gt;","&lt;!-- Signs of highly likely uninfected resources. --&gt;","&lt;!-- Note: ContentSize - more or equal (use only once), ContentType - as is, RequestURL - masks can be used --&gt;","&lt;!--","&lt;ContentSize&gt;102400&lt;/ContentSize&gt;","&lt;ContentType&gt;audio/mpeg&lt;/ContentType&gt;","&lt;ContentType&gt;image/jpeg&lt;/ContentType&gt;","&lt;RequestURL&gt;*.kaspersky.com/.*&lt;/RequestURL&gt;","		--&gt;","&lt;/Exclusions&gt;","&lt;!-- Possible values: update, reload, reopen-log (reopens syslog format log files) --&gt;","&lt;USR1SignalAction&gt;update&lt;/USR1SignalAction&gt; ","&lt;USR2SignalAction&gt;reopen-log&lt;/USR2SignalAction&gt;","&lt;!-- The path to the logging configuration file. Only this file will be used as the ICAP logging configuration file. If the LoggingConfigFilePath element has the empty value, the icapdkavlog.conf file located in the kavicapd binary file directory is used. --&gt;","&lt;LoggingConfigFilePath&gt;&lt;/LoggingConfigFilePath&gt;","&lt;/ICAPSettings&gt;","&lt;/Configuration&gt;","ICAP mode configuration file","192989.htm");
Page[157]=new Array("Specifies KAV SDK settings.","Path","SDKSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","ScannersCount","ThreadsCount","QueueLen","ScanTimeout","LicensePath","BasesPath","TempPath","ScanningMode","LicensingMode","MaxArchivesScanningDepth","Example","The following is an example of an SDKSettings element.","&lt;SDKSettings&gt;","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","&lt;ScanTimeout&gt;10000&lt;/ScanTimeout&gt; &lt;!-- 0 = unlimited --&gt;","&lt;LicensePath&gt;/opt/kaspersky/ScanEngine/bin&lt;/LicensePath&gt;","&lt;BasesPath&gt;/opt/kaspersky/ScanEngine/bin/bases&lt;/BasesPath&gt;","&lt;TempPath&gt;/tmp/kavicapd&lt;/TempPath&gt;","&lt;LicensingMode&gt;1&lt;/LicensingMode&gt;&lt;!-- 1 = offline licensing mode; 2 - online licensing mode --&gt;	","&lt;ScanningMode&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW&lt;/ScanningMode&gt;","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","&lt;/SDKSettings&gt;","SDKSettings","201103.htm");
Page[158]=new Array("Specifies the number of scanning processes. You can have up to 256 scanning processes.  ","Path","SDKSettings &gt; ScannersCount","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 4.","Example","The following is an example of this element.","&lt;ScannersCount&gt;4&lt;/ScannersCount&gt;","ScannersCount","200690.htm");
Page[159]=new Array("Specifies the total number of scanning threads in all processes. You can have up to 256 scanning threads.","Path","SDKSettings &gt; ThreadsCount","Attributes","This element has no attributes.","Value","This value must be an unsigned integer and cannot be 0. The default value is 8.","Example","The following is an example of this element.","&lt;ThreadsCount&gt;8&lt;/ThreadsCount&gt;","ThreadsCount","200691.htm");
Page[160]=new Array("Specifies the length of the scan task queue.","Path","SDKSettings &gt; QueueLen","Attributes","This element has no attributes.","Value","The default value is 1024.","Example","The following is an example of this element.","&lt;QueueLen&gt;1024&lt;/QueueLen&gt;","QueueLen","200692.htm");
Page[161]=new Array("Specifies the scanning timeout, in milliseconds (ms).","Path","SDKSettings &gt; ScanTimeout","Attributes","This element has no attributes.","Value","The default value is 10000 (10 seconds).","Example","The following is an example of this element.","&lt;ScanTimeout&gt;10000&lt;/ScanTimeout&gt; &lt;!-- 0 = unlimited --&gt;","ScanTimeout","200693.htm");
Page[162]=new Array("Specifies an absolute path to a directory where the application ID file, licensing file, and key file are stored.","Path","SDKSettings &gt; LicensePath","Attributes","This element has no attributes.","Value","This is a string value. Kaspersky Scan Engine looks for these files in the following directories:","The directory that is specified in LicensePath.","The directory that contains the kavicapd executable file.","The %service_dir%/ppl directory.","Example","The following is an example of this element.","&lt;LicensePath&gt;/opt/kaspersky/ScanEngine/bin&lt;/LicensePath&gt;","LicensePath","201118.htm");
Page[163]=new Array("Specifies an absolute path to a directory where the anti-virus database is located.","Path","SDKSettings &gt; BasesPath","Attributes","This element has no attributes.","Value","The default value is /opt/kaspersky/ScanEngine/bin/bases.","Example","The following is an example of this element.","&lt;BasesPath&gt;/opt/kaspersky/ScanEngine/bin/bases&lt;/BasesPath&gt;","BasesPath","201120.htm");
Page[164]=new Array("Specifies an absolute path to a directory where the files created at runtime are stored.","Path","SDKSettings &gt; TempPath","Attributes","This element has no attributes.","Value","The default value is /tmp/kavicapd.","Do not delete any files from this directory.","Example","The following is an example of this element.","&lt;TempPath&gt;/tmp/kavicapd&lt;/TempPath&gt;","TempPath","200697.htm");
Page[165]=new Array("Specifies a file scanning mode.","Path","SDKSettings &gt; ScanningMode","Attributes","This element has no attributes.","Possible values","A scanning mode is defined by a combination of flags separated by pipes (|).","This element has the following possible values.","ScanningMode element possible values","Value","Description","KAV_O_M_PACKED","Scan compressed executable files.","KAV_O_M_ARCHIVED","Scan archived files.","KAV_O_M_MAILBASES","Scan files that contain email databases.","KAV_O_M_MAILPLAIN","Scan email messages.","KAV_O_M_HEURISTIC_LEVEL_SHALLOW","Set the scanning level of the advanced heuristic code analyzer to shallow (the Low level in the graphical user interface).","KAV_O_M_HEURISTIC_LEVEL_MEDIUM","Set the scanning level of the advanced heuristic code analyzer to medium (the Medium level in the graphical user interface).","KAV_O_M_HEURISTIC_LEVEL_DETAIL","Set the scanning level of the advanced heuristic code analyzer to detail (the High level in the graphical user interface).","KAV_O_M_MSOFFICE_MACRO","Block clean Microsoft Office document files that contain macros, and then notify the user.","KAV_O_M_PHISHING","Enable Phishing protection.","The default value is KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW.","Example","The following is an example of this element.","&lt;ScanningMode&gt;KAV_O_M_PACKED | KAV_O_M_ARCHIVED | KAV_O_M_MAILPLAIN | KAV_O_M_MAILBASES | KAV_O_M_HEURISTIC_LEVEL_SHALLOW&lt;/ScanningMode&gt;","ScanningMode","201123.htm");
Page[166]=new Array("Specifies the licensing mode used in Kaspersky Scan Engine.","Path","SDKSettings &gt; LicensingMode","Attributes","This element has no attributes.","Possible values","Possible values:","1&#8212;Offline licensing mode","2&#8212;Online licensing mode","The default value is 1.","LicensingMode","201124.htm");
Page[167]=new Array("Specifies the maximum depth of nested archives to be unpacked during scanning. This parameter is optional.","Path","SDKSettings &gt; MaxArchivesScanningDepth","Attributes","This element has no attributes.","Value","The value must be an unsigned integer. ","The default value is 0.","The recommended value is 5.","Example","The following is an example of this element.","&lt;MaxArchivesScanningDepth&gt;0&lt;/MaxArchivesScanningDepth&gt;","MaxArchivesScanningDepth","207146.htm");
Page[168]=new Array("Specifies Kaspersky Security Network (KSN) settings.","This is an optional section. If this section is absent from the configuration file, KSN is not used.","By using KSN, you agree to transfer data to Kaspersky as described in the About data provision.txt file. See also the detailed information about data provisioning.","Path","KSNSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","UseKSN","ObjectCheckOnDemandTimeoutMs","CacheSizeKb","Example","The following is an example of a KSNSettings element.","&lt;KSNSettings&gt;","&lt;UseKSN&gt;0&lt;/UseKSN&gt;","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","&lt;/KSNSettings&gt;","KSNSettings","200603.htm");
Page[169]=new Array("A Boolean value that defines whether KSN is enabled.","Path","KSNSettings &gt; UseKSN","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseKSN element possible values","Value","Description","0","KSN is disabled.","This value is default.","1","KSN is enabled. It also automatically enables the KAV_O_M_COMPOSITE_SCAN_KSN flag.","Example","The following is an example of this element.","&lt;UseKSN&gt;0&lt;/UseKSN&gt;","UseKSN","200698.htm");
Page[170]=new Array("Specifies the timeout for checking the reputation of files or URLs in KSN cloud, in milliseconds (ms).","Path","KSNSettings &gt; ObjectCheckOnDemandTimeoutMs","Attributes","This element has no attributes.","Value","This value cannot be 0.","The default value is 10000 (10 seconds).","Example","The following is an example of this element.","&lt;ObjectCheckOnDemandTimeoutMs&gt;10000&lt;/ObjectCheckOnDemandTimeoutMs&gt;","ObjectCheckOnDemandTimeoutMs","200702.htm");
Page[171]=new Array("Specifies the maximum size, in kilobytes (KB), of the KSN status cache.","Path","KSNSettings &gt; CacheSizeKb","Attributes","This element has no attributes.","Value","This cache is used by Kaspersky Scan Engine to store scan results obtained from KSN.","The default value is 30720.","Example","The following is an example of this element.","&lt;CacheSizeKb&gt;30720&lt;/CacheSizeKb&gt;","CacheSizeKb","200703.htm");
Page[172]=new Array("The following parameters specify proxy server settings for Kaspersky Scan Engine. Kaspersky Scan Engine uses these settings when it connects to the Internet.","This is an optional section. If this section is absent from the configuration file, Kaspersky Scan Engine does not use a proxy server when connecting to the Internet.","Path","ProxySettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","UseProxy","Host","Port","User","Pass","Example","The following is an example of a ProxySettings element.","&lt;ProxySettings&gt;","&lt;UseProxy&gt;0&lt;/UseProxy&gt;","&lt;Host&gt;myproxy.mycompany.com&lt;/Host&gt;","&lt;Port&gt;3128&lt;/Port&gt;","&lt;User&gt;doOTrypDTxpVJxUHYeKQTw==&lt;/User&gt;","&lt;Pass&gt;8mSHXFix3uL+RP9oNeKDZQ==&lt;/Pass&gt;","&lt;/ProxySettings&gt;","ProxySettings","200604.htm");
Page[173]=new Array("A Boolean value that defines whether Kaspersky Scan Engine uses a proxy server when connecting to the Internet.","Path","ProxySettings &gt; UseProxy","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseProxy element possible values","Value","Description","0","Proxy server is not used.","This value is default.","1","Proxy server is used.","Example","The following is an example of this element.","&lt;UseProxy&gt;0&lt;/UseProxy&gt;","UseProxy","200704.htm");
Page[174]=new Array("Specifies the proxy server IP address (IPv4 or IPv6) or a domain name.","If a proxy server is used, this parameter is mandatory.","Path","ProxySettings &gt; Host","Attributes","This element has no attributes.","Value","Do not specify the protocol (http:// or https://) in this parameter.","Example","The following is an example of this element.","&lt;Host&gt;myproxy.mycompany.com&lt;/Host&gt;","Host","200705.htm");
Page[175]=new Array("Specifies the port number of the proxy server.","Path","ProxySettings &gt; Port","Attributes","This element has no attributes.","Value","The default value is 3128.","Example","The following is an example of this element.","&lt;Port&gt;3128&lt;/Port&gt;","Port","200706.htm");
Page[176]=new Array("Specifies the encrypted user name that is used for authenticating on a proxy server. The user name is encrypted by the kav_encrypt utility.","If a proxy server is used, this parameter is mandatory.","Path","ProxySettings &gt; User","Attributes","This element has no attributes.","Value","If the User parameter and the Pass parameter are empty, an anonymous proxy server is used.","Example","The following is an example of this element.","&lt;User&gt;doOTrypDTxpVJxUHYeKQTw==&lt;/User&gt;","User","200707.htm");
Page[177]=new Array("Specifies the encrypted password that is used for authenticating on a proxy server. The value is encrypted by the kav_encrypt utility.","Path","ProxySettings &gt; Pass","Attributes","This element has no attributes.","Value","If the User parameter and the Pass parameter are empty, an anonymous proxy server is used.","Example","The following is an example of this element.","&lt;Pass&gt;8mSHXFix3uL+RP9oNeKDZQ==&lt;/Pass&gt;","Pass","200708.htm");
Page[178]=new Array("The following parameters specify update settings for Kaspersky Scan Engine.","This is an optional section. If this section is absent from the configuration file, updating is disabled.","Path","UpdateSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","DisableBackup","UpdatePeriodMinutes","UseOnlyCustomSources","UpdateSources","UpdatesCertFile","CertificateConfirmationAction","UseReducedBases","Example","The following is an example of a UpdateSettings element.","&lt;UpdateSettings&gt;","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","&lt;UpdatePeriodMinutes&gt;30&lt;/UpdatePeriodMinutes&gt;  &lt;!-- 0 = turn update off --&gt;","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","&lt;UpdateSources&gt;","&lt;!-- &lt;Source&gt;&lt;/Source&gt; --&gt;","&lt;/UpdateSources&gt;","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","&lt;/UpdateSettings&gt;","UpdateSettings","200605.htm");
Page[179]=new Array("A Boolean value that defines whether anti-virus database backup is enabled. ","Path","UpdateSettings &gt; DisableBackup","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","DisableBackup element possible values","Value","Description","0","Anti-virus database backup is enabled.","This value is default.","1","Anti-virus database backup is disabled.","Example","The following is an example of this element.","&lt;DisableBackup&gt;0&lt;/DisableBackup&gt;","DisableBackup","200709.htm");
Page[180]=new Array("Specifies the interval between automatic updates (in minutes). ","Path","UpdateSettings &gt; UpdatePeriodMinutes","Attributes","This element has no attributes.","Value","The maximum value is 44640.","If this parameter is 0, Kaspersky Scan Engine does not perform automatic updates.","The default value is 30.","Example","The following is an example of this element.","&lt;UpdatePeriodMinutes&gt;30&lt;/UpdatePeriodMinutes&gt;  &lt;!-- 0 = turn update off --&gt;","UpdatePeriodMinutes","200710.htm");
Page[181]=new Array("Specifies whether Kaspersky update servers are used as a source of updates.","Path","UpdateSettings &gt; UseOnlyCustomSources","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseOnlyCustomSources element possible values","Value","Description","0","Kaspersky update servers are used along with custom update sources.","This value is default.","1","Only custom update sources are used.","Example","The following is an example of this element.","&lt;UseOnlyCustomSources&gt;0&lt;/UseOnlyCustomSources&gt;","UseOnlyCustomSources","200711.htm");
Page[182]=new Array("Contains custom update sources.","Path","UpdateSettings &gt; UpdateSources","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","Source","Specifies a custom update source.","If Kaspersky Scan Engine must use TLS when connecting to a custom update source, you must specify the https:// protocol in the address of this custom update source.","Example","The following is an example of this element.","&lt;UpdateSources&gt;","&lt;!-- &lt;Source&gt;&lt;/Source&gt; --&gt;","&lt;/UpdateSources&gt;","UpdateSources","200712.htm");
Page[183]=new Array("Path to the PEM-formatted root certificate to be used for downloading updates from custom HTTPS update servers. ","The parameter is optional.","Path","UpdateSettings &gt; UpdatesCertFile","Attributes","This element has no attributes.","Values","You can specify either an absolute or relative path. A relative path is relative to the location of the kavicapd executable file.","Example","The following is an example of this element.","&lt;UpdatesCertFile&gt;&lt;/UpdatesCertFile&gt;","UpdatesCertFile","200713.htm");
Page[184]=new Array("Action to undertake if the update server uses an untrusted certificate.","The parameter is optional.","Path","UpdateSettings &gt; CertificateConfirmationAction","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","CertificateConfirmationAction element possible values","Value","Description","0","The update server must not be used.","This value is default.","1","The update server must be still used.","Example","The following is an example of this element.","&lt;CertificateConfirmationAction&gt;0&lt;/CertificateConfirmationAction&gt;","CertificateConfirmationAction","200714.htm");
Page[185]=new Array("Specifies a parameter that is one of the terms that defines whether a reduced databases kit is updated or not.","The parameter is optional.","Path","UpdateSettings &gt; UseReducedBases","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","UseReducedBases element possible values","Value","Description","0","The full databases kit is always updated.","This value is default.","1","The built-in functionality of KAV SDK updates the reduced kit, if all terms of updating to a reduced databases kit are observed. If at least one of the acceptance terms is not observed, the full databases kit is updated.","Example","The following is an example of this element.","&lt;UseReducedBases&gt;0&lt;/UseReducedBases&gt;","UseReducedBases","200715.htm");
Page[186]=new Array("Specifies ICAP settings for Kaspersky Scan Engine.","Path","ICAPSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","Port","ReqModeAddress","RespModeAddress","MaxIcapSessionsCount","RAMUsageLimit","ScanMaxFileSize","Allow204","KeepAliveSettings","RequestingICAPHeaders","HTTPClientIpICAPHeader","HTTPUserNameICAPHeader","VirusNameICAPHeader","DatabaseVersionICAPHeader","SendInfectionFoundICAPHeader","SendResponseDescICAPHeader","SendResponseInfoICAPHeader","SendViolationsFoundICAPHeader","ScanInReqMode","ScanInRespMode","RulesFilePath","CmdPath","ResponsesPath","TransferBeforeScanEnding","Exclusions","USR1SignalAction","USR2SignalAction","LoggingConfigFilePath","Example","The following is an example of an ICAPSettings element.","&lt;ICAPSettings&gt;","&lt;Port&gt;1344&lt;/Port&gt;","&lt;ReqModeAddress&gt;req&lt;/ReqModeAddress&gt;","&lt;RespModeAddress&gt;resp&lt;/RespModeAddress&gt;","&lt;MaxIcapSessionsCount&gt;100&lt;/MaxIcapSessionsCount&gt;","&lt;ScanMaxFileSize&gt;0&lt;/ScanMaxFileSize&gt; &lt;!-- 0 = unlimited --&gt;","&lt;RAMUsageLimit&gt;0&lt;/RAMUsageLimit&gt; &lt;!-- 0 = unlimited --&gt;","&lt;Allow204&gt;0&lt;/Allow204&gt;","&lt;KeepAliveSettings&gt;&lt;!-- Support for processing multiple requests during one connection --&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","&lt;RequestingICAPHeaders&gt;","&lt;ICAPHeader&gt;HTTPUserNameICAPHeader&lt;/ICAPHeader&gt;","&lt;ICAPHeader&gt;HTTPClientIpICAPHeader&lt;/ICAPHeader&gt;","&lt;/RequestingICAPHeaders&gt;","&lt;HTTPClientIpICAPHeader&gt;X-Client-IP&lt;/HTTPClientIpICAPHeader&gt;","&lt;HTTPUserNameICAPHeader&gt;X-Client-Username&lt;/HTTPUserNameICAPHeader&gt;","&lt;VirusNameICAPHeader&gt;&lt;/VirusNameICAPHeader&gt;","&lt;DatabaseVersionICAPHeader&gt;X-AV-Database-time&lt;/DatabaseVersionICAPHeader&gt;","&lt;SendInfectionFoundICAPHeader&gt;0&lt;/SendInfectionFoundICAPHeader&gt;","&lt;SendResponseDescICAPHeader&gt;0&lt;/SendResponseDescICAPHeader&gt;","&lt;SendResponseInfoICAPHeader&gt;0&lt;/SendResponseInfoICAPHeader&gt;","&lt;SendViolationsFoundICAPHeader&gt;0&lt;/SendViolationsFoundICAPHeader&gt;","&lt;ScanInReqMode&gt;All&lt;/ScanInReqMode&gt;","&lt;ScanInRespMode&gt;Content&lt;/ScanInRespMode&gt;","&lt;RulesFilePath&gt;/opt/kaspersky/ScanEngine/icap_data/kavicapd_gui_rules.conf&lt;/RulesFilePath&gt;","&lt;CmdPath&gt;/opt/kaspersky/ScanEngine/icap_data/scripts&lt;/CmdPath&gt;","&lt;ResponsesPath&gt;/opt/kaspersky/ScanEngine/icap_data/templates&lt;/ResponsesPath&gt;","&lt;TransferBeforeScanEnding Delay=\"10\" ChunkSize=\"4\" BlockedUrlCacheEnabled=\"1\" BlockedUrlCacheKb=\"5000\" BlockedUrlCacheTtlSec=\"1800\"&gt;0&lt;/TransferBeforeScanEnding&gt;","&lt;Exclusions&gt;","&lt;!-- Signs of highly likely uninfected resources. --&gt;","&lt;!-- Note: ContentSize - more or equal (use only once), ContentType - as is, RequestURL - masks can be used --&gt;","&lt;!--","&lt;ContentSize&gt;102400&lt;/ContentSize&gt;","&lt;ContentType&gt;audio/mpeg&lt;/ContentType&gt;","&lt;ContentType&gt;image/jpeg&lt;/ContentType&gt;","&lt;RequestURL&gt;*.kaspersky.com/.*&lt;/RequestURL&gt;","	--&gt;","&lt;/Exclusions&gt;","&lt;!-- Possible values: update, reload, reopen-log (reopens syslog format log files) --&gt;","&lt;USR1SignalAction&gt;update&lt;/USR1SignalAction&gt; ","&lt;USR2SignalAction&gt;reopen-log&lt;/USR2SignalAction&gt;","&lt;!-- The path to the logging configuration file. Only this file will be used as the ICAP logging configuration file. If the LoggingConfigFilePath element has the empty value, the icapdkavlog.conf file located in the kavicapd binary file directory is used. --&gt;","&lt;LoggingConfigFilePath&gt;&lt;/LoggingConfigFilePath&gt;","&lt;/ICAPSettings&gt;","ICAPSettings","201129.htm");
Page[187]=new Array("Specifies the port number of Kaspersky Scan Engine.","Path","ICAPSettings &gt; Port","Attributes","This element has no attributes.","Value","The default value is 1344.","Example","The following is an example of this element.","&lt;Port&gt;1344&lt;/Port&gt;","Port","200716.htm");
Page[188]=new Array("The address that kavicapd uses to process requests in the request mode. This address is the part of the full URL, as shown in the following example:","icap://icap-server.example.com:1344/req","In the example above, the default value req is used. You can specify a different value in ReqModeAddress (for example, avscan):","icap://icap-server.example.com:1344/avscan","This element is optional.","Path","ICAPSettings &gt; ReqModeAddress","Attributes","This element has no attributes.","Values","The value must meet the following requirements:","1 to 16 characters long.","Valid characters:","Lowercase and uppercase Latin letters.","Special characters: _ and -. ","The default value is req.","Do not use the same value for ReqModeAddress and RespModeAddress.","Example","The following is an example of this element.","&lt;ReqModeAddress&gt;req&lt;/ReqModeAddress&gt;","ReqModeAddress","207194.htm");
Page[189]=new Array("The address that kavicapd uses to process responses in the response mode. This address is the part of the full URL, as shown in the following example:","icap://icap-server.example.com:1344/resp","In the example above, the default value resp is used. You can specify a different value in RespModeAddress (for example, avscan):","icap://icap-server.example.com:1344/avscan","This element is optional.","Path","ICAPSettings &gt; RespModeAddress","Attributes","This element has no attributes.","Values","The value must meet the following requirements:","1 to 16 characters long.","Valid characters:","Lowercase and uppercase Latin letters.","Special characters: _ and -. ","The default value is resp.","Do not use the same value for ReqModeAddress and RespModeAddress.","Example","The following is an example of this element.","&lt;RespModeAddress&gt;resp&lt;/RespModeAddress&gt;","RespModeAddress","207240.htm");
Page[190]=new Array("Specifies the maximum number of simultaneous connections to Kaspersky Scan Engine.","Path","ICAPSettings &gt; MaxIcapSessionsCount","Attributes","This element has no attributes.","Example","The following is an example of this element.","&lt;MaxIcapSessionsCount&gt;100&lt;/MaxIcapSessionsCount&gt;","MaxIcapSessionsCount","200717.htm");
Page[191]=new Array("Specifies the maximum amount of system memory, in kilobytes (KB) that can be allocated by Kaspersky Scan Engine.","Setting RAMUsageLimit is not recommended for machines with limited CPU performance. For example, when the scan engine is running on a virtual machine, and the CPU resources of the physical host are shared with other virtual machines or processes.","This measure prevents the operating system from running out of memory. Excessive use of system memory (in this case, RAM) can occur when Kaspersky Scan Engine scans large files or receives a lot of simultaneous scan requests. When the RAMUsageLimit limit is reached, Kaspersky Scan Engine stops processing the object that caused the excessive consumption of memory.","Path","ICAPSettings &gt; RAMUsageLimit","Attributes","This element has no attributes.","Value","The recommended RAMUsageLimit value:","does not exceed the RAM size.","is twice the maximum file size for scanning large files. For example, scanning a 1 GB file requires about 2 GB of RAM.","is not less than 600 MB, which is twice the size of the anti-virus database and Kaspersky Scan Engine libraries (300 MB in total). The reason for doubling is that the amount of system memory is doubled when the database is reloaded.","Kaspersky Scan Engine also requires memory resources for all of its components.","Do not set the value of RAMUsageLimit lower than 7 MB. This is the minimum amount of system memory required to ensure the proper functioning of Kaspersky Scan Engine.","If the value of this parameter is 0, the amount of system memory that can be allocated by Kaspersky Scan Engine is not limited.","The default value is 0.","If the value of this parameter is set to 0, the operating system may run out of memory. If Kaspersky Scan Engine uses too much system memory, the operating system may stop the service. ","Example","The following is an example of this element.","&lt;RAMUsageLimit&gt;0&lt;/RAMUsageLimit&gt; &lt;!-- 0 = unlimited --&gt;","RAMUsageLimit","201149.htm");
Page[192]=new Array("Specifies the maximum size (in kilobytes) of a file that can be scanned by Kaspersky Scan Engine.","Path","ICAPSettings &gt; ScanMaxFileSize","Attributes","This element has no attributes.","Value","If the value of this parameter is 0, Kaspersky Scan Engine will scan files of any size.","If you specify the value for the ContentSize parameter, Kaspersky Scan Engine will use it instead of the value of ScanMaxFileSize. This applies both to requests made in preview mode and regular requests.","The default value is 0.","Example","The following is an example of this element.","&lt;ScanMaxFileSize&gt;0&lt;/ScanMaxFileSize&gt; &lt;!-- 0 = unlimited --&gt;","ScanMaxFileSize","200719.htm");
Page[193]=new Array("A Boolean value that defines whether Kaspersky Scan Engine sends a 204 No Content HTTP status code instead of unchanged data to the proxy server.","Path","ICAPSettings &gt; Allow204","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","Allow204 element possible values","Value","Description","0","Kaspersky Scan Engine returns unchanged data.","1","Kaspersky Scan Engine returns a 204 No Content HTTP status code instead of unchanged data.","Example","The following is an example of this element.","&lt;Allow204&gt;0&lt;/Allow204&gt;","Allow204","200720.htm");
Page[194]=new Array("By default, Kaspersky Scan Engine supports Keep-Alive (persistent connections), so an ICAP client can use the same connection to send multiple requests. With KeepAliveSettings, you can configure Keep-Alive support or even disable it.","Path","ICAPSettings &gt; KeepAliveSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","Enabled","TimeoutMs","MaxRequests","UseAlways","Example","The following is an example of this element.","&lt;KeepAliveSettings&gt;","&lt;Enabled&gt;1&lt;/Enabled&gt;","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","&lt;/KeepAliveSettings&gt;","KeepAliveSettings","207291.htm");
Page[195]=new Array("Specifies if Keep-Alive support is enabled or disabled.","This element is optional.","Path","ICAPSettings &gt; KeepAliveSettings &gt; Enabled","Attributes","This element has no attributes.","Value","Valid values:","0 - Keep-Alive support is disabled.","1 - Keep-Alive support is enabled.","The default value is 1.","Example","The following is an example of this element.","&lt;Enabled&gt;1&lt;/Enabled&gt;","Enabled","207292.htm");
Page[196]=new Array("The amount of time an idle connection has to be kept open (in milliseconds), while waiting for a new request from an ICAP client.","This element is optional.","Path","ICAPSettings &gt; KeepAliveSettings &gt; TimeoutMs","Attributes","This element has no attributes.","Value","The valid value is an integer from 0 to 18000 (milliseconds).","If TimeoutMs is set to 0, there is no time limit for the connection.","The default value is 5000.","Example","The following is an example of this element.","&lt;TimeoutMs&gt;5000&lt;/TimeoutMs&gt;","TimeoutMs","207298.htm");
Page[197]=new Array("The maximum number of requests for one connection before the connection is closed.","This element is optional.","Path","ICAPSettings &gt; KeepAliveSettings &gt; MaxRequests","Attributes","This element has no attributes.","Value","The valid value is an integer from 0 to 1000.","If MaxRequests is set to 0, the number of requests for one connection is not limited.","The default value is 1000.","Example","The following is an example of this element.","&lt;MaxRequests&gt;1000&lt;/MaxRequests&gt;","MaxRequests","207303.htm");
Page[198]=new Array("Specifies if Kaspersky Scan Engine always uses a Keep-Alive connection, even when ICAP clients do not request it. ","This element is optional.","Path","ICAPSettings &gt; KeepAliveSettings &gt; UseAlways","Attributes","This element has no attributes.","Value","Valid values:","0 - Kaspersky Scan Engine uses a Keep-Alive connection only when ICAP clients request it.","1 - Kaspersky Scan Engine always uses a Keep-Alive connection.","The default value is 0.","Example","The following is an example of this element.","&lt;UseAlways&gt;0&lt;/UseAlways&gt;","UseAlways","221376.htm");
Page[199]=new Array("Indicates whether Kaspersky Scan Engine must include the X-Include header in its response to the OPTIONS request from the ICAP client.","This element is optional and it can be empty. If the element is empty, Kaspersky Scan Engine does not include the X-Include header in responses.","Path","ICAPSettings &gt; RequestingICAPHeaders","Nested elements","This element is a container for the ICAPHeader nested elements.","Example","The following is an example of this element.","&lt;RequestingICAPHeaders&gt;","&lt;ICAPHeader&gt;HTTPUserNameICAPHeader&lt;/ICAPHeader&gt;","&lt;ICAPHeader&gt;HTTPClientIpICAPHeader&lt;/ICAPHeader&gt;","&lt;/RequestingICAPHeaders&gt;","RequestingICAPHeaders","225221.htm");
Page[200]=new Array("Indicates whether Kaspersky Scan Engine must include the headers specified in HTTPUserNameICAPHeader and HTTPClientIpICAPHeader in its response to the OPTIONS request from the ICAP client.","This element cannot be empty.","Path","ICAPSettings &gt; RequestingICAPHeaders &gt; ICAPHeader","Value","ICAPHeader element possible values","Value","Description","HTTPUserNameICAPHeader","Kaspersky Scan Engine includes the value specified in HTTPUserNameICAPHeader in the X-Include response header field.","HTTPClientIpICAPHeader","Kaspersky Scan Engine includes the value specified in HTTPClientIpICAPHeader in the X-Include response header field.","Example","The following is an example of this element.","&lt;ICAPHeader&gt;HTTPUserNameICAPHeader&lt;/ICAPHeader&gt;","ICAPHeader","225222.htm");
Page[201]=new Array("Specifies the name of the header field in which the IP address of the HTTP client is contained.","The field name must consist of characters allowed for header field names according to RFC 7230.","This element is optional. ","Path","ICAPSettings &gt; HTTPClientIpICAPHeader","Attributes","This element has no attributes.","Value","This element can have an empty value.","Example","The following is an example of this element.","&lt;HTTPClientIpICAPHeader&gt;X-Client-IP&lt;/HTTPClientIpICAPHeader&gt;","HTTPClientIpICAPHeader","200726.htm");
Page[202]=new Array("Specifies the name of the header field in which the name of the HTTP client is contained.","The field name must consist of the characters allowed for header field names according to RFC 7230.","This element is optional. ","Path","ICAPSettings &gt; HTTPUserNameICAPHeader","Attributes","This element has no attributes.","Value","This element can have an empty value.","Example","The following is an example of this element.","&lt;HTTPUserNameICAPHeader&gt;X-Client-Username&lt;/HTTPUserNameICAPHeader&gt;","HTTPUserNameICAPHeader","200727.htm");
Page[203]=new Array("Specifies the name of the header field in which the name of the detected threat or a type of legitimate software that can be used by intruders is contained.","The field name must consist of the characters allowed for header field names according to RFC 7230.","The header field contains several names if more than one object is detected in a request that has passed through a proxy server for scanning. Multiple names are specified in any order and separated by a comma (\",\"). ","The maximum size of a value that can be contained in the header field is 10 KB (kilobytes). ","This element is optional.","Path","ICAPSettings &gt; VirusNameICAPHeader","Attributes","This element has no attributes.","Values","This element can have an empty value. If nothing is detected during scanning, the field specified in the VirusNameICAPHeader  element is absent from the response header. ","Example","The following is an example of this element.","&lt;VirusNameICAPHeader&gt;X-Virus-ID&lt;/VirusNameICAPHeader&gt;","VirusNameICAPHeader","201214.htm");
Page[204]=new Array("Specifies the name of the response header field that contains information about the anti-virus database version used by Kaspersky Scan Engine to scan objects.","This element is optional.","Path","ICAPSettings &gt; DatabaseVersionICAPHeader","Value","The value must consist of characters allowed for header field names according to RFC 7230.","Example","The following is an example of this element.","&lt;DatabaseVersionICAPHeader&gt;X-AV-Database-time&lt;/DatabaseVersionICAPHeader&gt;","DatabaseVersionICAPHeader","225156.htm");
Page[205]=new Array("Specifies whether Kaspersky Scan Engine includes the X-Infection-Found header in its response to the ICAP client. ","This is an optional element. If this element is absent from the configuration file, the 0 value is used.","Path","ICAPSettings &gt; SendInfectionFoundICAPHeader","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","SendInfectionFoundICAPHeader element possible values","Value","Description","1","Include the X-Infection-Found header in responses to the ICAP client.","0","Do not include the X-Infection-Found header in responses to the ICAP client.","Example","The following is an example of this element.","&lt;SendInfectionFoundICAPHeader&gt;1&lt;/SendInfectionFoundICAPHeader&gt;","SendInfectionFoundICAPHeader","221147.htm");
Page[206]=new Array("Specifies whether Kaspersky Scan Engine includes the X-Response-Desc header in its response to the ICAP client. ","This is an optional element. If this element is absent from the configuration file, the 0 value is used.","Path","ICAPSettings &gt; SendResponseDescICAPHeader","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","SendResponseDescICAPHeader element possible values","Value","Description","1","Include the X-Response-Desc header in responses to the ICAP client.","0","Do not include the X-Response-Desc header in responses to the ICAP client.","Example","The following is an example of this element.","&lt;SendResponseDescICAPHeader&gt;1&lt;/SendResponseDescICAPHeader&gt;","SendResponseDescICAPHeader","221160.htm");
Page[207]=new Array("Specifies whether Kaspersky Scan Engine includes the X-Response-Info header in its response to the ICAP client. ","This is an optional element. If this element is absent from the configuration file, the 0 value is used.","Path","ICAPSettings &gt; SendResponseInfoICAPHeader","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","SendResponseInfoICAPHeader element possible values","Value","Description","1","Include the X-Response-Info header in responses to the ICAP client.","0","Do not include the X-Response-Info header in responses to the ICAP client.","Example","The following is an example of this element.","&lt;SendResponseInfoICAPHeader&gt;1&lt;/SendResponseInfoICAPHeader&gt;","SendResponseInfoICAPHeader","221161.htm");
Page[208]=new Array("Specifies whether Kaspersky Scan Engine includes the X-Violations-Found header in its response to the ICAP client. ","This is an optional element. If this element is absent from the configuration file, the 0 value is used.","Path","ICAPSettings &gt; SendViolationsFoundICAPHeader","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","SendViolationsFoundICAPHeader element possible values","Value","Description","1","Include the X-Violations-Found header in responses to the ICAP client.","0","Do not include the X-Violations-Found header in responses to the ICAP client.","Example","The following is an example of this element.","&lt;SendViolationsFoundICAPHeader&gt;1&lt;/SendViolationsFoundICAPHeader&gt;","SendViolationsFoundICAPHeader","221162.htm");
Page[209]=new Array("Specifies the types of content that Kaspersky Scan Engine must scan in request modification (REQMOD) mode.","This is an optional element. If this element is absent from the configuration file, the All value is used.","Path","ICAPSettings &gt; ScanInReqMode","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","ScanInReqMode element possible values","Value","Description","Content","Only scan the HTTP message body.","Url","Only scan the requested URL.","All","Scan the HTTP message body and the requested URL.","This value is default.","Empty value","Do not scan HTTP messages in request modification (REQMOD) mode.","Example","The following is an example of this element.","&lt;ScanInReqMode&gt;All&lt;/ScanInReqMode&gt;","ScanInReqMode","200721.htm");
Page[210]=new Array("Specifies the types of content that Kaspersky Scan Engine must scan in response modification (RESPMOD) mode.","This is an optional element. If this element is absent from the configuration file, the All value is used.","Path","ICAPSettings &gt; ScanInRespMode","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","ScanInRespMode element possible values","Value","Description","Content","Only scan the HTTP message body.","Url","Only scan the requested URL.","All","Scan the HTTP message body and the requested URL.","This value is default.","Empty value","Do not scan HTTP messages in response modification (RESPMOD) mode.","Example","The following is an example of this element.","&lt;ScanInRespMode&gt;All&lt;/ScanInRespMode&gt;","ScanInRespMode","200722.htm");
Page[211]=new Array("Specifies an absolute path to a file that contains service action rules.","Path","ICAPSettings &gt; RulesFilePath","Attributes","This element has no attributes.","Value","The default value is /opt/kaspersky/ScanEngine/icap_data/kavicapd_gui_rules.conf.","Example","The following is an example of this element.","&lt;RulesFilePath&gt;/opt/kaspersky/ScanEngine/icap_data/kavicapd_gui_rules.conf&lt;/RulesFilePath&gt;","RulesFilePath","201153.htm");
Page[212]=new Array("Specifies an absolute path to a directory containing scripts that can be executed when the corresponding rules are triggered.","Path","ICAPSettings &gt; CmdPath","Attributes","This element has no attributes.","Value","The default value is /opt/kaspersky/ScanEngine/icap_data/scripts.","Example","The following is an example of this element.","&lt;CmdPath&gt;/opt/kaspersky/ScanEngine/icap_data/scripts&lt;/CmdPath&gt;","CmdPath","201154.htm");
Page[213]=new Array("Specifies an absolute path to a directory containing response templates that can be executed when the corresponding rules are triggered.","Path","ICAPSettings &gt; ResponsesPath","Attributes","This element has no attributes.","Value","The default value is /opt/kaspersky/ScanEngine/icap_data/templates.","Example","The following is an example of this element.","&lt;ResponsesPath&gt;/opt/kaspersky/ScanEngine/icap_data/templates&lt;/ResponsesPath&gt;","ResponsesPath","201155.htm");
Page[214]=new Array("Specifies Partial mode (Data Trickling) for the files that are sent to the proxy server. This mode allows the scanning of files as a whole and partially sending them to a user before the scan is finished. Object transferring starts after as many seconds after the object receiving starts as specified in the Delay attribute and is performed in chunks. Notice that no more than one chunk per second is transferred. This feature is necessary to prevent a user's browser from interrupting the connection to the proxy server due to the timeout.","Path","ICAPSettings &gt; TransferBeforeScanEnding","Attributes","This element has the following attributes.","TransferBeforeScanEnding element attributes","Attribute","Description","Delay","The interval (in seconds) between the start of receiving an object and the start of sending its first chunk.","Optional attribute. The range of possible values is from 1 to 3600.","The preset value is 10.","ChunkSize","Size of the transferred chunks in the period between the start of receiving the object and the end of scanning. Since chunks are transferred no more than one per second, ChunkSize specifies the maximum transfer speed (in kilobytes per second) until the scan is completed. After that, if the object is clean, the rest of the object transfers without a speed limit.","Optional attribute. The range of possible values is from 1 to 1024.","The preset value is 4.","BlockedUrlCacheEnabled","Specifies how re-download attempts from a user's browser must be handled in the Partial mode. This feature is necessary to prevent a user's browser from automatically re-downloading the blocked files. The re-downloading prevention mechanism works only when the TransferBeforeScanEnding option is enabled.","You can specify one of the following values for the attribute:","0","Re-downloading prevention mechanism is disabled.","1","Re-downloading prevention mechanism is enabled. This value is preset.","If this attribute is omitted, the re-downloading prevention mechanism is enabled.","BlockedUrlCacheKb","Maximum cache size for blocked URLs, in KB. This is the maximum amount of RAM that can be allocated for a blocked URL's cache.","The range of possible values is from 1 to 100000.","The preset value is 5000.","If this attribute is omitted, the preset value is used.","BlockedUrlCacheTtlSec","Lifetime for blocked URLs in the cache, in seconds.","The range of possible values is from 1 to 604800 (one week).","The preset value is 1800.","If this attribute is omitted, the preset value is used.","Choose the appropriate values for the ChunkSize and the Delay attributes. Therefore, it is not recommended to specify a too large ChunkSize value and a too small Delay value. If this recommendation is not followed, the scanned object can be sent almost wholly (without the last chunk) long before the end of the scan and the user's browser will interrupt the connection.","Possible values","This element has the following possible values.","TransferBeforeScanEnding element possible values","Value","Description","0","The file is sent only after the scanning ends.","This value is preset.","1","The file can be sent before the scanning ends.","Example","The following is an example of this element.","&lt;TransferBeforeScanEnding Delay=\"10\" ChunkSize=\"4\" BlockedURLCacheEnabled=\"1\" BlockedURLCacheKb=\"5000\" BlockedURLCacheTtlSec=\"1800\"&gt;1&lt;/TransferBeforeScanEnding&gt;","TransferBeforeScanEnding","201208.htm");
Page[215]=new Array("Specifies the rules for the preview mode. This feature allows the ICAP client to send preview requests to the ICAP server, and then not to scan the objects that are not considered malicious.","If at least one of these parameters is specified, the ICAP plug-in will process requests in the preview mode. To allow a proxy server to send requests in this mode, change its settings accordingly. ","Notice that If you turn on preview mode in the ICAP plug-in, but not in the proxy server, Kaspersky Scan Engine will process HTTP requests as if preview mode is not enabled.","Path","ICAPSettings &gt; Exclusions","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","ContentSize","ContentType","RequestURL","If the object to scan complies with at least one of the rules above, the ICAP plug-in returns the code 204, regardless of the value that the Allow204 parameter of the kavicapd.xml file contains. If the object to scan does not comply with any of the rules, the ICAP plug-in returns the error code 100, and then waits for the ICAP client to send this object.","Example","The following is an example of this element.","&lt;Exclusions&gt;","&lt;ContentSize&gt;2048&lt;/ContentSize&gt;","&lt;ContentType&gt;video/mp4&lt;/ContentType&gt; ","&lt;RequestURL&gt;example.com&lt;/RequestURL&gt;","&lt;/Exclusions&gt;","Exclusions","200729.htm");
Page[216]=new Array("The exclusion rule for the size (KB) of the transmitted object.","You can set this parameter only once. This parameter may be absent if you explicitly omitted it.","Path","ICAPSettings &gt; Exclusions &gt; ContentSize","Attributes","This element has no attributes.","Value","If the Content-Length header is present in the HTTP request, ContentSize is compared to its value. Otherwise, ContentSize is compared to the real size of the object. If any of these values are equal to or greater than the ContentSize value, the ICAP plug-in does not scan this object. This applies both to requests made in preview mode and regular requests.","If you specify the value for the ContentSize parameter, Kaspersky Scan Engine will use it instead of the value of ScanMaxFileSize.","Example","The following is an example of this element.","&lt;ContentSize&gt;2048&lt;/ContentSize&gt;","ContentSize","200813.htm");
Page[217]=new Array("The exclusion rule for the object type that is specified in the Content-Type field.","You can set this parameter one or more times. The ICAP plug-in will check all of these parameters. This parameter may be absent if you explicitly omitted it.","Path","ICAPSettings &gt; Exclusions &gt; ContentType","Attributes","This element has no attributes.","Value","If the Content-Type field contains the value that is specified at the ContentType element, the ICAP plug-in does not scan this object. ","Example","The following is an example of this element.","&lt;ContentType&gt;video/mp4&lt;/ContentType&gt; ","ContentType","200814.htm");
Page[218]=new Array("URL to skip.","You can set this parameter one or more times. The ICAP plug-in will check all of these parameters. ","Path","ICAPSettings &gt; Exclusions &gt; RequestURL","Attributes","This element has no attributes.","Value","The specified URL must not include scheme, query, and fragment components. If the requested URL matches with at least one of the RequestURL element values, the ICAP plug-in does not scan this URL. Before matching the requested URL with the rule value from the RequestURL field, the ICAP plug-in applies normalizing rules to this URL.","The RequestURL parameter may contain masks.","You can specify the asterisk (*) wildcard character as a substitute for a sequence of characters that constitute an entire domain name from the third level of the domain and above. For example, *.domain.com. This value includes all subdomains of domain.com.","The asterisk (*) and question mark (?) wildcard characters can be used in a path component of the URL to substitute for any sequence of characters, or a single character, respectively. For example, domain.com/test/page/*.","Example","The following is an example of this element.","&lt;RequestURL&gt;example.com&lt;/RequestURL&gt;","RequestURL","200815.htm");
Page[219]=new Array("Specifies an action that must be performed on receiving the SIGUSR1 signal.","If this parameter is not specified in the configuration file, the ICAP service updates the database on receiving the signal.","Path","ICAPSettings &gt; USR1SignalAction","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","USR1SignalAction element possible values","Value","Description","reload","Reloads the database without updating it. It is assumed that the files in the database directory are already up to date and must be reloaded.","update","Updates and reloads the database by using the built-in functionality of Kaspersky Scan Engine.","reopen-log","Closes all log files in the syslog format that are being opened, then opens them again for writing logs at the end of these files. If the files are missed, the ICAP plug-in will create them. This setting allows rotating logs by using the logrotate utility in default mode or when the create directive is used.","Example","The following is an example of this element.","&lt;USR1SignalAction&gt;update&lt;/USR1SignalAction&gt; ","USR1SignalAction","201163.htm");
Page[220]=new Array("Specifies an action that must be performed on receiving the SIGUSR2 signal.","If this parameter is not specified in the configuration file, the ICAP service updates the database on receiving the signal.","Path","ICAPSettings &gt; USR2SignalAction","Attributes","This element has no attributes.","Possible values","This element has the following possible values.","USR2SignalAction element possible values","Value","Description","reload","Reloads the database without updating it. It is assumed that the files in the database directory are already up to date and must be reloaded.","update","Updates and reloads the database by using the built-in functionality of Kaspersky Scan Engine.","reopen-log","Closes all log files in syslog format that are being opened, then opens them again for writing logs at the end of these files. If the files are missed, the ICAP plug-in will create them. This setting allows rotating the logs by using the logrotate utility in default mode or when the create directive is used.","Example","The following is an example of this element.","&lt;USR2SignalAction&gt;reopen-log&lt;/USR2SignalAction&gt; ","USR2SignalAction","201164.htm");
Page[221]=new Array("Specifies the path to the logging configuration file.","Path","ICAPSettings &gt; LoggingConfigFilePath","Attributes","This element has no attributes.","Value","You can use the logging configuration file located in the kavicapd binary file directory or place this file in any other directory:","To use the logging configuration file located in the kavicapd binary file directory, leave the value of the LoggingConfigFilePath element empty.","To place the logging configuration file in any other directory, specify the path to this file. Notice that the service interprets this value as the path to the file, not the path to the directory. Also, you can specify the path relative to the directory that holds kavicapd executable file.","Example","The following is an example of this element.","&lt;!-- The path to the logging configuration file. Only this file will be used as the ICAP logging configuration file. If the LoggingConfigFilePath element has an empty value, the icapdkavlog.conf file located in the kavicapd binary file directory is used. --&gt;","&lt;LoggingConfigFilePath&gt;&lt;/LoggingConfigFilePath&gt;","LoggingConfigFilePath","200730.htm");
Page[222]=new Array("Specifies Format Recognizer settings. ","Path","FormatRecognizerSettings","Attributes","This element has no attributes.","Nested elements","This element is a container for the following nested elements:","FormatsToSkipScanning","Specifies which file formats must not be scanned by Kaspersky Scan Engine in ICAP mode.","To disable the format skipping functionality, remove the FormatRecognizerSettings section from the configuration file or leave the FormatsToSkipScanning list empty.","Example","The following is an example of a FormatRecognizerSettings element.","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","&lt;KAV_FF_GENERAL_CSV/&gt;","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt;","FormatRecognizerSettings","206616.htm");
Page[223]=new Array("Format Recognizer is a component that can be used in Kaspersky Scan Engine to recognize and skip files of certain formats during the scanning process. Skipping files increases the processing speed of Kaspersky Scan Engine.","Enabling Format Recognizer","To enable Format Recognizer:","In the ICAP mode configuration file, locate the FormatRecognizerSettings section.","If this section is missing, add it manually as follows:","&lt;FormatRecognizerSettings&gt;","...","&lt;/FormatRecognizerSettings&gt;  ","Within this section, in the FormatsToSkipScanning list, specify which file formats must not be scanned by Kaspersky Scan Engine, as follows:","&lt;FormatRecognizerSettings&gt;","&lt;FormatsToSkipScanning&gt;","&lt;KAV_FF_GENERAL_TXT/&gt;","...","&lt;KAV_FF_AUDIO_WMA/&gt;","&lt;/FormatsToSkipScanning&gt;","&lt;/FormatRecognizerSettings&gt;","For the changes to take effect, restart the kavicapd service with the following command:","service kavicapd restart","Format Recognizer will start recognizing and skipping files of the formats specified in the FormatsToSkipScanning list. Kaspersky Scan Engine will not scan the skipped files, which will increase its processing speed.","Disabling Format Recognizer","To disable Format Recognizer:","In the ICAP mode configuration file, remove the FormatRecognizerSettings section or leave the FormatsToSkipScanning list empty.","For the changes to take effect, restart the kavicapd service with the following command:","service kavicapd restart","Configuring Format Recognizer for use in ICAP mode","206590.htm");
Page[224]=new Array("Rules define the behavior of Kaspersky Scan Engine in ICAP mode. These rules are listed in a service rules configuration file located in the /opt/kaspersky/ScanEngine/icap_data/ directory. The location of this file is specified in the RulesFilePath parameter of the ICAP mode configuration file. A sample configuration file, kavicapd_gui_rules.conf, is included in the distribution kit.","Each rule listed in the configuration file must be placed on a separate line.","Rule syntax","A kavicapd service rule consists of three parts:","ICAP mode","Possible values: ","REQ","Request modification (REQMOD) mode","RESP","Response modification (RESPMOD) mode","ANY","Any of the modes listed above","Scan result","Possible values are listed below.","Possible values:","NON_SCANNED","The object was not scanned.","FAILED","Scan failed.","PHISHING","A phishing web address is detected.","DETECT","The scanned object or URL is infected.","MACRO","A Microsoft Office document containing a macro is detected.","CLEAN","The scanned object is clean (non-infected).","Response of Kaspersky Scan Engine in ICAP mode","Possible values:","SET_RESP=&lt;response_template&gt;","Kaspersky Scan Engine sends an HTML response template with the specified name to a proxy server.","EXEC_CMD=&lt;script&gt;","Kaspersky Scan Engine executes a script with the specified name.","NONE","Kaspersky Scan Engine does not modify the scanned object.","If the Kaspersky Scan Engine response is not specified in a rule, the default value of NONE is used. ","Understanding scan results","In ICAP mode, Kaspersky Scan Engine scans both HTTP traffic and web addresses requested by users. Scan results are ranked by severity, with the most severe result having the rank of 1. The following list shows the ranking of supported scan results by severity:","PHISHING","DETECT","MACRO","NON_SCANNED","FAILED","CLEAN","If a traffic scan and a URL scan produce different scan results, the result with the highest severity level is chosen as the summary scan result. If both scan results are DETECT, the summary scan result is also DETECT, and the name of the detected object returned by Kaspersky Scan Engine is taken from the result of a URL scan. The scan results used in service rules are summary scan results.","Sample rules","Below are a few sample rules that you can specify:","RESP DETECT SET_RESP=detect_resp EXEC_CMD=admin_notify","RESP FAILED SET_RESP=err_resp","REQ FAILED EXEC_CMD=admin_notify","REQ CLEAN","Configuring service rules","179893.htm");
Page[225]=new Array("You can configure Kaspersky Scan Engine by changing one or more variables in its unit file, %distr_kit%/etc/kavicapd.service.","Changing the path to the Kaspersky Scan Engine PID file","You can change this variable if you want to create a PID file of Kaspersky Scan Engine in a directory other than /var/run/kavicapd.pid.","The following example shows how this variable is set in the unit file:","PIDFile=/var/run/kavicapd.pid","Changing environment variables","You must change these environment variables if Kaspersky Scan Engine is located in a directory other than /opt/kaspersky/ScanEngine.","The unit file uses the following environment variables:","SDKPATH&#8212;Specifies the directory where Kaspersky Scan Engine is located. The following example shows how this variable is set in the unit file:","Environment=SDKPATH=/opt/kaspersky/ScanEngine","KL_PLUGINS_PATH&#8212;Specifies the path to the directory containing the PPL plug-in files used by Kaspersky Scan Engine. The following example shows how this variable is set in the unit file:","Environment=KL_PLUGINS_PATH=/ppl","LD_LIBRARY_PATH&#8212;Specifies the path to the directory containing shared libraries used by Kaspersky Scan Engine. The following block shows how this variable is set in the unit file:","Environment=LD_LIBRARY_PATH=/lib:/ppl","Changing paths in the command executed on kavicapd startup","You must change paths in the command executed on kavicapd startup if you put the kavicapd executable file or the ICAP mode configuration file in directories different from the ones specified in the unit file, or if you want to create a PID file of Kaspersky Scan Engine in a directory other from /var/run/kavicapd.pid.","The following example shows how this command is set in the unit file:","ExecStart=/bin/sh -c 'cd ${SDKPATH}/bin; ./kavicapd -c /etc/kavicapd.xml -p /var/run/kavicapd.pid'","Changing variables in the ICAP mode unit file","192475.htm");
Page[226]=new Array("Rules allow you to specify response templates that can be returned in place of blocked web pages, and to specify scripts that can be executed upon detection, for example, to notify the system administrator. ","The Kaspersky Scan Engine distribution package contains sample response templates and a sample script that sends information about an incident to syslog.","Working with response templates","Kaspersky Scan Engine is shipped with the following sample response templates located in the /opt/kaspersky/ScanEngine/icap_data/templates directory: ","detect_req ","This template is returned when a threat or a type of legitimate software that can be used by intruders to damage a user's computer or personal data is detected in request modification (REQMOD) mode. ","detect_res ","This template is returned when a threat or a type of legitimate software that can be used by intruders to damage a user's computer or personal data is detected in response modification (RESPMOD) mode.","macro_req","This template is returned when a Microsoft Office document file that contains a macro is detected in the request modification (REQMOD) mode.","macro_resp","This template is returned when a Microsoft Office document file that contains a macro is detected in the response modification (RESPMOD) mode.","You can create custom response templates and configure Kaspersky Scan Engine to return them with the modified message. Like sample response templates, custom response templates can use a detection context that provides additional information to a user. For more information on the detection context, see subsection \"Using the detection context in response templates and scripts\" below.","Even though Kaspersky Scan Engine returns response templates in place of blocked web pages, some browsers may not display these templates, returning a 403 Forbidden HTTP status code instead.","Working with scripts","Kaspersky Scan Engine is shipped with a send_syslog script located in the /opt/kaspersky/ScanEngine/icap_data/scripts directory.","The send_syslog script displays a message about a detected object and redirects the message to logger. ","You can create custom shell scripts and configure Kaspersky Scan Engine to execute them upon detection. Like the sample script, custom scripts can use the detection context that provides additional information to a user. For more information on the detection context, see subsection \"Using the detection context in response templates and scripts\" below.","Custom scripts run in parallel threads. The maximum number of these threads is 100.","Using the detection context in response templates and scripts","Response templates and scripts support the detection context. When a response template is displayed, context variables are replaced with values returned by Kaspersky Scan Engine. To use the detection context in a script, reference context variables as environment variables.","The following variables are supported in the detection context:","_VirusName_&#8212;Name of the detected object.","_DateTime_&#8212;Date and time of the incident (in the YYYY-MM-DD HH:MM:MS format).","_ICAPDVersion_&#8212;Version of the ICAP plug-in. ","_URL_&#8212;Requested URL.","You can use the detection context in custom response templates and scripts.","Working with response templates and scripts","179895.htm");
Page[227]=new Array("Before the kavicapd service is ready to run, the following paths must be specified:","Plug-in path","Path to a directory with PPL plug-in files.","Library path","Path to a directory with shared libraries.","The paths to plug-ins and shared libraries can be specified by exporting the KL_PLUGINS_PATH and LD_LIBRARY_PATH environment variables, respectively.","The KL_PLUGINS_PATH and LD_LIBRARY_PATH variables can be exported manually, or automatically by using the ICAP systemd unit file. You can also use the kavicapd.sh shell script, which exports KL_PLUGINS_PATH and LD_LIBRARY_PATH and starts the kavicapd service.","Specifying the path to plug-ins and libraries manually","This method requires exporting the variables each time before you start the kavicapd service in a new session (the variables only exist during the current shell session). ","The following example shows how to export the variables manually:","[user@host ~]$ export KL_PLUGINS_PATH=\"/opt/kaspersky/ScanEngine/ppl\"","[user@host&nbsp;~]$&nbsp;export&nbsp;LD_LIBRARY_PATH=\"/opt/kaspersky/ScanEngine/lib:${KL_PLUGINS_PATH}:${LD_LIBRARY_PATH}\"","Specifying the path to plug-ins and libraries with the kavicapd.sh shell script","You can modify kavicapd.sh so that it exports the variables automatically. ","To export the variables by means of the kavicapd.sh shell script:","Open kavicapd.sh for editing and locate the following lines:","SDK_PATH=$PWD/../../../..","KL_PLUGINS_PATH=$SDK_PATH/ppl","LD_LIBRARY_PATH=$SDK_PATH/lib:$KL_PLUGINS_PATH:$LD_LIBRARY_PATH ","Change the values of SDKPATH, KL_PLUGINS_PATH, and LD_LIBRARY_PATH to point to the location of the KAV SDK directory, plug-in directory, and libraries directory, respectively.","The kavicapd.sh shell script will export the variables when it is executed.","Specifying paths to plug-ins and libraries","179897.htm");
Page[228]=new Array("This section describes how to run Kaspersky Scan Engine in ICAP mode.","Running Kaspersky Scan Engine in ICAP mode","192990.htm");
Page[229]=new Array("You can run the Kaspersky Scan Engine in ICAP mode by using the kavicapd.service unit file for systemd. The unit file allows you to add the kavicapd service to the service startup list and to manage the service manually from the command line.","This section assumes that you want to add the kavicapd service for all users. For information on how to add and manage a service under a specific user, please see the official documentation for systemd and systemctl.","Starting Kaspersky Scan Engine automatically","To start Kaspersky Scan Engine automatically, add kavicapd to the service startup list.","To add kavicapd to the service startup list:","Place the kavicapd.service unit file in the /etc/systemd/system/ directory.","If necessary, edit the unit file.","Reload systemd by running the following command:","systemctl daemon-reload","Make sure that the kavicapd.service unit file is installed by running the following command:","systemctl list-unit-files","Enable kavicapd to launch when the system starts by running the following command:","systemctl enable kavicapd.service","Getting the status of the kavicapd service","To get the status of the kavicapd service, run the following command:","service kavicapd status","Remove Kaspersky Scan Engine from the service startup list","To remove kavicapd from the service startup list, run the following command:","systemctl disable kavicapd.service","Managing Kaspersky Scan Engine with systemd from the terminal","To start kavicapd without rebooting the computer, run the following command:","systemctl start kavicapd","To stop kavicapd without rebooting the computer, run the following command:","systemctl stop kavicapd","To update the anti-virus database, run the following command:","systemctl reload kavicapd","Running Kaspersky Scan Engine in ICAP mode with the systemd unit file","192397.htm");
Page[230]=new Array("You can run the kavicapd service by executing the kavicapd binary file manually.","Before executing the file, make sure that the paths to the directories that contain plug-ins and libraries are specified correctly.","The following options are available when the kavicapd service is run manually:","Options for running the kavicapd binary file","Option","Description","-c &lt;path&gt;","Mandatory parameter.","Specifies the path to the ICAP mode configuration file.","The path can be absolute or relative. The relative path is specified relative to the current working directory.","-p &lt;path&gt;","Mandatory parameter.","Specifies the path to the PID file. ","The path can be absolute or relative. The relative path is specified relative to the current working directory.","-w","Optional parameter.","Runs the kavicapd service in watchdog mode.","In this mode, the kavicapd service automatically restarts if it freezes or crashes.","If you execute the kavicapd binary file without specifying any option, the list of supported options is displayed.","Running Kaspersky Scan Engine in ICAP mode manually","179900.htm");
Page[231]=new Array("You can run the kavicapd service by executing the /opt/kaspersky/ScanEngine/bin/kavicapd.sh shell script manually. Before executing the script, make sure that the paths to the directories that contain plug-ins and libraries are specified correctly.","Running Kaspersky Scan Engine in ICAP mode with kavicapd shell script","179901.htm");
Page[232]=new Array("X-Include","Kaspersky Scan Engine includes this header in its response to the OPTIONS request from the ICAP client when the following conditions are met:","There is at least one ICAPHeader element and it contains either the HTTPUserNameICAPHeader or HTTPClientIpICAPHeader value:","If HTTPUserNameICAPHeader is specified in ICAPHeader, there must be the HTTPUserNameICAPHeader element and it should not be empty.","If HTTPClientIpICAPHeader is specified in ICAPHeader, there must be the HTTPClientIpICAPHeader element and it should not be empty.","The X-Include header includes headers specified in HTTPUserNameICAPHeader and HTTPClientIpICAPHeader as a comma-separated list. The default values for these headers are X-Client-Username and X-Client-IP respectively. The following is an example of the X-Include header:","X-Include: X-Client-IP, X-Client-Username","The X-Include header can also include only one of these headers, for example:","X-Include: X-Client-Username","RequestingICAPHeaders specifies which headers are included in X-Include.","X-Infection-Found","This header contains types of the detected threats or legitimate objects that can be used by attackers. You can specify whether Kaspersky Scan Engine includes this header in its response in the SendInfectionFoundICAPHeader element. The header will be present only if a threat or legitimate object that can be used by attackers is detected during scanning.","The header has the following format:","X-Infection-Found: Type=0; Resolution=0; Threat={Threat_type};","Here, {Threat_type} is the type of the threat or legitimate software that can be used by intruders. If Kaspersky Scan Engine detects several objects, all types are listed, separated by the comma symbol (,).","In the current version of Kaspersky Scan Engine, the values of Type and Resolution are always 0.","X-Response-Desc","This header contains the descriptions of the detected threats or legitimate objects that can be used by attackers. You can specify whether Kaspersky Scan Engine includes this header in its response in the SendResponseDescICAPHeader element. The header will be present only if a threat or legitimate object that can be used by attackers is detected during scanning.","The header has the following format:","X-Response-Desc: {Text}","Here, {Text} can have the following values:","Value","Description","Trojan malicious object detected","A Trojan was detected.","Malicious tool detected","Malware was detected.","Highly dangerous malicious object detected","A highly dangerous malicious object that cannot be classified using either of available classes of malware was detected.","Medium dangerous malicious object detected","A mediumly dangerous malicious object that cannot be classified using either of available classes of malware was detected. ","Virware malicious object detected","A program that infects other files by adding its own code to them in order to gain control of the infected files when they are opened was detected.","Malicious URL","A malicious URL was detected.","Phishing URL","A phishing URL was detected.","Malicious host","An IP address of a malicious host was detected.","Adware URL","A URL that leads to adware was detected.","Riskware URL","A URL that leads to legitimate software that can be used by intruders was detected.","Adware host","An IP address of adware was detected.","Riskware host","An IP address of a host that stores legitimate software that can be used by intruders was detected.","Detected legitimate software that can be used by intruders to damage your computer or personal data","An application that has no malicious features but could be a part of the development environment for malicious programs was detected.","Detected an attempt of unauthorized use of pay-per-use Internet services which are commonly pornographic websites (pornodialer), or pornotools, or a pornodownloader","An attempt of unauthorized use of pay-per-use Internet services (which are commonly pornographic websites) was  detected.","Adware detected","A URL that leads to adware was detected.","Multiple threats detected","Multiple objects were detected.","Detected a highly dangerous malicious object that cannot be classified using either of available classes of malware","A highly dangerous unclassified object was detected.","MS Office document containing a macro is detected ","A Microsoft Office document containing a macro was detected.","X-Response-Info","This header contains the status of the scanned object or the response to the OPTIONS requests. You can specify whether Kaspersky Scan Engine includes this header in its response in the SendResponseInfoICAPHeader element.","The header has the following format:","X-Response-Info: {Token}","Here, {Token} can have the following values:","Value","Description","Allowed","The scanned file or URL is not malicious.","Blocked","This response can appear for the following reasons:","A threat or legitimate software that can be used by intruders was detected","A macros was detected","Options","The answer to the OPTIONS requests.","X-Violations-Found","This header contains information about the scanned file and the threats or legitimate software that can be used by intruders detected in this file. You can specify whether Kaspersky Scan Engine includes this header in its response in the SendViolationsFoundICAPHeader element. The header will be present only if a threat or legitimate object that can be used by attackers is detected during scanning.","The header has the following format:","X-Violations-Found: {Count}","    {File_name}","    {Description}","    {Problem_ID}","    {Resolution_ID}","Here, {count} is the number of the objects that were detected in the file, {File_name} is the name of the file, {Description} is the name of the first detected threat or legitimate object that can be used by attackers in the file, {Problem_ID} is the identifier of the detected threat or legitimate object that can be used by attackers, {Resolution_ID} is the identifier of the action performed on the object by Kaspersky Scan Engine.","In the current version of Kaspersky Scan Engine, the value of {Resolution_ID} is always 0.","Response headers","221159.htm");
Page[233]=new Array("In ICAP mode, Kaspersky Scan Engine supports several ways of updating the anti-virus database.","When the anti-virus database is updated, the encrypted user agent string of KAV SDK is transferred to Kaspersky. See also the full list of data that is transferred to Kaspersky during an update.","Perform one of the following actions to update the anti-virus database:","Configure automatic database updates in the UpdateSettings section of the ICAP mode configuration file.","Send a SIGUSR2 signal to the kavicapd service. ","Kaspersky Scan Engine must be configured to update the database on this signal.","When you use one of these methods, a newer version of the database is automatically loaded by Kaspersky Scan Engine.","Updating the anti-virus database in ICAP mode","179902.htm");
Page[234]=new Array("In ICAP mode, Kaspersky Scan Engine collects information about its usage and creates statistics from this data. These statistics are stored on your hard disk. You can view the statistics to monitor trends in the data requested from your network. For example, you can check if users in your network are trying to download a lot of malicious files.","To view accumulated statistics:","Open the directory specified in the TempPath element of the configuration file.","Find the report.json file and open it.","Following is an example of the report.json file.","{","\"statistics\": {","\"total_requests\": 3,","\"infected_requests\": 3,","\"not_scanned_requests\": 0,","\"error_requests\": 0,","\"engine_errors\": 1,","\"processed_data\": 204,","\"infected_data\": 0,","\"processed_urls\": 1,","\"infected_urls\": 1","}","}","where statistics is an object containing the following accumulated statistics:","total_requests&#8212;The total number of received requests in response modification (RESPMOD) mode and request modification (REQMOD) mode.","infected_requests&#8212;The number of requests for which Kaspersky Scan Engine returned a DETECT, PHISHING, or MACRO scan result.","not_scanned_requests&#8212;The number of valid scan requests that were not processed. ","Possible reasons: ","The object is too big or too small.","The object is an encrypted archive.","Kaspersky Scan Engine is configured to skip objects of the format that the object belongs to. ","error_requests&#8212;The number of incorrect ICAP requests that were received by Kaspersky Scan Engine.","engine_errors&#8212;The number of requests for which Kaspersky Scan Engine returned a FAILED scan result.","processed_data&#8212;The total amount of scanned data in bytes.","This includes objects scanned in RESPMOD mode and objects in POST requests that were scanned in REQMOD mode.","infected_data&#8212;The amount of scanned data, in bytes, for which Kaspersky Scan Engine returned a DETECT, PHISHING, or MACRO scan result.","This includes objects scanned in RESPMOD mode and objects in POST requests that were scanned in REQMOD mode. ","processed_urls&#8212;The total number of checked URLs.","infected_urls&#8212;The number of URLs for which Kaspersky Scan Engine returned a DETECT or PHISHING scan result.","Resetting statistics","You can reset accumulated statistics at any time.","To reset accumulated statistics:","Open the directory specified in the TempPath element of the configuration file.","Find the report.json file and delete it.","The kavicapd service will create a new report.json file with all statistics set to 0.","Getting accumulated statistics in ICAP mode","182615.htm");
Page[235]=new Array("This section explains how to work with logs in ICAP mode.","Logging in ICAP mode","186630.htm");
Page[236]=new Array("This section explains how to manually configure logging in ICAP mode without using Kaspersky Scan Engine GUI.","In ICAP mode, Kaspersky Scan Engine can log its activity. Logging settings are specified in the icapdkavlog.conf configuration file (hereinafter referred to as the logging configuration file), located in the /opt/kaspersky/ScanEngine/bin directory. ","You can change the logging settings after the kavicapd service is started. ","See also the detailed instructions on enabling logging.","Elements of the logging configuration file","Logging&#8212;The root element of the file. This element has two child elements: DebugLogging and SyslogLogging.","DebugLogging Section","DebugLogging is a parent element that contains setting for logs that are written directly to the log files and can help identify service malfunctions.","This element has the following child elements.","Level&#8212;Specifies the logging level. ","Possible values:","none or non ","Logging is disabled.","debug or dbg","Debug level. At this logging level, Kaspersky Scan Engine logs information that can help identify problems, such as changes in the state of a proxy server connection or return values of Kaspersky Scan Engine functions.","If you enable the debug level of logging, consider that the log messages will contain sensitive data.","The default value is none.","Target&#8212;The parent element for parameters that specify where logs must be written.","File&#8212;Indicates that logs are written directly to log files. It also specifies the properties of log files. ","This element has the following attributes:","size_limit&#8212;Specifies the maximum possible size of a log file, in megabytes (MB).","If the value of this attribute is 0, the log file has no size limit.","The default value is 0.","folder&#8212;Specifies the directory where log files are stored.","The path can be absolute or relative. The relative path is specified relative to the directory that holds the kavicapd executable file. ","The default value is ./logs.","clear_folder&#8212;Specifies whether Kaspersky Scan Engine must delete old logs on initialization.","Kaspersky Scan Engine deletes old log files only if the value of this parameter is 1, yes, true, on, or enabled. If the value of this parameter is 0, no, false, off, or disabled, Kaspersky Scan Engine does not delete old log files. Notice that Kaspersky Scan Engine checks this parameter and deletes logs at the time the service starts. If the value of this parameter is set to 1, yes, true, on, or enabled when the service is already running, log files are not deleted until the service is restarted.  ","The default value is 0.","Generated log files are named as follows: icapdkav_&lt;pid&gt;_&lt;date_time&gt;_&lt;log_number&gt;.log, where &lt;pid&gt; is the PID of the process, &lt;date_time&gt; is local system date in the YYYY-MM-DDhhmmss format, and &lt;log_number&gt; is the number of the log (this parameter is appended to the file name only if the icapdkav_&lt;pid&gt;_&lt;date_time&gt;.log log file already exists).","SyslogLogging Section","SyslogLogging is a parent element that contains setting for logs that are redirected to syslogd. ","This element has the following child elements:","SyslogEnabled&#8212;Specifies whether Kaspersky Scan Engine sends syslog messages.","Possible values:","0, false, no, off, or disabled","Disables sending of syslog messages.","Any other value","Enables sending of syslog messages.","If you enable sending syslog messages, consider that these messages will contain sensitive data, such as personal data as defined by GDPR, configuration data of the product, and licensing information.","Syslog specifies settings related to syslog messages. ","This element has the following attributes:","destination&#8212;Specifies the destination for syslog messages.","The following destinations are possible:","IP address. In this case, specify the %PROTOCOL%%IP%:%PORT% value, where %PROTOCOL% is a network protocol (use tcp:// or udp:// for this value), %IP% is an IPv4 address that receives syslog messages, %PORT% is a port that receives syslog messages. If you do not specify a protocol as described above, KAV SDK will use the UDP protocol.","Syslog daemon. In this case, specify the localhost value to redirect syslog messages to a syslog daemon.","Log file. In this case, specify the path to the directory where the log file will be created. The path must begin with /var/log/kaspersky. The log file with syslog messages created by previous sessions is not removed and  the ICAP plug-in appends new information to this file.","If it is necessary to write logs into the different locations, you can specify several Syslog elements. In this case, the destination attribute values of these elements must vary.","format&#8212;Specifies the format of syslog messages.","Possible values:","cef&#8212;Specifies the CEF format of syslog messages.","raw&#8212;Specifies the RAW format of syslog messages. The raw value is used when the value specified in this element is not cef or raw, or no value is specified in this element, or if the logging configuration file does not contain the SyslogFormat parameter.","Syslog may have the following child element:","LoggedEvent&#8212;Specifies events to be logged. ","It is allowed to specify multiple LoggedEvent values. Each of these values sets the type of event that will be logged into the location specified in the destination attribute.","Possible values:","Audit&#8212;Specifies system audit events.","Init&#8212;Specifies service initialization events. ","Deinit&#8212;Specifies service deinitialization events and watchdog events. ","Update&#8212;Specifies antivirus database update and reload events.","License&#8212;Specifies license-related events.","Engine&#8212;Specifies antivirus engine events.  These events may be published frequently.","ScanResultClean&#8212;Specifies scan completion events when scanned object considered clean.","ScanResultDetect&#8212;Specifies scan completion events when threat was detected.","ScanResultOther&#8212;Specifies scan completion events when object was not scanned.","If the Syslog element does not contain the LoggedEvent child element, all the ICAP events logged. ","If the Syslog settings are incorrect, logging to the specified destination will be disabled.","When syslog logging is enabled, system audit is enabled as well. If none of the SyslogEvents elements contains the Audit event, system audit settings are set as follows:  SyslogFormat is set to raw, SyslogTarget is set to localhost, and SyslogEvents is set to audit.","Kaspersky Scan Engine can write debug logs and send syslog messages at the same time or separately.","Structure of the logging configuration file","Following is an example of a logging configuration file:","&lt;?xml version=\"1.0\"?&gt;","&lt;Logging&gt;","&lt;DebugLogging&gt;","&lt;Level&gt;debug&lt;/Level&gt;","&lt;File size_limit=\"10\" folder=\"./logs/scanevents\" clear_folder=\"1\"/&gt;","&lt;/DebugLogging&gt;","&lt;SyslogLogging&gt;","&lt;SyslogEnabled&gt;1&lt;/SyslogEnabled&gt;","&lt;Syslog destination=\"udp://192.168.1.1\" format=\"cef\"&gt;","&lt;LoggedEvent&gt;ScanResultClean&lt;/LoggedEvent&gt;","&lt;LoggedEvent&gt;ScanResultDetect&lt;/LoggedEvent&gt;","&lt;/Syslog&gt;","&lt;Syslog destination=\"localhost\" format=\"raw\"&gt;","&lt;LoggedEvent&gt;ScanResultOther&lt;/LoggedEvent&gt;","&lt;/Syslog&gt;","&lt;Syslog destination=\"/opt/kav/sdk8l3/logs\" format=\"raw\"&gt;","&lt;LoggedEvent&gt;Audit&lt;/LoggedEvent&gt;","&lt;LoggedEvent&gt;Engine&lt;/LoggedEvent&gt;","&lt;/Syslog&gt;","&lt;/SyslogLogging&gt;","&lt;/Logging&gt;","Configuring logging in ICAP mode","179896.htm");
Page[237]=new Array("If Kaspersky Scan Engine is configured to write syslog messages in CEF format, the log records about events appears as follows:","CEF:0|Kaspersky|Scan Engine ICAP Service|%VERSION%|%EVENT_CLASS_ID%|%EVENT_NAME%|%SEVERITY%| msg=%EVENT_MSG% src=%CLIENT_IP% dvcpid=%ICAP_SERVER_PID% dvc=%HTTP_SERVICE_IP% dvchost=%HOSTNAME% cs2=%HTTP_USER_NAME% cs2Label=X-Client-Username cs3=%HTTP_USER_IP% cs3Label=X-Client-IP start=%EVENT_TIME% fileHash=%SCANNED_FILE_HASH% request=%SCANNED_URL% cs1=%SCAN_RESULT% cs1Label=Scan result cs4=%VIRUS_NAME% cs4Label=Virus name cs5=%SCANNED_FILE_SHA256_HASH% cs5Label=SHA256 cs6=%ICAP_MODE% cs6Label=ICAP mode cn1=%REQUEST_LENGTH% cn1Label=Request size flexString1=%SDK_VERSION% flexString1Label=Anti-Virus Engine version","A record has the following fields:","%VERSION%","Version of Kaspersky Scan Engine.","%EVENT_CLASS_ID%","Class of the event. Possible values:","1","Service event (not related to scanning).","2","Event related to errors.","3","Event related to scanning (for example, a scan result).","%EVENT_NAME%","Name of the event. Possible values:","Initializing&#8212;Kaspersky Scan Engine initialized.","Deinitializing&#8212;Kaspersky Scan Engine deinitialized, a watchdog event occurred, or the service process is absent.","Update event&#8212;Anti-malware databases update started or finished.","License event&#8212;License-related event.","Engine event&#8212;Antivirus engine event occurred.","Scan result clean&#8212;Scanned object considered clean.","Scan result detect&#8212;Threat was detected.","Scan result other&#8212;Object was not scanned.","Audit&#8212;System audit event occurred.","%SEVERITY%","Importance level of the event. The higher the level, the more important the event. Possible values:","3","This value is specified for system audit events, informational level.","5","This value is specified for service events when the scanning starts or if the scan result is CLEAN.","6","This value is specified for system audit events, warning level.","7","This value is specified for initialization, deinitialization, and errors.","8","This value is specified for system audit events (critical level) and if the scan result is something other than CLEAN. These events are considered dangerous.","%EVENT_MSG%","Description of the event. For example, the text of an error message.","%CLIENT_IP%","IP address of the ICAP client that sent the scan request to Kaspersky Scan Engine. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","%ICAP_SERVER_PID%","PID of Kaspersky Scan Engine.","%HTTP_SERVICE_IP%","IP address that Kaspersky Scan Engine uses to receive scan requests from clients. This field appears only if syslog logging in CEF format is enabled.","%HOSTNAME%","Host name of the computer on which Kaspersky Scan Engine is working. This field appears only if syslog logging in CEF format is enabled.","%HTTP_USER_NAME%","Name of the HTTP client specified in a custom request header field. The name of this request header field is specified in the HTTPUserNameICAPHeader element of the ICAP mode configuration file.","The cs2 (%HTTP_USER_NAME%) and cs2Label fields appear only if the value of %EVENT_CLASS_ID% is 3, and if the HTTPUserNameICAPHeader element in the ICAP mode configuration file exists and is not empty. If the HTTPUserNameICAPHeader element does not exist or is empty, the cs2 (%HTTP_USER_NAME%) and cs2Label fields are absent in the Syslog message.","If the value of the custom header field is empty (the HTTP client name is not specified in the request), the cs2 value (%HTTP_USER_NAME%) in the Syslog message is \"-\".","%HTTP_USER_IP%","IP address of the HTTP client specified in a custom request header field. The name of this request header field is specified in the HTTPClientIpICAPHeader element of the ICAP mode configuration file.","The cs3 (%HTTP_USER_IP%) and cs3Label fields appear only if the value of %EVENT_CLASS_ID% is 3, and if the HTTPClientIpICAPHeader element in the ICAP mode configuration file exists and is not empty. If the HTTPClientIpICAPHeader element does not exist or is empty, the cs3 (%HTTP_USER_IP%) and cs3Label fields are absent in the Syslog message.","If the value of the custom header field is empty (the IP address of the HTTP client is not specified in the request), the cs3 value (%HTTP_USER_IP%) in the Syslog message is \"-\".","%EVENT_TIME%","Time and date of the event. The time and date are taken from the computer that Kaspersky Scan Engine runs on.","%SCANNED_FILE_HASH%","Hash of the object that was passed for scanning to Kaspersky Scan Engine. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","%SCANNED_URL%","URL that was passed for scanning to Kaspersky Scan Engine. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","%SCAN_RESULT%","Scan result. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","cs1Label=Scan result","Field appears only if the value of %EVENT_CLASS_ID% is 3.","%VIRUS_NAME%","Name of the threat or legitimate software that can be used by intruders. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","%SCANNED_FILE_SHA256_HASH%","SHA256 hash of object that was passed for scanning to Kaspersky Scan Engine. This field appears only when Kaspersky Scan Engine returns the scan result. ","%ICAP_MODE%","Specifies whether Kaspersky Scan Engine scanned an object in Request Modification Mode (REQMOD) or Response Modification Mode (RESPMOD). This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types).","%REQUEST_LENGTH%","Length of the body of the message in bytes. This field appears only in scan result events (ScanResultClean, ScanResultDetect, ScanResultOther event types) and if the scanned object is not a URL.","%SDK_VERSION%","Version of KAV SDK that Kaspersky Scan Engine is based on.","Format of CEF logs in ICAP mode","186631.htm");
Page[238]=new Array("If Kaspersky Scan Engine is configured to write syslog messages in RAW format, the log records about events appear as follows:","&lt;%PRIORITY%&gt;1 %TIMESTAMP% %ICAP_SERVICE_IP% KasperskyICAPServer %ICAP_SERVICE_PID% %MESSAGE_ID% [KL_ICAP@23668 icapMode=\"%ICAP_MODE%\" requestLength=\"%REQUEST_LENGTH%\" httpUserName=\"%HTTP_USER_NAME%\" httpUserIP=\"%HTTP_USER_IP%\" sha2=\"%SCANNED_FILE_SHA256_HASH%\" md5=\"%SCANNED_FILE_MD5_HASH%\" request=\"%SCANNED_URL%\"] BOM %MESSAGE%","A record has the following fields:","%PRIORITY%","Importance level of the event. Possible values:","163","This value is specified for errors.","165","This value is specified if the scan result is something other than CLEAN.","166","This value is specified for service events or if the scan result is CLEAN.","%TIMESTAMP%","Date and time of the event in the Coordinated Universal Time (UTC) time zone.","%ICAP_SERVICE_IP%","IP address of the computer that Kaspersky Scan Engine runs on.","%ICAP_SERVICE_PID%","PID of the Kaspersky Scan Engine. ","%MESSAGE_ID%","Class of the event. Possible values:","AUDIT_MESSAGE&#8212;Audit event.","INIT_MESSAGE&#8212;KAV SDK initialized.","DEINIT_MESSAGE&#8212;KAV SDK deinitialized, a watchdog event occurred, or the service process is absent.","UPDATE_MESSAGE&#8212;Anti-malware databases update started or finished.","LICENSE_MESSAGE&#8212;License-related event.","ENGINE_MESSAGE&#8212;Antivirus engine event occurred.","SCAN_RESULT_CLEAN_MESSAGE&#8212;Scanned object considered clean.","SCAN_RESULT_DETECT_MESSAGE&#8212;Threat was detected.","SCAN_RESULT_OTHER_MESSAGE&#8212;Object was not scanned.","%ICAP_MODE%","Specifies whether Kaspersky Scan Engine scanned an object in Request Modification Mode (REQMOD) or Response Modification Mode (RESPMOD). This field appears only if the value of %MESSAGE_ID% is SCAN_RESULT_MESSAGE.","%REQUEST_LENGTH%","Length of the body of the HTTP message scanned by Kaspersky Scan Engine. This field appears only if the value of %MESSAGE_ID% is SCAN_RESULT_MESSAGE and the scanned object is not a URL.","%HTTP_USER_NAME%","Name of the HTTP client that was specified in the HTTPUserNameICAPHeader parameter of the ICAP mode configuration file. The %HTTP_USER_NAME% field appears only if the value of %MESSAGE_ID% is SCAN_RESULT_MESSAGE.","%HTTP_USER_IP%","IP address of the HTTP client that was specified in the HTTPClientIpICAPHeader parameter of the ICAP mode configuration file. The %HTTP_USER_IP% field appears only if the value of %MESSAGE_ID% is SCAN_RESULT_MESSAGE.","%SCANNED_FILE_SHA256_HASH%","SHA256 hash of the object that was passed for scanning to Kaspersky Scan Engine. This field appears only when Kaspersky Scan Engine returns the scan result.","%SCANNED_FILE_MD5_HASH%","MD5 hash of the object that was passed for scanning to Kaspersky Scan Engine. This field appears only when Kaspersky Scan Engine returns the scan result. ","%SCANNED_URL%","URL address scanned by KAV SDK. The %SCANNED_URL% field appears only in scan result events (SCAN_RESULT_CLEAN_MESSAGE, SCAN_RESULT_DETECT_MESSAGE, SCAN_RESULT_OTHER_MESSAGE event types). ","%MESSAGE%","Description of the event. For example, the text of an error message.","Format of RAW logs in ICAP mode","186652.htm");
Page[239]=new Array("The ICAP protocol provides the opportunity to integrate Kaspersky Scan Engine with other solutions. Support for most of the fields described in the ICAP specification makes it possible to integrate Kaspersky Scan Engine with almost any solution that supports communication over ICAP. For example, you can integrate Kaspersky Scan Engine with Manage File Transfer (MFT) solutions such as Cleo EDI, Cleo MFT, proxy-servers, Network Attached Storage (NAS) solutions, and NextGen Web Firewall (NGWF).","This section of the documentation describes only a small number of integrations. For  help with solutions not covered in the documentation, contact your Technical Account Manager (TAM).","Integrating Kaspersky Scan Engine with other solutions","219958.htm");
Page[240]=new Array("Squid is a caching and forwarding web proxy server for Windows and UNIX-like systems. You can use Kaspersky Scan Engine in ICAP mode to scan traffic that passes through the Squid proxy.","Software requirements","Operating system Ubuntu 18.04 or later","Squid 4.5 or later","Configuring Squid for working with Kaspersky Scan Engine","For Kaspersky Scan Engine to work with Squid in ICAP mode, you must specify Kaspersky Scan Engine as an ICAP service in the Squid configuration file (squid.conf). ","In Squid, an ICAP service is defined in the following format: icap_service id vectoring_point [options] uri.","To specify Kaspersky Scan Engine as an ICAP service:","Open squid.conf for editing.","Define the mandatory parameters id, vectoring_point, and uri:","Set id to any appropriate identifier. For example, srv_kl_resp for request modification (REQMOD) mode and srv_kl_req for response modification (RESPMOD) mode.","Set vectoring_point to an appropriate *_precache value: ","For request modification (REQMOD) mode, specify reqmod_precache.","For response modification (RESPMOD) mode, specify respmod_precache.","Set uri to the location of Kaspersky Scan Engine: ","For REQMOD mode, the URI must have the following format: icap://servername:port/req.","For RESPMOD mode, the URI must have the following format: icap://servername:port/resp.","Add the following lines to the end of the Squid configuration file:","icap_enable on","adaptation_send_username on","adaptation_send_client_ip on","icap_service srv_kl_resp respmod_precache 0 icap://localhost:1344/resp","icap_service srv_kl_req reqmod_precache 0 icap://localhost:1344/req","adaptation_access srv_kl_resp allow all","adaptation_access srv_kl_req allow all","icap_service_failure_limit -1","icap_service_revival_delay 30","icap_preview_enable off","In the example above, srv_kl_resp and srv_kl_req are examples of id, respmod_precache and reqmod_precache are values of vectoring_point, 0 is the value of the Squid bypass option, and vectoring_point and icap://127.0.0.1:1344/req are examples of uri.","You can use 127.0.0.1 in uri only if Kaspersky Scan Engine is installed on the same computer as Squid. ","Save and close squid.conf.","Restart the squid service:","service squid restart","Configuring Squid for working with Kaspersky Scan Engine and enabling SSL scanning","By default, Kaspersky Scan Engine cannot scan SSL/TLS traffic, but you can configure Squid to decrypt it by using the SSL Bumping functionality.","To configure Squid for working with Kaspersky Scan Engine and enable SSL Bumping:","Install the packages necessary to compile and configure Squid:","apt-get install build-essential openssl libssl-dev pkg-config","Download source code for Squid 4.5 or later.","Unzip the archive that contains the Squid source code to the required directory.","Move to this directory.","Compile Squid:","./configure --with-default-user=proxy --with-openssl --enable-ssl-crtd","make all","make install","Options --with-openssl and --enable-ssl-crtd are necessary to enable SSL Bumping.","Set up the correct time and date on the server that is running Squid. The time and date are checked every time a client is trying to validate the certificate of this server.","Configure OpenSSL:","Find the default OpenSSL configuration file openssl.cnf. The location of this file depends on your operating system, but usually it is /etc/ssl/openssl.cnf.","Open openssl.cnf for editing.","Add the following line to the [v3_ca] section of the configuration file:","keyUsage = cRLSign, keyCertSign","Save and close openssl.cnf.","Prepare the environment for storing SSL certificates:","Create a directory for storing SSL certificates:","mkdir /usr/local/squid/etc/ssl_cert -p","Change the user and the group that own that directory to proxy:","chown proxy:proxy /usr/local/squid/etc/ssl_cert -R","Change the permissions for that directory:","chmod 700 /usr/local/squid/etc/ssl_cert -R","Move to the newly created directory:","cd /usr/local/squid/etc/ssl_cert","Generate a new self-signed SSL certificate and a private key for the Squid server:","openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -extensions v3_ca -keyout squid_ca.pem -out squid_ca.pem","Convert the newly created certificate to DER format:","openssl x509 -in squid_ca.pem -outform DER -out squid_ca.der","Export the generated certificate to the client computers and install it on them as a Certificate Authority certificate. The method of doing this depends on the browser and operating system of the client.","Create a new SSL database for the Squid server:","/usr/local/squid/libexec/security_file_certgen -c -s /usr/local/squid/var/logs/ssl_db -M 4MB","Change the user and the group that own that directory to proxy:","chown proxy:proxy /usr/local/squid/var/logs/ssl_db -R","Configure Squid:","Find the default Squid configuration file squid.conf. The location of this file depends on your operating system, but usually it is  /usr/local/squid/etc/squid.conf.","Open squid.conf and make the following edits:","Find the following line:","http_port 3128","Replace it with the following line:","http_port 3128 ssl-bump cert=/usr/local/squid/etc/ssl_cert/squid_ca.pem generate-host-certificates=on dynamic_cert_mem_cache_size=4MB","This line enables SSL Bumping on port 3128.","Add the following section:","acl step1 at_step SslBump1","ssl_bump peek step1","ssl_bump bump all","sslcrtd_program /usr/local/squid/libexec/security_file_certgen -s /usr/local/squid/var/logs/ssl_db -M 4MB","Specify Kaspersky Scan Engine as an ICAP service in the Squid configuration file as described above in the subsection \"Configuring Squid for working with Kaspersky Scan Engine\".","Save and close squid.conf.","Change the user and the group that own the /usr/local/squid directory to proxy:","chown -R proxy:proxy /usr/local/squid","Start Squid and initialize the Squid cache:","/usr/local/squid/sbin/squid -z","Following is an example of a Squid configuration file extract. In this example, Squid uses Kaspersky Scan Engine in ICAP mode to scan HTTP messages in both the REQMOD and RESPMOD modes.","# SSL bumping configuration","acl step1 at_step SslBump1","ssl_bump peek step1","ssl_bump bump all","http_port 3128 ssl-bump cert=/usr/local/squid/etc/ssl_cert/squid_ca.pem generate-hostcertificates=on dynamic_cert_mem_cache_size=4MB","sslcrtd_program /usr/local/squid/libexec/security_file_certgen -s /usr/local/squid/var/logs/ssl_db -M 4MB","# ICAP configuration","icap_enable on","adaptation_send_username on","adaptation_send_client_ip on","icap_service srv_kl_resp respmod_precache 0 icap://localhost:1344/resp","icap_service srv_kl_req reqmod_precache 0 icap://localhost:1344/req","adaptation_access srv_kl_resp allow all","adaptation_access srv_kl_req allow all","icap_service_failure_limit -1","icap_service_revival_delay 30","icap_preview_enable off","Using Kaspersky Scan Engine in ICAP mode with Squid","179904.htm");
Page[241]=new Array("You can configure Kaspersky Scan Engine to work with Oracle Solaris Vscan.","To configure Kaspersky Scan Engine for working with Oracle Solaris Vscan by using the Kaspersky Scan Engine GUI:","Navigate to the Settings &gt; Service page.","In the Response mode address field, specify avscan.","Save the changes.","To configure Kaspersky Scan Engine for working with Oracle Solaris Vscan by using the ICAP mode configuration file:","Open kavicapd.xml for editing.","In the ICAPSettings &gt; RespModeAddress element, specify avscan.","Save and close kavicapd.xml.","Restart Kaspersky Scan Engine by running the following command:","service kavicapd restart","Using Kaspersky Scan Engine in ICAP mode with Oracle Solaris Vscan","212974.htm");
Page[242]=new Array("You can configure Kaspersky Scan Engine to work with Dell EMC Isilon. For convenience, this process is separated into several steps.","The instruction below applies to Dell EMC Isilon 9.1. For information about the interfaces of other versions, see Dell EMC Isilon documentation.","Step I. Configuring Kaspersky Scan Engine","To configure Kaspersky Scan Engine: ","Allow Kaspersky Scan Engine to send the 204 No Content HTTP status code by doing one of the following:","Turn on the Send code 204 toggle in Kaspersky Scan Engine GUI.","Set the value of the Allow204 element to 1 in the ICAP mode configuration file."," Enable scanning of files in the response modification mode (RESPMOD) by doing one of the following:","Set the objects that must be scanned in RESPMOD to Files in Kaspersky Scan Engine GUI.","Set the value of the ScanInRespMode element to Content in the ICAP mode configuration file.","Set the address that Kaspersky Scan Engine uses to process responses in RESPMOD to avscan by doing one of the following:","Set the value of Response mode address field to avscan in Kaspersky Scan Engine GUI.","Set the value of the RespModeAddress element to avscan in the ICAP mode configuration file.","Step II. Configuring Dell EMC Isilon","To configure Dell EMC Isilon:","In the Dell OneFS web administration interface, go to Data Protection &gt; Antivirus &gt; ICAP.","The ICAP tab","In the Servers area, click Add Server.","The Add ICAP antivirus server dialog box appears.","In the Add ICAP antivirus server dialog box, do the following:","In the Server URL field, type the address Kaspersky Scan Engine: icap://%KSE_IP%:1344/avscan. Here %KSE_IP% is the IPv4 address.","In the Server name field, type the name for the server, for example KasperskyScanEngine.","Click Add Server.","The Add ICAP antivirus server dialog box","In the Settings area, specify the following:","The action on detection. For example, you can choose Attempt to truncate file when threat is found.","Optionally, you can specify the maximum size of the files to scan. The default value is 2 GB.","Optionally, you can specify the path prefixes. Path prefixes are the paths in the filesystem that will trigger scanning when files are added to them.","Optionally, you can specify the filters for object names. Filters for object names define objects that should or should not be scanned in On-Access mode.","Optionally, you can enable the Enable scan of files on open, Enable file access when scanning fails, and Enable scan of files on closed settings.","Optionally, configure scan report retention.","Click Submit.","The All scans dialog box","Click Switch antivirus service.","Turn on Switch ICAP antivirus.","Click Confirm.","Schedule scanning","You can configure scanning schedule to scan your storage on a regular basis.","To configure scanning schedule:","In the Dell OneFS web administration interface, go to Data protection &gt; Antivirus &gt; ICAP &gt; Policies.","Click the Create an antivirus policy.","The Create a policy dialog box appears.","The Create a policy dialog box","Select the Enable antivirus policy&nbsp;check box.","Specify the name of the policy in the&nbsp;Policy name&nbsp;text field.","Enter the description of the policy in the Description text field.","Add paths to the directories that you want to scan.","Optionally, you can set a limit on the recursion depth in the Recursion depth section, but this is not recommended.","Specify the impact policy settings:","Optionally, you can select Enable force run of policy regardless of impact policy, but this is not recommended. ","Select the DEFAULT impact policy from the Impact Policy&nbsp;drop-down list.","Select the Scheduled radio button.","Specify the scheduling settings:","Choose the interval for running the policy.","Configure the policy to run at the desired time.","Click Submit.","Reviewing the detect objects","To review the detected objects,","In the Dell OneFS web administration interface, go to Data Protection &gt; Antivirus &gt; ICAP &gt; Detected Threats.","The list of detected objects","This is the list of files that were quarantined or truncated, along with the name of the detected object, file path, remediation method, policy, and timestamp.","Click the View details button next to a detected object to view the detailed information.","To restore a file from the list and allow user access to it:","Click the&nbsp;More&nbsp;drop-down list. ","Select&nbsp;Release file.","Recommendations","You must configure at least one copy of Kaspersky Scan Engine to provide virus scanning&nbsp;for each Isilon cluster. In a typical environment, a minimum of two Kaspersky Scan Engine instances are required to handle a NAS server. Having only one instance can cause denial of file access, in which case the instance does not respond. Isilon clusters handle load balancing across multiple Kaspersky Scan Engine instances automatically.","All Kaspersky Scan Engine instances that are registered with an Isilon cluster must have identical configurations.","Using Kaspersky Scan Engine in ICAP mode with Dell EMC Isilon","219959.htm");
Page[243]=new Array("You can configure Kaspersky Scan Engine to work with F5 BIG-IP Application Security Manager (hereinafter ASM). For convenience, this process is separated into several steps.","Step I. Configuring Kaspersky Scan Engine","To configure Kaspersky Scan Engine, do one of the following:","In the ICAP mode configuration file, set the value of the VirusNameICAPHeader element to X-Virus-ID.","In the Service page of Kaspersky Scan Engine GUI, set the value of the Detected object name HTTP header field to X-Virus-ID.","Step II. Configuring ASM","To configure ASM:","Log in to the Configuration utility.","Go to Security &gt; Options &gt; Application Security &gt; Integrated Services &gt; Anti-Virus Protection.","Anti-Virus Protection","In the Server Host Name/IP Address field, specify the IP address of the Kaspersky Scan Engine ICAP server.","In the Server Port Number field, specify the port of the Kaspersky Scan Engine ICAP server in or leave the default value of 1344.","Select the Guarantee Enforcement check box if you want the system to perform virus checking even if this may slow your web application.","Click Save.","To apply the security policy changes immediately, click Apply Policy.","Go to Security &gt; Options &gt; Application Security &gt; Advanced Configuration &gt; System Variables.","Configure the internal variables:","In ASM 13.1.X - 16.X:","For the icap_uri setting, enter /req in the Parameter Value setting. This is the default value in ReqModeAddress.","For the virus_header_name setting, enter X-Virus-ID in the Parameter Value setting.","Select Update.","In ASM 11.X - 13.0.X:","For the icap_uri setting, enter /req in the Parameter Value setting. This is the default value in ReqModeAddress.","For the virus_header_name setting, enter X-Virus-ID.","Select Save.","Configuring blocking of detected objects","To configure blocking of detected objects:","In ASM 13.1.X - 16.X:","Log in to the Configuration utility.","Go to Security &gt; Application Security &gt; Policy Building &gt; Learning and Blocking Settings.","Set the view to Advanced.","Expand Antivirus (expand Antivirus Protection in versions earlier than 14.X) and select either or both of the Alarm and Block check boxes for the Virus Detected violation.","Click Save.","To activate the security policy changes immediately, select Apply Policy.","In ASM 12.X:","Log in to the Configuration utility.","Go to Security &gt; Application Security &gt; Policy Building &gt; Learning and Blocking Settings.","Set the view to Advanced.","Expand Policy General Features and select either or both of the Alarm and Block check boxes for the Virus Detected violation.","Click Save.","To apply the security policy changes immediately, click Apply Policy.","In ASM 11.X:","Log in to the Configuration utility.","Go to Security &gt; Application Security &gt; Blocking.","Under Violations List, for Negative Security Violations select either or both of the Alarm and Block check boxes for the Virus Detected violation.","Click Save.","To activate the security policy changes immediately, click Apply Policy.","Configuring scanning of uploaded files and email attachments","To configure scanning of uploaded files and email attachments:","Go to Security &gt; Application Security &gt; Integrated Services &gt; Anti-Virus Protection.","Select the relevant security policy from the list.","Select the Inspect file uploads within HTTP requests check box.","To scan SOAP attachments, move the relevant XML profiles from the Antivirus Protection Disabled list to the Antivirus Protection Enabled list.","Click Save.","To apply the security policy changes immediately, click Apply Policy.","Apply Policy","Reviewing the detect objects","To view reports on detected objects:","Log in to the Configuration utility.","Go to Security &gt; Reporting &gt; Application &gt; Charts.","Select Top Viruses Detected in the charts list.","The system will display the detected viruses over time.","Using Kaspersky Scan Engine with F5 BIG-IP Application Security Manager","221109.htm");
Page[244]=new Array("You can configure Kaspersky Scan Engine to work with GoAnywhere MFT. For convenience, this process is separated into several steps.","Configuring Kaspersky Scan Engine","To be integrated with GoAnywhere MFT, Kaspersky Scan Engine must be working in ICAP mode.","To configure Kaspersky Scan Engine,","Enable sending a 204 No Content HTTP status code. You can do it in the following ways:","In the Kaspersky Scan Engine GUI, by turning on the Send code 204 toggle switch on the Service settings page.","In the ICAP mode configuration file, by specifying 1 in the Allow204 element.","Configuring GoAnywhere MFT to work with Kaspersky Scan Engine","To add Kaspersky Scan Engine into GoAnywhere MFT:","In the GoAnywhere MFT web console, open the Resources page.","In the Resource Types list, choose ICAP Servers.","GoAnywhere MFT. ICAP servers","Click the Add ICAP Server button.","Fill out the form that opens:","Name. Specify any name for the Kaspersky Scan Engine server. For example, Kaspersky Scan Engine ICAP.","URL. Specify the URL that Kaspersky Scan Engine uses in response mode. That is, the URL must contain the part that specifies the RESP method. For example, icap://{KSE_ICAP}:1344/resp.","GoAnywhere MFT. Kaspersky Scan Engine ICAP server settings","Click the Test button.","GoAnywhere MFT tests the connection with the newly added Kaspersky Scan Engine server. An example of a successful test is shown in the picture below.","GoAnywhere MFT. Successful connection to the Kaspersky Scan Engine ICAP server","Click Save.","You can now use Kaspersky Scan Engine to scan objects from GoAnywhere MFT.","GoAnywhere MFT configuration complete","Creating a regular scan task","You can create a task to scan objects in Kaspersky Scan Engine on a regular basis.","To create a regular scan task:","In the GoAnywhere MFT web console, open the Workflow/Projects page.","Click the Create a Project button.","In the form that opens, fill in the Project Name field (for example, Kaspersky Scan Engine regular scan).","Click Save.","The page with the Component Library list opens.","GoAnywhere MFT. Component Library","In the Component Library list:","a. Double-click the File System/Create File List element, and then fill out the form that opens:","File List Variable. Specify files.","Base Directory. Specify the path to the directory that contains the objects to send for scanning in Kaspersky Scan Engine.","GoAnywhere MFT. File List settings","b. Double-click the Loops/For-Each Loop element, and then fill out the form that opens:","Items Variable. Specify ${files}.","Current Item Variable. Specify file.","c. Double-click the Integration/ICAP element, and then fill out the form that opens:","ICAP Server. Specify Kaspersky Scan Engine ICAP.","Source File. Specify ${file}.","Output Variables/ICAP Status Code Variable. Specify icap_resp_code.","GoAnywhere MFT. ICAP server integration settings","d. Double-click the Job Control/If element, and then fill out the form that opens:","Condition. Specify ${icap_resp_code == 200}.","GoAnywhere MFT. \"If\" condition","e. Double-click the File System/Delete element, and then fill out the form that opens:","Input Files Variable. Specify ${file}.","GoAnywhere MFT. Input Files Variable","Kaspersky specialists recommend removing malware instantly, but you can specify a different action, such as moving the malware to another directory, renaming the malware, or configuring GoAnywhere MFT to send a notification to a security specialist.","After creating these elements, arrange them in the following hierarchy:","File System/Create File List","Loops/For-Each Loop ","Integration/ICAP ","Job Control/If"," File System/Delete","GoAnywhere MFT. Settings hierarchy","Open the Workflow/Schedule page, and then fill out the form:","a. In the Project field, specify Kaspersky Scan Engine regular scan.","GoAnywhere MFT. Regular scan project","b. In the Schedule tab, specify the required scanning frequency.","GoAnywhere MFT. Regular scan schedule","c. Click Save.","Using Kaspersky Scan Engine in ICAP mode with GoAnywhere MFT","221715.htm");
Page[245]=new Array("You can compile the kavicapd service from the source code located in the %service_dir%/samples/kavicap/ directory.","Software requirements","To compile the kavicapd service, you must install the following software on your computer:","Boost 1.72.0 or later. The kavicapd service source files are linked statically with Boost, which requires the boost-static.x86_64 package.","GNU C Library and GNU Standard C++ Library with static variants of libraries.","OpenSSL library (latest version). It is recommended to install the openssl-devel package.","PostgreSQL libraries from 6.4.4 to 7 (non-inclusive). It is recommended to install the libpqxx-devel package.","Brotli dynamic library.","You will also need the GNU Compiler Collection (GCC) 7.3.0 or later. Use the same version of GCC to compile Boost and the kavicapd service.","To compile Kaspersky Scan Engine for use in ICAP mode:","Navigate to the %service_dir%/samples/kavicap/ directory.","Run gmake.","Building executable files for Kaspersky Scan Engine used in ICAP mode","179905.htm");
Page[246]=new Array("This section describes the graphical user interface (GUI) provided by Kaspersky Scan Engine.","Depending on the role, the user of Kaspersky Scan Engine GUI can do the following:","Change Kaspersky Scan Engine settings","Learn about the health of Kaspersky Scan Engine","Browse service events and events with scan results","Save service events and events with scan results to a file","Using Kaspersky Scan Engine GUI","179683.htm");
Page[247]=new Array("The Kaspersky Scan Engine functionality includes differentiation of access rights for users. Access rights are defined by the user roles assigned to each user of Kaspersky Scan Engine. Assigning the user role with limited access rights to ordinary information security employees allows them to monitor and analyze incidents, but they cannot change the configuration of Kaspersky Scan Engine.","There are two user roles In Kaspersky Scan Engine:","Administrator has full access to the Kaspersky Scan Engine functionality.","Operator has limited access to the Kaspersky Scan Engine functionality.","See the table below for more information on the functions available for each user role.","Availability of Kaspersky Scan Engine functionality for different user roles","Kaspersky Scan Engine GUI","Administrator","Operator","Dashboard","Available","Limited availability:","The following functions are unavailable:","Restarting Kaspersky Scan Engine (Restart button).","Updating anti-virus database (Update button).","Deleting all data from the anti-virus database and getting the new data (Update from scratch button).","Changing the key file or the activation code (Change button).","Limited data set in the table of events. Operator can only view events related to scanning and events initiated by themselves. ","Scan results","Available","Limited availability.","Operator cannot reset scan results (the Reset statistics button is not available).","Settings","Available","Unavailable","Cluster","Available","Unavailable","User roles","219850.htm");
Page[248]=new Array("When you try to access Kaspersky Scan Engine GUI, the authentication page is displayed. You cannot use Kaspersky Scan Engine GUI if you are not authorized.","At the bottom of the page, you can find the current version of Kaspersky Scan Engine. ","Authentication page","On the authentication page, you specify a user name and password and click Sign in. After you are authorized, the Kaspersky Scan Engine dashboard opens.","After you have installed Kaspersky Scan Engine, a preconfigured account, admin, is created. The default password of this account is KAVAdmin!1. We recommend that you change the password after you have logged in for the first time. If you changed the initial password and forgot it, you can restore it to its default value.","If you are inactive for 2 hours, your session is closed and you have to log in again to continue using Kaspersky Scan Engine GUI.","After several unsuccessful attempts to sign in into an account, Kaspersky Scan Engine temporarily blocks it. To access a blocked account, contact your Administrator and request that your password be reset.","Signing in to Kaspersky Scan Engine","179694.htm");
Page[249]=new Array("This section describes the footer bar of Kaspersky Scan Engine GUI. The footer bar is in the lower-left corner of every page of Kaspersky Scan Engine GUI.","The footer bar contains the current user split button (@). After clicking this button, you can choose one of the following actions:","Change password and other settings of the current user profile.","Log out.","Open the page of the Kaspersky Scan Engine documentation where the current page of Kaspersky Scan Engine GUI is described.","View the current version of Kaspersky Scan Engine.","Using the footer bar","179706.htm");
Page[250]=new Array("This section describes the Kaspersky Scan Engine dashboard. It opens when you click Dashboard in Kaspersky Scan Engine GUI.","All information is displayed in the UTC timezone. You can switch to your local timezone on the User page.","Kaspersky Scan Engine dashboard","The Kaspersky Scan Engine dashboard displays the following information:","Information about Kaspersky Scan Engine:","The current status of Kaspersky Scan Engine","The information displayed indicates whether Kaspersky Anti-Virus Engine is running or not.","The Kaspersky Anti-Virus Engine initialization result","This result is displayed if the initialization of Kaspersky Anti-Virus Engine failed.","The KAV SDK version","Host name of the computer that Kaspersky Scan Engine was initialized on","Information about the license:","Information about the license key or activation code being used:","License key or activation code is valid.","License key or activation code expires soon&#8212;Contact your TAM to purchase a new license key or get a new activation code.","License key or activation code has expired&#8212;Replace the current license key or activation code with a new one.","The license expiration date","Information about the anti-virus database:","The date of the last update of the anti-virus database","The result of the last attempt of updating the anti-virus database","The anti-virus database version","The current state of the anti-virus database","One of the following database states is displayed:","Up to date.","Out of date&#8212;You must launch the database update.","Critically out of date&#8212;You must check your Internet connection and launch the database update as soon as possible.","Information about KSN:","The current status of KSN (whether the KSN server to which Kaspersky Scan Engine transfers data is available)","The date of the last KSN update","This information displays only if KSN is turned on.","This information is refreshed every several seconds.","The Kaspersky Scan Engine dashboard also contains a table with service events. The following Information about each event is included in the table:","Date&#8212;Date and time of the event.","Hostname&#8212;Host name of the computer on which Kaspersky Scan Engine is working.","Initiator&#8212;Initiator of the event.","If you have upgraded Kaspersky Scan Engine from version 2.0 to a newer version, the Initiator column does not contain information about the initiator of the events that occurred before the upgrade.","Module&#8212;Kaspersky Scan Engine module that processed the event.","Severity&#8212;Importance level of the event. The higher the level, the more important the event. ","Details&#8212;Additional information about the event.","The initial view of the table contains up to 50 last service events. You can scroll down the table to browse more service events. Using the table, you can do the following:","Select the time period during which the scan results are collected to be displayed in the table.","The time period you select is kept when you refresh the web page.","Specify a filter for the data to be displayed:","You can choose one or several modules that issued the events:","Updater module","Events from this module are related to updating of the anti-virus database.","Licensing module","Events from this module are related to the licensing functionality.","Scanning module","Events from this module are related to errors that occurred during scanning of objects.","Service","Events from this module can be either from HTTP Daemon or from ICAP Plug-in.","Audit","Events from this module are related to the system audit functionality.","You can choose one or several host names of the computers on which instances of Kaspersky Scan Engine collect service events.","You can also specify the severity of events to be displayed.","The filter you set is kept when you refresh the web page.","Save the contents of the table to a file by clicking Export.","Refresh the contents of the table manually by clicking Refresh.","The Kaspersky Scan Engine dashboard also contains several buttons that allow you to do the following:","Restart&#8212;Restart Kaspersky Scan Engine.","Update&#8212;Run the anti-virus database update.","Update from scratch&#8212;Download the anti-virus database from scratch.","This process occurs as follows:","Kaspersky Scan Engine stops.","The anti-virus database is deleted.","The anti-virus database is downloaded from the update server.","Kaspersky Scan Engine starts.","Change&#8212;(The button appears when the license has expired.) Navigate to the form that allows you to change the key file or activation code.","Kaspersky Scan Engine dashboard","179695.htm");
Page[251]=new Array("The Scan results page displays information about events with scan results generated by Kaspersky Scan Engine.","All information is displayed in the UTC timezone. You can switch to your local timezone on the User page.","The Scan results page contains the following tables:","Table with statistics about objects scanned by all instances of Kaspersky Scan Engine in a cluster","Table with statistics about objects scanned by the current instance of Kaspersky Scan Engine","The following information is displayed for both tables:","Total&#8212;The number of objects scanned by Kaspersky Scan Engine","Detections / Total&#8212;The ratio between detected objects and all scanned objects","Malware&#8212;The number of objects detected as malicious","Adware, etc.&#8212;The number of objects detected as legitimate software that can be used by intruders to damage computers or data","Clean&#8212;The number of clean objects","Table with scan results for every object scanned by Kaspersky Anti-Virus Engine","The following information is displayed:","Date&#8212;Date and time when the scan result is received","Hostname&#8212;Host name of the computer on which the instance of Kaspersky Scan Engine performed scanning","Client&#8212;IP address of the HTTP or ICAP client that sent the object to scan.","Danger level (@)&#8212;Danger level of the scanned object","Info&#8212;Name of the scanned file or the scanned URL","Scan result&#8212;Category of the scanned object:","Threat name or the name of legitimate software that can be used by intruders","Action&#8212;Action that was performed after a threat or legitimate software that can be used by intruders was detected:","Disinfected&#8212;Scanned object was disinfected","Deleted&#8212;Scanned object was deleted","Skipped&#8212;Scanned object was skipped","This information appears if Kaspersky Scan Engine works in HTTP mode, the scanned object is not a URL, and you did not select the Skip in the Action on detected objects setting of the Scanning settings page","Details&#8212;Additional information about the scanned object:","Version of the Kaspersky Scan Engine database ","MD5 hash of the scanned object (if a file was scanned)","SHA256 hash of the scanned object (if a file was scanned)","You can do the following:","Select the time period during which the scan results are collected for display in the table.","To do this, click the Date link.","This setting is retained and is not reset to its default value when the page is refreshed.","Specify a filter for the data to be displayed.","To do this, click the Danger level (@) icon.","Select the types of objects that you want to be displayed by selecting the corresponding check boxes:","Clean objects","Objects of High danger level","Objects of Medium danger level","Objects of Low danger level","This setting is retained and is not reset to its default value when the web page is refreshed.","Select the host names to be displayed.","To do this, click the Hostname link.","Click the Export button to save the table contents to a file.","Click the Refresh button to refresh the table contents manually.","The initial view of the table contains up to the last 50 scan results. You can scroll down the table to browse more scan results.","In the top right area of the Scan results page, you can click the Reset statistics button to clear the statistics of service events and events that have scan results.","Kaspersky Scan Engine scan results page","179696.htm");
Page[252]=new Array("The Cluster page allows you to manage Kaspersky Scan Engine instances that are part of a cluster.","Adding an instance of Kaspersky Scan Engine to a cluster","You can add a new or previously removed instance of Kaspersky Scan Engine to a cluster in the following ways:","During automatic installation.","During manual installation.","After the installation, by specifying the appropriate settings in the DatabaseSettings &gt; ConnectionString, DatabaseSettings &gt; User, and DatabaseSettings &gt; Password elements of klScanEngineUI.xml. The changes will take effect after you restart the service.","Cluster page contents","The Cluster page contains the following tabs:","Hosts","Settings profiles","Cluster settings","Hosts","The Hosts tab displays a continuously updated (every five seconds) table of Kaspersky Scan Engine clustered instances. This table contains the following columns:","Hostname&#8212;Host name of the computer that Kaspersky Scan Engine initialized on.","Status&#8212;Initialization result.","Integration mode&#8212;The mode of the Kaspersky Scan Engine instance: either HTTP mode or ICAP mode.","Anti-virus database version&#8212;Version of the Kaspersky Scan Engine anti-virus databases.","Also, this column may contain the update status with the following information:","Update is currently being performed","An error occurred during update","Settings profile&#8212;Name of the settings profile that is used in the Kaspersky Scan Engine instance.","If the name of the settings profile is Default, Kaspersky Scan Engine uses the preset settings. If the name is Custom, Kaspersky Scan Engine uses its own custom settings and does not use any settings profile.","On this tab, click the Options icon (@) to the left of the instance that you need, and then select any of the following actions:","Change profile settings&#8212;Specifies which settings profile must be used","Launch database update&#8212;Updates the Kaspersky Scan Engine anti-virus database","You cannot launch the update if it is currently running and if the instance of Kaspersky Scan Engine is deinitialized.","Enable logging&#8212;Enables debug logging in the instance of Kaspersky Scan Engine","Also, you can disable launched debug logging.","You cannot enable debug logging if the instance of Kaspersky Scan Engine is deinitialized.","Remove from cluster&#8212;Removes the instance from the cluster. If the cluster instance does not exist, it can take up to 5 minutes before this cluster instance is removed.","You cannot remove the instance of Kaspersky Scan Engine that is currently used.","Settings profiles","This tab displays a list of Kaspersky Scan Engine settings profiles created by a Kaspersky Scan Engine user. You can view the following data for each settings profile:","Name of the settings profile","Description of the settings profile ","The description may be absent if you have not specified it.","Service mode","Kaspersky Scan Engine mode (either ICAP or HTTP) for which the settings profile has been created.","List of host names of Kaspersky Scan Engine instances that use the selected settings profile","It is allowed that the profile is not used by any of the Kaspersky Scan Engine instances.","You can add a new settings profile, or edit or delete an existing profile.","To add a new settings profile:","Click the Add button above the list of all settings profiles.","The wizard for adding a new settings profile opens.","In the Profile info tab, specify the following settings:","Name&#8212;Name of the settings profile","This setting is mandatory. The name must differ from the ones created previously and the ones reserved by Kaspersky Scan Engine (Default and Custom), and it must contain up to 16 symbols.","Description&#8212;Description of the settings profile","This setting is optional. The description must contain up to 256 symbols.","Service mode&#8212;The mode of the Kaspersky Scan Engine instance: either HTTP mode or ICAP mode.","This setting is mandatory.","If needed, select the Use these host settings as base checkbox to configure the profile by using the settings of the Kaspersky Scan Engine instance that is currently running.","If this checkbox is not selected, the default settings are used depending on the working mode (HTTP or ICAP).","Click Next.","In further steps, specify Kaspersky Scan Engine settings of different types, depending on the working mode (HTTP or ICAP). You can configure most of the parameters located on the Settings page, except for the settings from the License and Password sections, and the connection settings in the Service section:","In the Service tab, specify service settings","In the Scanning tab, specify scanning settings","In the Update tab, specify update settings","In the ICAP rules tab, specify ICAP rules","In the Logging tab, specify logging settings","In the Proxy tab, specify proxy settings","In the Summary tab, check the summary information about the settings profile.","Click Save.","You can also save current changes at each step of the procedure.","To edit an existing settings profile:","Locate a settings profile that you want to edit, and then click the Edit button above the section with a brief description of the profile.","The wizard for editing the settings profile opens.","Edit the settings that you need.","You can edit all of the settings that are described in the procedure for adding a new settings profile above.","To delete an existing settings profile:","Click the Delete (@) icon next to the settings profile that you need to delete.","Click Confirm to confirm the action.","After the deletion is complete, the instances that use the settings of the deleted profile will continue using its configuration.","Cluster settings","On this tab, you can configure Kaspersky Scan Engine to automatically remove from the cluster those instances that are inactive for a specified period of time. ","An instance is considered inactive if no service events have been registered from that instance. After removing an instance from a cluster, Kaspersky Scan Engine also deletes all service events associated with the instance. Kaspersky Scan Engine does not delete events with scan results.","To configure automatic removal of inactive cluster instances:","Turn on the Enable automatic removal toggle switch.","Specify the inactivity period in hours.","To avoid accidental removal of a cluster instance, do not set the inactivity period to less than 24 hours.","Click Save.","If a previously removed instance becomes active, it can reconnect to the cluster. ","To reconnect an instance to a cluster:","Change the instance host name.","Restart the Kaspersky Scan Engine services:","For HTTPD mode, restart the kavhttpd service: ","systemctl restart kavhttpd","For ICAP  mode, restart the kavicapd service: ","systemctl restart kavicapd","If you are using the Kaspersky Scan Engine GUI, restart the klScanEngineUI service: ","systemctl restart klScanEngineUI","Managing Kaspersky Scan Engine cluster instances","201264.htm");
Page[253]=new Array("This section describes web pages that contain Kaspersky Scan Engine settings of different types.","If you change any parameters on the Settings page when using a specific settings profile in the current Kaspersky Scan Engine instance, you will be prompted to stop using this settings profile for the instance. If you agree, the instance will use its own custom settings and the name of the settings profile for this instance will be displayed as Custom in the Hosts table. This applies for most changes on the Settings page, except for changes in the License and Password sections, and changes in the connection settings in the Service section.","Kaspersky Scan Engine settings pages","179697.htm");
Page[254]=new Array("This section describes the Service section of the Settings page.","Service settings","If Kaspersky Scan Engine is initialized in HTTP mode, you can specify the following settings:","Protocol&#8212;Select HTTP, HTTPS, or a UNIX domain socket.","Address that Kaspersky Anti-Virus Engine listens on for incoming objects to check.","It can be either a UNIX socket, or an IP address and port.","Private key path&#8212;Path to the private key file for connection over HTTPS (TLS) protocol.","This can be either an absolute or a relative path. A relative path is calculated relative to the kavhttpd binary file.","You must specify this setting if the HTTPS protocol is selected.","When you configure this parameter, the following message may appear in the table with service events of the Kaspersky Scan Engine dashboard: \"Your private key has a low security level. Please check the permissions for the file &lt;path&gt;.\" In this case, you must configure access to the private key file so that only the root user and the user account under which the service is running can have the read permission.","Certificate&#8212;Path to the certificate file for connection over HTTPS (TLS) protocol.","This can be either an absolute or a relative path. A relative path is calculated relative to the kavhttpd binary file.","You must specify this setting if the HTTPS protocol is selected.","Keep-alive connection&#8212;Indicates whether Keep-Alive must be used.","Connection timeout&#8212;The amount of time an idle connection has to be kept open (in milliseconds), waiting for a new request from an HTTP client.","The range of possible values is from 0 to 18000. If this parameter is set to 0, there is no time limit for the connection.","Maximum requests per connection&#8212;The maximum number of requests for one connection before the connection is closed.","The range of possible values is from 0 to 1000. If this parameter is set to 0, the number of requests for one connection is not limited.","Under Locations where remote scanning is allowed, you can specify paths to the locations where scanning is allowed when an HTTP client sends scan requests over a TCP socket from a remote computer. Scanning in other locations is prohibited. These paths are located in the file system of the computer with the Kaspersky Scan Engine server. Restricting the scan area prevents scanning the whole file system of the Kaspersky Scan Engine server by a command from the outside.","It is not recommended to use links as paths, due to security reasons. Use absolute paths instead.","Kaspersky Scan Engine does not add or remove objects in the directories specified in Locations where remote scanning is allowed. The HTTP client has to send objects to scan, then remove them after scanning.","Possible values:","Absolute paths to a directory","This value allows you to scan files that are located inside this directory and all its subdirectories.","The directory must be located on the same computer as Kaspersky Scan Engine or on a remote hard disk mounted on that computer. ","The path must start from the root directory of the computer that Kaspersky Scan Engine is installed on.","The kavhttpd service must have permissions to read files in the directory and its subdirectories.","Absolute path to a file","Allows you to scan the specified file.","The file must be located on the same computer as Kaspersky Scan Engine or on a remote hard disk mounted on that computer. ","The path must start from the root directory of the computer that Kaspersky Scan Engine is installed on.","The kavhttpd service must have permissions to read the file.","/ (forward slash)","Allows you to scan all files.","Cross-origin resource sharing&#8212;Specifies the list of origins (IP addresses or host names with a protocol) to which access to the kavhttpd service must be provided.","Possible values:","IP address or host name with a protocol ","*","This value allows any origin to access the kavhttpd service.","Empty value","This setting is stored in the CORS element of the HTTP mode configuration file.","In Windows, we recommend specifying the full path to a file. In particular, it is strongly recommended to specify the full paths to the certificate (Certificate) and the key file (Private key path).","If Kaspersky Scan Engine is initialized in ICAP mode, you can set the following settings:","Port number&#8212;Specifies the port that Kaspersky Scan Engine listens on for ICAP requests with contents to scan.","Send code 204&#8212;Specifies whether Kaspersky Anti-Virus Engine must send the 204 code.","Request mode address&#8212;The address that kavicapd uses to process requests in the request mode. ","The default value is req.","Kaspersky Scan Engine includes the value from Request mode address in the URL, for example:","icap://icap-server.example.com:1344/req","Do not use the same value for Request mode address and Response mode address.","Response mode address&#8212;The address that kavicapd uses to process requests in the response mode.","The default value is resp.","Kaspersky Scan Engine includes the value from Response mode address in the URL, for example:","icap://icap-server.example.com:1344/resp","Keep-alive connection&#8212;Indicates whether Keep-Alive must be used.","Use Keep-alive unconditionally&#8212;Indicates whether Kaspersky Scan Engine always uses a Keep-Alive connection, even when ICAP clients do not request it.","Connection timeout&#8212;The amount of time an idle connection has to be kept open (in milliseconds), while waiting for a new request from an ICAP client.","The range of possible values is from 1 to 10000.","Maximum requests per connection&#8212;The maximum number of requests for one connection before the connection is closed.","The range of possible values is from 1 to 1000.","Partial mode&#8212;Allows scanning of files as a whole and partially sending them to a user before the scan is finished.","Possible settings for partial mode:","Delay&#8212;Specifies the interval (in seconds) between the start of receiving an object and the start of sending its first part.","Chunk size&#8212;Specifies the size of object chunks transferred in the period between the start of receiving an object and the end of scanning.","Prevent re-downloading&#8212;Prevents a browser attempt to re-download a blocked file after the connection is broken.","Maximum cache size&#8212;Maximum cache size for blocked URLs, in KB.","This is the maximum amount of RAM that can be allocated for a blocked URL's cache.","The range of possible values is from 1 to 100000.","The preset value is 5000.","Lifetime for blocked URLs&#8212;Lifetime for blocked URLs in the cache, in seconds.","The range of possible values is from 1 to 604800 (one week).","The preset value is 1800.","Additional headers:","User name HTTP header&#8212;The name of the HTTP header in which the username of the HTTP client is passed to the ICAP service.","The ICAP service will write this value to logs.","The preset value is X-Client-Username.","IP address HTTP header&#8212;The name of the HTTP header in which the IP address of the HTTP client is passed to the ICAP service.","The ICAP service will write this value to logs.","The preset value is X-Client-IP.","Detected object name HTTP header&#8212;The name of the header field that contains the name of the detected threat.","The ICAP service will write this value to logs.","By default, the value of this setting is empty.","Database version name HTTP header&#8212;The name of the header field that contains information about the anti-virus database version used by Kaspersky Scan Engine to scan objects.","Send X-Include&#8212;Specifies whether Kaspersky Scan Engine includes the X-Include header in its response to the OPTIONS request from the ICAP client. To enable sending the X-Include header, select one or both of the following checkboxes:","Request user name HTTP header&#8212;The value specified in User name HTTP header. If User name HTTP header is empty, the Request user name HTTP header checkbox is disabled.","Request IP address HTTP header&#8212;The value specified in IP address HTTP header. If IP address HTTP header is empty, the Request IP address HTTP header checkbox is disabled.","If none of these elements is selected, Kaspersky Scan Engine does not include the X-Include header to responses.","Send X-Infection-Found header&#8212;Specifies whether Kaspersky Scan Engine includes the X-Infection-Found header in its response to the ICAP client.","By default, Kaspersky Scan Engine does not include the X-Infection-Found header to responses.","Send X-Violations-Found header&#8212;Specifies whether Kaspersky Scan Engine includes the X-Violations-Found header in its response to the ICAP client.","By default, Kaspersky Scan Engine does not include the X-Violations-Found header to responses.","Send X-Response-Info header&#8212;Specifies whether Kaspersky Scan Engine includes the X-Response-Info header in its response to the ICAP client.","By default, Kaspersky Scan Engine does not include the X-Response-Info header to responses.","Send X-Response-Desc header&#8212;Specifies whether Kaspersky Scan Engine includes the X-Response-Desc header in its response to the ICAP client.","By default, Kaspersky Scan Engine does not include the X-Response-Desc header to responses.","Action on signal&#8212;An action that must be performed on receiving the SIGUSR1 and SIGUSR2 signals.","In the SIGUSR1 signal and SIGUSR2 signal drop-down lists, you can select the following actions for both signals:","Update and reload the anti-virus database&#8212;Updates and reloads the database by using built-in functionality of Kaspersky Scan Engine.  ","Reload the anti-virus database without updating&#8212;Reloads the database without updating it.","It is assumed that the files in the database directory are already up to date and must be reloaded.","Close log files in syslog format, then reopen them&#8212;Closes all log files in the syslog format that are being opened, then opens them again for writing logs at the end of these files.","If the files are missing, the ICAP plug-in will create them. This setting allows rotating the logs by using the logrotate utility in default mode or when the create directive is used.","For either mode you can specify the following settings under Maximum values:","Sessions&#8212;Maximum number of sessions.","The default value is 10.","It is not recommended to specify a value greater than the number of TCP connections that your HTTP client can simultaneously maintain with Kaspersky Scan Engine.","Connections&#8212;Maximum number of active TCP connections that KAV HTTP can maintain simultaneously.","The default value is 100.","Threads&#8212;Maximum number of scanning threads. You can have up to 256 scanning threads. ","The default value is 8.","Processes&#8212;Maximum number of scanning processes. You can have up to 256 scanning processes. ","The default value is 4.","When you apply new service settings, Kaspersky Anti-Virus Engine restarts.","Service settings","179698.htm");
Page[255]=new Array("This section describes the Scanning section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","The Scanning section contains the following settings:","Enable reputation checking&#8212;Indicates whether Kaspersky Security Network (KSN) must be used.","If this toggle switch is turned to On and the End-User License Agreement (EULA) for KSN is not accepted, the EULA will be displayed and you must accept it in order to use KSN.","Enable Phishing Protection&#8212;Indicates whether the anti-phishing protection is turned On or Off.","Object scan timeout&#8212;Timeout period, in milliseconds, for scanning a single object","Heuristic analysis level&#8212;Drop-down list provides levels of heuristic analysis","The level can be one of the following:","Disabled","Low","Medium","High","Actions on detected objects&#8212;To be performed after a threat or legitimate software that can be used by intruders is detected","This setting is available if Kaspersky Anti-Virus Engine is initialized in HTTP mode. You can select one of the following actions:","Disinfect and delete if cannot be disinfected","Disinfect and skip if cannot be disinfected","Delete","The above actions will be performed only if Kaspersky Anti-Virus Engine detects a threat while processing a scanfile request. In all other cases, Kaspersky Scan Engine will only notify if the specified actions can be applied to the detected object.","Skip","Size limit for the received file&#8212;Specifies the maximum size (in kilobytes) of a file that Kaspersky Scan Engine can scan. If this parameter is set to 0, Kaspersky Scan Engine scans files of any size. The maximum value for this parameter is 1073741824.","Maximum depth&#8212;Specifies the maximum depth of nested archives to be unpacked during scanning.","This parameter is available only if the Archives check box is selected in the Types of files to scan section below.","Under Types of files to scan, you will find check boxes for the following settings:","Packed objects&#8212;Indicates whether packed objects must be scanned","Archives&#8212;Indicates whether archives must be scanned","Email databases&#8212;Indicates whether email clients' databases must be scanned","Emails&#8212;Indicates whether email messages must be scanned","Macros in Microsoft Office documents&#8212;Indicates whether Microsoft Office macros and documents must be scanned","Types of objects that must be scanned in request modification (REQMOD) mode","This setting is available if KAV Engine is initialized in ICAP mode. You can select one of the following object types:","URLs","Files","Types of objects that must be scanned in response modification (RESPMOD) mode","This setting is available if KAV Engine is initialized in ICAP mode. You can select one of the following object types:","URLs","Files","Formats of objects that must not be scanned","Clicking the Exclusions by file formats link opens the File formats to exclude window.","Types of objects that must not be scanned","This setting is available if KAV Engine is initialized in ICAP mode. To specify exclusions by object type:","Click the Exclusions by Content-Type link.","The Object types to exclude window opens.","Set the object types that must not be scanned.","Kaspersky Scan Engine matches the Content-Type HTTP header to the values of this exclusion rule. If the Content-Type HTTP header contains the specified value, the ICAP plug-in does not scan this object.","Click Add, if you need to add another exclusion rule.","Click Apply to apply this setting.","To apply this setting, you have to configure a proxy server to send previews to the ICAP server.","URLs that must not be scanned","This setting is available if KAV Engine is initialized in ICAP mode. To specify exclusions by URL:","Click the Exclusions by URL link.","The Exclusion rules for URLs window opens.","Set the URLs to skip.","Kaspersky Scan Engine will skip these URLs. Specified URLs must not include scheme, query, and fragment components. ","It is allowed to use masks. You can specify the asterisk (*) wildcard character as a substitute for a sequence of characters that constitute an entire domain name from the third level of the domain and above. For example, *.domain.com. This value includes all subdomains of domain.com. The asterisk (*) and question mark (?) wildcard characters can be used in a path component of the URL to substitute for any sequence of characters, or a single character, respectively. For example, domain.com/test/page/*. ","Click Add, if you need to add another exclusion rule.","Click Apply to apply this setting.","To apply this setting, you have to configure a proxy server to send previews to the ICAP server.","Maximum object size that can be scanned","This setting is available if KAV Engine is initialized in ICAP mode. To specify exclusions by object size:","Click the Skip large objects toggle button.","Set the maximum object size that can be scanned in kilobytes (KB).","If this setting is specified, Kaspersky Scan Engine expects to receive previews and compares the value of the Content-Length HTTP header to the value of this setting and also checks the actual object size. If either the header value or the actual object size is greater than the specified value, the ICAP plug-in does not scan the object. This applies both to requests made in preview mode and regular requests.","To apply this setting, you have to configure a proxy server to send previews to the ICAP server.","When you apply new scanning settings, KAV Engine restarts.","Scanning settings","179699.htm");
Page[256]=new Array("This section describes the Authorization section of the Settings page.","If an error occurred during the loading of the web page and the settings are unavailable, reload the page.","The Authorization section contains the following settings:","Enable HTTP clients authorization. Indicates whether Kaspersky Scan Engine should use API token authorization.","HTTPS connection is required for API token authorization.","Authorization header field. The name of the request header field that contains the API token. The value you specify here must meet the following requirements:","3 to 40 characters long.","Consists of characters allowed for header field names according to RFC 7230.","The default value is Authorization.","Add bearer prefix. Indicates whether Kaspersky Scan Engine supports the Bearer authentication scheme. If this toggle switch is turned on, Kaspersky Scan Engine expects that the request header field, named as specified in Authorization header field, starts with the Bearer prefix.","Managing tokens","The API Tokens table contains the following information about API tokens:","Token name. Each token has a unique name.","Description. Some descriptions may be missing. This property is optional.","Status. Kaspersky Scan Engine authorizes an HTTP client only if its token is enabled."," From the table, you can edit (@) or delete (@) an existing token. Editing a token is similar to adding a token (see the instruction below).","To add a new token:","Click the Add token button.","Specify the parameters of the new token:","Name. The unique name of the token. The name must contain from 1 to 40 Unicode characters.","Description. Additional information about the token. For example, the name of the token owner. The description can contain up to 1000 Unicode characters.","Token. The token that the client must send to the Kaspersky Scan Engine API for authorization. The value must be unique and contain from 4 to 100 ASCII characters. There must be at least one uppercase Latin letter, one lowercase Latin letter, one digit, and one of the following special characters: -._~+/).","To make Kaspersky Scan Engine generate a unique token for you, click the Generate token button. The generated token appears in the Token field. You can change this value if you want.","Copy the token somewhere you can find it later. After you click Save, the token will not be available in the Kaspersky Scan Engine GUI. In the kavhttpd.xml configuration file, the token value is encrypted. If you have forgotten or lost a token, you can generate a new token instead.","Enable token. Turn on this toggle switch if you want Kaspersky Scan Engine to authorize clients that specified the token in the request header. If the toggle switch is turned off, Kaspersky Scan Engine does not authorize clients that specified the token in the request header.","If you have enabled API token authorization and the kavhttpd service is not running, starting klScanEngineUI will also initiate the start of the kavhttpd service.","Click Save.","The new token appears in the API Tokens table.","Authorization settings","224195.htm");
Page[257]=new Array("This section describes the ICAP rules page of Kaspersky Scan Engine GUI. Using the ICAP rules page, you can add, remove, and edit ICAP rules. You can create as many ICAP rules as you want.","This page is available if Kaspersky Scan Engine is initialized in ICAP mode.","ICAP rules page","If an error occurred while loading the web page and the settings are unavailable, reload the page.","When you open the ICAP rules page, Kaspersky Scan Engine reads the following data, which is to be used when editing ICAP rules:","Names of the response patterns that are stored in the directory specified in the ResponsesPath element of the ICAP Plug-in configuration file","Names of the scripts that are stored in the directory specified in the CmdPath element of the ICAP Plug-in configuration file","A single ICAP rule contains the following fields:","ICAP mode that is relevant for the rule","You can select one of the following ICAP modes:","Request mode","Response mode","Any","Scan result after which the rule is activated","You can select one of the following scan results:","Detected","Not scanned","Failed","Macro","Phishing","Any","Clean","Response pattern","This response pattern is used on a blocked web page after the rule is activated.","When the ICAP rules web page is loaded, you can choose one of the response patterns received by Kaspersky Scan Engine. In an ICAP rule, you can specify either the response pattern or the script to execute, but not both.","You can leave this field empty.","Script to execute","This script is executed after the rule is activated.","When the ICAP rules web page is loaded, you can choose one of the scripts got by Kaspersky Scan Engine. In an ICAP rule, you can specify either the response pattern or the script to execute, but not both.","You can leave this field empty.","Kaspersky Scan Engine does not process the rules where Scan result is set to Any and Action is set to None. You must avoid using these rules (see the table below).","Incorrect ICAP rules","ICAP mode","Scan result","Action","Response mode","Any","None","Request mode","Any","None","Any","Any","None","ICAP rules","180283.htm");
Page[258]=new Array("This section describes the Update section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","The Update section contains the following settings:","Enable automatic updates&#8212;Indicates whether Kaspersky Anti-Virus Engine must periodically update the anti-virus database","Automatic update period&#8212;Duration (in minutes) of the automatic update of the anti-virus database","You can set this period only if the anti-virus database is updated automatically.","We recommend that you set this period to 30 minutes. We do not recommend that you specify a lesser value: a lower value will not increase the detection rate, but rather can cause instability of Kaspersky Scan Engine.","Update from Kaspersky servers&#8212;Indicates whether KAV Engine must use only Kaspersky update servers","Custom sources&#8212;Web addresses of the custom update source","Setting these web addresses (and clicking the Add source button) is mandatory if KAV Engine must use only custom update sources.","If Kaspersky Scan Engine must use TLS when connecting to a custom update source, you must specify the https:// protocol in the address of this custom update source.","Use Kaspersky servers if custom sources are unavailable&#8212;Select this check box if you want Kaspersky Scan Engine to use this option.","Back up the anti-virus database&#8212;In the On position, the toggle switch indicates that KAV Engine will back up the anti-virus database. By default, this setting is enabled.","Update settings","179701.htm");
Page[259]=new Array("This section describes the License section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","When Kaspersky Scan Engine works in a cluster containing multiple instances, the imported license will be applied to all instances of this cluster.","The License section displays the following information:","Key file:","Key file name","This name is available in Simple licensing mode&#8212;that is, if Kaspersky Scan Engine uses a key file.","Activation code","It is available in Online licensing mode&#8212;that is, if Kaspersky Scan Engine uses an activation code.","Expiration date","Date on which the license expires.","Licensing web page","To replace the current key file or activation code with a new one:","Click the Change button.","The License Replacement Wizard starts.","Specify the new licensing mode.","To specify Simple licensing mode, select the Key file option.","To specify Online licensing mode, select the Activation code option.","Specify either the new key file or activation code depending on the licensing mode that you selected.","Click Activate.","License replacement page","License settings","179702.htm");
Page[260]=new Array("This section describes the Logging section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","The Logging section contains two subsections: Syslog and Log files.","The Syslog section allows you to do the following:","Start or stop syslog logging","If you enable sending syslog messages, consider that these messages will contain sensitive data, such as personal data as defined by GDPR, configuration data of the product, and licensing information.","Specify syslog logging settings","The settings for HTTP mode and ICAP mode are different.","To add and configure the destination for syslog messages in HTTP or ICAP mode:","Choose the types of events that will be logged into the specified destination.","When syslog logging is enabled, the Audit events cannot be completely excluded from syslog messages.","Specify the format of syslog messages:","CEF","The format of CEF logs is different in HTTP mode and ICAP mode.","RAW","The format of RAW logs is different in HTTP mode and ICAP mode.","Choose the destination that will be used for writing logs:","syslog daemon","file","Specify the path to the directory where the log file will be created. This path could be absolute or relative to the directory that holds the executable file of the service (kavhttpd for HTTP mode and kavicapd for ICAP mode).","remote syslog","Specify the %PROTOCOL%%IP%:%PORT% value, where %PROTOCOL% is a network protocol (use tcp:// or udp:// for this value), %IP% is an IPv4 address that receives syslog messages, and %PORT% is a port that receives syslog messages.","The Log files section allows you to do the following:","Start or stop debug logging","If you enable debug logging, consider that the log messages will contain sensitive data, such as personal data as defined by GDPR, configuration data of the product, and licensing information.","Export log files","This action is available if debug logging is stopped.","Delete logs","This button is available if debug logging is stopped.","The Log files section also displays:","Log directory&#8212;Path to the directory where log files will be stored","You cannot change this setting by using the Kaspersky Scan Engine GUI. You must edit the corresponding configuration file. Depending on the mode that you chose in the Kaspersky Scan Engine configuration file, specify the path in httpdkavlog.ini or icapdkavlog.conf for HTTP mode and ICAP mode, respectively.","Log size (MB)&#8212;Current log size in megabytes.","Logging settings","179703.htm");
Page[261]=new Array("This section describes the Proxy section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","The Proxy section contains the following settings:","Use proxy server&#8212;Indicates whether Kaspersky Anti-Virus Engine must use a proxy server","Proxy address&#8212;IP address or host of the proxy server","This setting is available if a proxy server is used.","Port&#8212;Port of the proxy server","This setting is available if a proxy server is used.","User name (optional)&#8212;Proxy login","This setting is available if a proxy server is used. The login is hidden, and asterisks are displayed instead of its characters. The proxy login is stored encrypted.","Password (optional)&#8212;Proxy password","This setting is available if a proxy server is used. The password is hidden, and asterisks are displayed instead of its characters. The proxy password is stored encrypted.","Proxy settings","179704.htm");
Page[262]=new Array("This section describes the Users section of the Settings page.","If an error occurred during loading of the web page and the settings are unavailable, reload the page.","The Users section displays the following information:","List of the existing user profiles","The following information is displayed for every user profile:","Login&#8212;the unique name of the user.","Full name&#8212;the full name of the user. Does not have to be unique.","Role&#8212;the role of the user.","Possible values:","Administrator","Operator","Last login&#8212;the time and date when the user logged in the last time.","You can add a new user profile, or edit or delete an existing user profile.","Adding a new user profile","To add a new user profile:","Click the Add new user button to the top right of the user list.","A User sidebar appears on the right. ","Fill in the required fields:","Login","The unique name of the user. This is a mandatory field.","Full name","The full name of the user. This is an optional field.","Password","The password. This is a mandatory field. The value must meet password requirements.","Confirm password","Same as the above. This is a mandatory field.","Role","The role of the user. This is a mandatory field.","If you want Kaspersky Scan Engine to display the local date and time instead of the date and time in UTC, turn on the Use local timezone toggle switch. This change will only affects the user that you are editing.","Click Save.","Editing a user profile","You cannot change the user role for the profile you are currently working under.","To edit a user profile:","On the row with the user profile that you want to change, click the Edit (@) button."," A User sidebar appears on the right.","Edit the settings that you need.","When you change login or password of a user profile, Kaspersky Scan Engine GUI logs out this profile. When you change the role of a user profile, the changes are applied the next time someone logs in with this profile.","Click Save.","Deleting a user profile","You cannot delete the user profile that you are currently working under.","To delete a user profile:","On the row with the user profile that you want to delete, click the Delete (@) button.","A Delete user sidebar appears on the right.","Click Confirm.","When you delete a user profile, Kaspersky Scan Engine GUI logs out this profile.","Users settings","219610.htm");
Page[263]=new Array("You can export Kaspersky Scan Engine settings as a ZIP archive with a set of configuration files. ","The archive contains the following configuration files:","klScanEngineUI.xml","For HTTP mode:","kavhttpd.xml","httpdkavlog.ini","For ICAP mode:","kavicapd.xml","icapdkavlog.conf","To export the settings,","Click the Export configuration files button on the bottom left of any Kaspersky Scan Engine setting page. ","Exporting the settings","221467.htm");
Page[264]=new Array("To change the password for gaining access to the Kaspersky Scan Engine GUI:","Click  the current user split button (@) on the footer bar, and then click Profile."," Your profile opens on the right.","Fill out the input fields:","Current password&#8212;Specify the current password.","New password&#8212;Specify the new password.","Confirm new password&#8212;Confirm the new password.","All passwords are hidden, and asterisks are displayed instead of their characters.","Click Save.","After you change the password, all the sessions for the active account except the current one will be closed.","Password requirements","A password for gaining access to Kaspersky Scan Engine GUI must meet the following requirements:","Password must contain only ASCII letters, digits, and the following special symbols:","! \" # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ ` { | } ~","Password must contain at least one Latin lowercase letter.","Password must contain at least one Latin uppercase letter.","Password must contain at least one digit.","A password must contain at least one special symbol (!, #, @, and so on).","Password length must be from 6 to 16 symbols inclusive.","Changing password","179705.htm");
Page[265]=new Array("You can run the klScanEngineUI.exe binary file manually.","Working with the klScanEngineUI binary file in Linux","Linux syntax:","./klScanEngineUI [[-c &lt;path&gt;] [-p &lt;path&gt;] | [-w] | [-n] | [-v] | [-h]]","The table below describes the klScanEngineUI options in Linux.","The klScanEngineUI options in Linux","Option","Description","-c &lt;path&gt;","--config &lt;path&gt;","Optional parameter.","Specifies the path to the configuration file for the klScanEngine UI service.","-p &lt;path&gt;","--pidfile &lt;path&gt;","Optional parameter.","Specifies the path to the PID file.","-w","--watchdog","Optional parameter.","Runs the klScanEngine UI service in watchdog mode.","In this mode, the klScanEngine UI automatically restarts if it freezes or crashes.","-n","--no-daemon","Optional parameter.","Enables nodaemon mode for the klScanEngine UI service.","Specifying this parameter forces the klScanEngine UI service to run in the foreground.","-v","--version","Optional parameter.","Shows the Kaspersky Scan Engine version.","-h","--help","Optional parameter.","Shows Help.","Working with the klScanEngineUI binary file in Windows","Windows syntax:","klScanEngineUI.exe [[--svc] | [--reg] | [--del] | [-v] | [-h]]","The table below describes the klScanEngineUI options in Windows.","The klScanEngineUI options in Windows","Option","Description","--svc","Starts the service.","--reg","Adds the klScanEngine UI service to the list of Windows services.","The name of the service and its displayed name is Kaspersky ScanEngine UI.","--del","Deletes the klScanEngine UI service from the list of Windows services.","-v","--version ","Optional parameter.","Shows the Kaspersky Scan Engine version.","-h","--help","Optional parameter.","Shows Help.","Working with the klScanEngineUI binary file","185278.htm");
Page[266]=new Array("For Linux systems only.","You can run the Kaspersky Scan Engine GUI service by using the klScanEngineUI.service unit file for systemd. The unit file allows you to add the klScanEngineUI service to the service startup list and to manage the service manually from the command line.","This section assumes that you want to add the klScanEngineUI service for all users. For information on how to add and manage a service under a specific user, please see the official documentation for systemd and systemctl.","Starting Kaspersky Scan Engine automatically","To start Kaspersky Scan Engine automatically, add klScanEngineUI to the service startup list.","To add klScanEngineUI to the service startup list:","Place the klScanEngineUI.service unit file in the /etc/systemd/system/ directory.","If necessary, edit the unit file.","Reload systemd by running the following command:","systemctl daemon-reload","Make sure that the klScanEngineUI.service unit file is installed by running the following command:","systemctl list-unit-files","Enable klScanEngineUI to launch when the system starts by running the following command:","systemctl enable klScanEngineUI.service","Remove Kaspersky Scan Engine from the service startup list","To remove klScanEngineUI from the service startup list, run the following command:","systemctl disable klScanEngineUI.service","Managing Kaspersky Scan Engine with systemd from the terminal","To start klScanEngineUI without rebooting the computer, run the following command:","systemctl start klScanEngineUI","After this command is executed, the script prints the [OK] message and immediately returns control to the terminal, but it will take the klScanEngineUI service some time to start.","To stop klScanEngineUI without rebooting the computer, run the following command:","systemctl stop klScanEngineUI","Running the klScanEngineUI service with systemd unit file (Linux)","192471.htm");
Page[267]=new Array("For Linux systems only.","You can configure Kaspersky Scan Engine by changing one or more variables in its unit file, %distr_kit%/etc/klScanEngineUI.service.","Changing the path to the Kaspersky Scan Engine PID file","You can change this variable if you want to create a PID file of Kaspersky Scan Engine in a directory other than /var/run/klScanEngineUI.pid.","The following example shows how this variable is set in the unit file:","PIDFile=/var/run/klScanEngineUI.pid","Changing environment variables","You must change these environment variables if Kaspersky Scan Engine is located in a directory other than /opt/kaspersky/ScanEngine.","The unit file uses the following environment variables:","SDKPATH&#8212;Specifies the directory where Kaspersky Scan Engine is located. The following example shows how this variable is set in the unit file:","Environment=SDKPATH=/opt/kaspersky/ScanEngine","KL_PLUGINS_PATH&#8212;Specifies the path to the directory containing the PPL plug-in files used by Kaspersky Scan Engine. The following example shows how this variable is set in the unit file:","Environment=KL_PLUGINS_PATH=/ppl","LD_LIBRARY_PATH&#8212;Specifies the path to the directory containing the shared libraries used by Kaspersky Scan Engine. The following block shows how this variable is set in the unit file:","Environment=LD_LIBRARY_PATH=/lib:/ppl","Changing paths in the command executed on klScanEngineUI startup","You must change paths in the command executed on klScanEngineUI startup if you put the klScanEngineUI executable file or the klScanEngineUI configuration file in directories different from the ones specified in the unit file, or if you want to create a PID file of Kaspersky Scan Engine in a directory other than /var/run/klScanEngineUI.pid.","The following example shows how this command is set in the unit file:","ExecStart=/bin/sh -c 'cd ${SDKPATH}/bin; ./klScanEngineUI -c /etc/klScanEngineUI.xml -p /var/run/klScanEngineUI.pid'","Changing variables in the klScanEngineUI unit file (Linux)","192481.htm");
Page[268]=new Array("This section describes common configuration details of Kaspersky Scan Engine.","Kaspersky Scan Engine configuration","206592.htm");
Page[269]=new Array("This section describes the Kaspersky Scan Engine configuration file.","The Kaspersky Scan Engine configuration file is an XML file named klScanEngineUI.xml. It resides in the etc subdirectory of the Kaspersky Scan Engine installation directory.","The table below describes the elements of the Kaspersky Scan Engine configuration file.","Scan Engine configuration file elements","Element","Description","EULA/Common","Specifies whether the End User License Agreement (EULA) for Kaspersky Scan Engine is accepted:","accepted","EULA for Kaspersky Scan Engine is accepted.","rejected","EULA for Kaspersky Scan Engine is not accepted.","EULA/KSN","Specifies whether the EULA for Kaspersky Security Network (KSN) is accepted:","accepted","EULA for KSN is accepted.","rejected","EULA for KSN is not accepted.","ServerSettings/EnableUI","Specifies whether the web service that implements Kaspersky Scan Engine GUI must be turned on:","0 (or false)","Web Service will not be initialized.","In this case all the settings in the ServerSettings and DatabaseSettings elements do not affect anything.","1 (or true)","An attempt to initialize Web Service will be made.","ServerSettings/Mode","Kaspersky Scan Engine mode:","httpd","Kaspersky Anti-Virus Engine will be initialized as HTTPD.","icap","Kaspersky Anti-Virus Engine will be initialized as an ICAP plug-in.","ServerSettings/ConnectionString","IP address (or host) and port at which Kaspersky Scan Engine GUI will be available.","You must access Kaspersky Scan Engine GUI from a computer on which Kaspersky Scan Engine is installed. In this case the Kaspersky Scan Engine documentation will also be available for you.","ServerSettings/SSLCertificatePath","Path to a Kaspersky Scan Engine certificate in PEM format.","This can be either absolute or a relative path. A relative path is calculated relative to the Kaspersky Scan Engine binary file.","ServerSettings/SSLPrivatePath","Path to a Kaspersky Scan Engine private key in PEM format.","This can be either absolute or a relative path. A relative path is calculated relative to the Kaspersky Scan Engine binary file.","ServerSettings/TemplatesPath","Path to the directory in which the templates for Kaspersky Scan Engine GUI are stored.","This can be either absolute or a relative path. A relative path is calculated relative to the Kaspersky Scan Engine binary file.","DatabaseSettings/ConnectionString","IP address and port at which the database that Kaspersky Scan Engine uses for storing data is available.","DatabaseSettings/User","Encrypted user name used to authenticate in the database that Kaspersky Scan Engine uses for storing data. The user name is encrypted by the kav_encrypt utility.","DatabaseSettings/Password","Encrypted password used to authenticate in the database that Kaspersky Scan Engine uses for storing data. The password is encrypted by the kav_encrypt utility.","Below is an example of the Kaspersky Scan Engine configuration file.","&lt;Settings&gt;","&lt;EULA&gt;","&lt;Common&gt;rejected&lt;/Common&gt;","&lt;KSN&gt;rejected&lt;/KSN&gt;","&lt;/EULA&gt;","&lt;ServerSettings&gt;","&lt;EnableUI&gt;true&lt;/EnableUI&gt;","&lt;Mode&gt;httpd&lt;/Mode&gt;","&lt;ConnectionString&gt;127.0.0.1:9443&lt;/ConnectionString&gt;","&lt;SSLCertificatePath&gt;../ssl/cert.pem&lt;/SSLCertificatePath&gt;","&lt;SSLPrivatePath&gt;../ssl/priv.pem&lt;/SSLPrivatePath&gt;","&lt;TemplatesPath&gt;../httpsrv/templates/&lt;/TemplatesPath&gt;","&lt;/ServerSettings&gt;","&lt;DatabaseSettings&gt; ","&lt;ConnectionString&gt;10.65.81.3:8443&lt;/ConnectionString&gt;","&lt;User&gt;=a3Afasd+&lt;/User&gt;","&lt;Password&gt;=df2AfBB1&lt;/Password&gt;","&lt;/DatabaseSettings&gt;","&lt;/Settings&gt;","Manually editing Kaspersky Scan Engine configuration file","179825.htm");
Page[270]=new Array("This group of constants defines file formats that can be recognized by Format Recognizer. You can configure Format Recognizer for use in HTTP mode, as well as in ICAP mode.","Text formats","KAV_FF_GENERAL_TXT","KAV_FF_GENERAL_CSV","KAV_FF_GENERAL_HTML","KAV_FF_GENERAL_HTML_STRICT","KAV_FF_TEXT_REG","Multimedia formats","KAV_FF_VIDEO_FLV","KAV_FF_VIDEO_F4V","KAV_FF_VIDEO_AVI","KAV_FF_VIDEO_3GPP","KAV_FF_VIDEO_DIVX","KAV_FF_VIDEO_MKV","KAV_FF_VIDEO_MOV","KAV_FF_VIDEO_ASF","KAV_FF_VIDEO_RM","KAV_FF_VIDEO_VOB","KAV_FF_VIDEO_BIK","KAV_FF_VIDEO_RTMP","KAV_FF_AUDIO_MP3","KAV_FF_AUDIO_FLAC","KAV_FF_AUDIO_APE","KAV_FF_AUDIO_OGG","KAV_FF_AUDIO_AAC","KAV_FF_AUDIO_WMA","KAV_FF_AUDIO_AC3","KAV_FF_AUDIO_WAV","KAV_FF_AUDIO_MKA","KAV_FF_AUDIO_RA","KAV_FF_AUDIO_MIDI","KAV_FF_AUDIO_CDA","KAV_FF_IMAGE_JPEG","KAV_FF_IMAGE_GIF","KAV_FF_IMAGE_PNG","KAV_FF_IMAGE_BMP","KAV_FF_IMAGE_TIFF","KAV_FF_IMAGE_EMF","KAV_FF_IMAGE_EPS","KAV_FF_IMAGE_PSD","KAV_FF_IMAGE_CDR","KAV_FF_MULTIMEDIA_SWF","Executable formats","Format","Description","Operating system","Extensions","KAV_FF_EXECUTABLE_WIN32PE_EXE","32-bit executable files (exe only)","32-bit Windows systems","exe","KAV_FF_EXECUTABLE_WIN32PE_EXEUI","Executable files of programs with a user interface, and executable files for the Microsoft POSIX subsystem","32-bit Windows systems","exe","KAV_FF_EXECUTABLE_WIN32PE_DLL","Dynamic libraries","32-bit Windows systems","dll, ocx, scr","KAV_FF_EXECUTABLE_WIN32PE_RESOURCE","Resource-only libraries","32-bit Windows systems","dll","KAV_FF_EXECUTABLE_WIN32PE_NET","KAV_FF_EXECUTABLE_WIN32PE_ILONLY","Executable files that contain only Common Intermediate Language (CIL)","32-bit Windows systems","exe, dll, ocx, scr","KAV_FF_EXECUTABLE_WIN32PE_ILLIBRARY","Common Intermediate Language libraries","32-bit Windows systems","exe, dll, ocx, scr","KAV_FF_EXECUTABLE_WIN32PE","32-bit executable files","32-bit Windows systems","exe, dll, ocx, scr","KAV_FF_EXECUTABLE_WIN32PE_SYS","System files","32-bit Windows systems","sys","KAV_FF_EXECUTABLE_WIN32PE_NET_RESOURCE_WITH_POSSIBLE_TRIVIAL_CODE",".NET resource-only libraries (may contain trivial code)","32-bit Windows systems","dll","KAV_FF_EXECUTABLE_DOS","Executable files that are not based on a Win32 or Win64 API","16-bit Windows systems, DOS, OS/2","exe, dll","KAV_FF_EXECUTABLE_DOS_NE_RESOURCE","New Executable (NE) resource-only libraries","16-bit Windows systems, DOS, OS/2","exe, dll","KAV_FF_EXECUTABLE_COM","KAV_FF_EXECUTABLE_JAVA","KAV_FF_EXECUTABLE_ELF","KAV_FF_EXECUTABLE_JS","KAV_FF_EXECUTABLE_VBS","KAV_FF_EXECUTABLE_BAT","KAV_FF_EXECUTABLE_MSI","KAV_FF_EXECUTABLE_DEB","KAV_FF_EXECUTABLE_RPM","KAV_FF_EXECUTABLE_SCRIPTS","KAV_FF_EXECUTABLE_MACHO","KAV_FF_EXECUTABLE_DEX","KAV_FF_EXECUTABLE_APK","KAV_FF_EXECUTABLE_PYC","KAV_FF_EXECUTABLE_APPLE_SCRIPT","KAV_FF_EXECUTABLE_WINDOWS_SHELLLINK","Office suite formats","KAV_FF_OFFICE_OPENXML","KAV_FF_OFFICE_MSOFFICE_MACRO","KAV_FF_OFFICE_MSOFFICE","KAV_FF_OFFICE_RTF","KAV_FF_OFFICE_PDF","KAV_FF_OFFICE_MSG","KAV_FF_OFFICE_EML","KAV_FF_OFFICE_VSD","KAV_FF_OFFICE_VDX","KAV_FF_OFFICE_XPS","KAV_FF_OFFICE_ONE","KAV_FF_OFFICE_ONEPKG","KAV_FF_OFFICE_XSN","KAV_FF_OFFICE_ODT","KAV_FF_OFFICE_ODS","KAV_FF_OFFICE_ODP","KAV_FF_OFFICE_SXW","KAV_FF_MSOFFICE_DOC","KAV_FF_MSOFFICE_DOT","KAV_FF_MSOFFICE_DOCX","KAV_FF_MSOFFICE_DOTX","KAV_FF_MSOFFICE_DOCM","KAV_FF_MSOFFICE_DOTM","KAV_FF_MSOFFICE_XLS","KAV_FF_MSOFFICE_XLSX","KAV_FF_MSOFFICE_XLTX","KAV_FF_MSOFFICE_XLSM","KAV_FF_MSOFFICE_XLTM","KAV_FF_MSOFFICE_XLAM","KAV_FF_MSOFFICE_XLSB","KAV_FF_MSOFFICE_PPT","KAV_FF_MSOFFICE_PPTX","KAV_FF_MSOFFICE_POTX","KAV_FF_MSOFFICE_PPTM","KAV_FF_MSOFFICE_POTM","KAV_FF_MSOFFICE_PPSX","KAV_FF_MSOFFICE_PPSM","KAV_FF_MSOFFICE_PUB","KAV_FF_MSOFFICE_SCRAP","Database files","KAV_FF_DATABASE_MDB","KAV_FF_DATABASE_ACCDB","KAV_FF_DATABASE_ACCDC","Archive files","KAV_FF_ARCHIVE_ZIP","KAV_FF_ARCHIVE_7Z","KAV_FF_ARCHIVE_RAR","KAV_FF_ARCHIVE_ISO","KAV_FF_ARCHIVE_CAB","KAV_FF_ARCHIVE_JAR","KAV_FF_ARCHIVE_BZIP2","KAV_FF_ARCHIVE_GZIP","KAV_FF_ARCHIVE_ARJ","KAV_FF_ARCHIVE_DMG","KAV_FF_ARCHIVE_XAR","KAV_FF_ARCHIVE_TAR","KAV_FF_ARCHIVE_ACE","Web archive files","KAV_FF_TEXT_CHM","KAV_FF_TEXT_MHT","Miscellaneous","KAV_FF_CRYPTO_CAT","Recognizable file formats","180222.htm");
Page[271]=new Array("This section explains how to verify that Kaspersky Scan Engine is detecting malicious objects correctly. ","Verifying virus detection capabilities","179826.htm");
Page[272]=new Array("Because it is unacceptable to use real malware for test purposes, there is a need for a file that contains no malicious code and can be safely passed around&#8212;but that must be detected by anti-virus software as a malicious object or, more specifically, as a test file.","The European Institute for Computer Anti-virus Research (EICAR) distributes such a file for testing anti-virus functionality. It is known as the \"EICAR Standard Anti-Virus Test File\" and can be downloaded from the EICAR official web site.","To download the test file or to read more about it, follow this link: https://www.eicar.org/?page_id=3950.","If your computer already has anti-virus software, disable it before you download the test file.","The EICAR Standard Anti-Virus Test File contains the ASCII string which, when interpreted by command processor, returns the message string to the standard output and exits back to the command prompt.","Kaspersky Scan Engine will detect this test file, label it as infected and perform the action specified in the scan settings.","About EICAR Standard Anti-Virus Test File","180178.htm");
Page[273]=new Array("This section explains how to verify that Kaspersky Scan Engine works correctly in HTTP mode.","Verifying that Kaspersky Scan Engine detects malicious files correctly","To verify that Kaspersky Scan Engine detects malicious file correctly:","Run the kavhttpd service.","Start your HTTP client.","Scan the EICAR test file by using your HTTP client in scanfile mode.","The following example shows how to do this with the sample HTTP client:","./kavhttp_client -f eicar.txt","Verify that the EICAR test file is detected.","Verifying that Kaspersky Scan Engine detects malicious files in system memory correctly","To verify that Kaspersky Scan Engine detects malicious files in system memory correctly:","Run the kavhttpd service.","Start your HTTP client.","Scan the content of the EICAR test file by using your HTTP client in scanmemory mode.","The following example shows how to do this with the sample HTTP client:","./kavhttp_client eicar.txt","Verify that the EICAR test file is detected.","Verifying that Kaspersky Scan Engine detects malicious and phishing URLs correctly","To verify that Kaspersky Scan Engine detects malicious and phishing URLs correctly:","Run the kavhttpd service.","Start your HTTP client.","To verify that Kaspersky Scan Engine detects malicious URLs correctly, scan http://bug.qainfo.ru/TesT/Wmuf_w by using your HTTP client.","This URL is not malicious. Kaspersky is using this URL to test the detection capabilities of anti-virus software.","The following example shows how to do this with the sample HTTP client:","./kavhttp_client -u http://bug.qainfo.ru/TesT/Wmuf_w","Verify that the URL is detected.","To verify that Kaspersky Scan Engine detects phishing URLs correctly, scan http://bug.qainfo.ru/TesT/Aphish_w by using your HTTP client.","This URL is not phishing. Kaspersky is using this URL to test the detection capabilities of anti-virus software.","The following example shows how to do this with the sample HTTP client:","./kavhttp_client -u http://bug.qainfo.ru/TesT/Aphish_w","Verify that the URL is detected.","Verifying that File and URL Reputation Checking works correctly","To verify that File and URL Reputation Checking works correctly:","Request the KSN test file from your technical account manager (TAM). This file is not malicious, and is only used to verify that File and URL reputation checking works properly.","Make sure that the KAV_SHT_ENGINE_KSN flag is not specified in the Flags element of the HTTP mode configuration file.","Run the kavhttpd service.","Start your HTTP client.","Scan the KSN test file by using your HTTP client in scanfile mode.","Verify that the KSN test file is not detected.","Specify the KAV_SHT_ENGINE_KSN flag in the Flags element of the HTTP mode configuration file.","Restart the kavhttpd service.","Rescan the KSN test file by using your HTTP client in scanfile mode.","Verify that the KSN test file is detected.","Verifying detection capabilities in HTTP mode","180193.htm");
Page[274]=new Array("This section explains how to verify that Kaspersky Scan Engine works correctly in ICAP mode.","Verifying that Kaspersky Scan Engine detects malicious and phishing URLs correctly","To verify that Kaspersky Scan Engine detects malicious URLs correctly:","Make sure that the directory with response templates contains the detect_req default template.","Configure Kaspersky Scan Engine. Set the value of the RulesFilePath parameter to the directory that contains kavicapd_gui_rules.conf, sample service rules file that is included in the distribution kit. ","Start the kavicapd service.","Create a .txt file with the following content:","REQMOD icap://icap-server.example.com/req ICAP/1.0","Host: icap-server.example.com","Encapsulated: req-hdr=0, null-body=110","GET /TesT/Wmuf_w HTTP/1.1","Host: www.bug.qainfo.ru","Accept: text/html, text/plain","Accept-Encoding: compress","Make sure that every line ends with CRLF, as required by RFC 2616. Also, make sure that the file ends with an empty line (a line consisting of CRLF symbols).","This is a REQMOD GET ICAP request message. ","This message requests a test page that does not contain any real malicious content.","Save the file with an appropriate name. In the following example this file is named icap_reqmod_malicious_detect.txt.","Send the message to the port that the kavicapd service listens on (port 1344 by default).","The exact method may vary depending on the operating system. This example shows how to send the message using netcat:"," cat icap_reqmod_malicious_detect_.txt | nc localhost 1344","The kavicapd service will answer with the modified message headers and a response message that shows information about the blocked URL.","Verify that the test web page was blocked.","When the web page is blocked, the kavicapd service returns the detect_req HTML response template. The response template contains the following information about the blocked web page:","Mode:            REQMOD","Object name:","Date:            2017-May-31 14:13:29.295710","ICAPD version:   KL ICAP Service v1.0 (KAV SDK v8.5.1.83)","KAV SDK Version: KAV SDK v8.5.1.83","URL:             http://bug.qainfo.ru/TesT/Wmuf_w","Create a .txt file with the following content:","REQMOD icap://icap-server.example.com/req ICAP/1.0","Host: icap-server.example.com","Encapsulated: req-hdr=0, null-body=110","GET /TesT/Aphish_w HTTP/1.1","Host: www.bug.qainfo.ru","Accept: text/html, text/plain","Accept-Encoding: compress","Save the file with an appropriate name. In the following example this file is named icap_reqmod_phishing_detect.txt.","Send the message to the port that the kavicapd service listens on.","cat icap_reqmod_phishing_detect_.txt | nc localhost 1344","Verify that the test web page was blocked.","When the web page is blocked, the kavicapd service returns the detect_req HTML response template. The response template contains the following information about the blocked web page:","Mode:            REQMOD","Object name:","Date:            2017-May-31 14:13:29.295710","ICAPD version:   KL ICAP Service v1.0 (KAV SDK v8.5.1.83)","KAV SDK Version: KAV SDK v8.5.1.83","URL:             http://bug.qainfo.ru/TesT/Aphish_w","Verifying that Kaspersky Scan Engine detects malicious content in HTTP traffic correctly","To verify that Kaspersky Scan Engine detects malicious content in HTTP traffic correctly:","Make sure that the directory with response templates contains the detect_req default template.","Configure Kaspersky Scan Engine. Set the value of the RulesFilePath parameter to the directory that contains kavicapd_gui_rules.conf, sample service rules file that is included in the distribution kit. ","Start the kavicapd service.","Create a .txt file with the following content:","REQMOD icap://icap-server.example.com/req?arg=87 ICAP/1.0","Host: icap-server.example.com","Encapsulated: req-hdr=0, req-body=155","POST /origin-resource/form.pl HTTP/1.1","Host: www.origin-server.example.com","Accept: text/html, text/plain","Accept-Encoding: compress","Pragma: no-cache","44","X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*","0","Make sure that every line ends with CRLF, as required by RFC 2616.","This is a REQMOD POST ICAP request message. ","This message contains EICAR Standard Anti-Virus Test File. The EICAR Standard Anti-Virus Test File is not a virus and is often used for testing anti-virus software.","Save the file with an appropriate name. In the following example this file is named icap_reqmod_detect.txt.","Send the message to the port that the kavicapd service listens to (port 1344 by default).","The exact method may vary depending on the operating system. This example shows how to send the message using netcat:","cat icap_reqmod_detect.txt | nc localhost 1344","The kavicapd service will answer with the modified message headers and a response message that shows information about the detected object.","Verify that EICAR Standard Anti-Virus Test File was detected.","When the EICAR file is detected, the kavicapd service returns the detect_req HTML response template. The response template contains the following information about the detected object:","Mode:            REQMOD","Object name:     EICAR-Test-File","Date:            2017-May-31 14:17:12.077704","ICAPD version:   KL ICAP Service v1.0 (KAV SDK v8.5.1.83)","KAV SDK Version: KAV SDK v8.5.1.83","URL:             www.origin-server.example.com/origin-resource/form.pl","Verifying that File and URL Reputation Checking works correctly","To verify that File and URL Reputation Checking works correctly:","Request the KSN test file from your Technical Account Manager. This file is not malicious, and is only used to verify that File and URL Reputation Checking works properly.","Make sure that the directory with response templates contains the detect_req default template.","Configure Kaspersky Scan Engine: ","Set the value of the RulesFilePath parameter to the directory that contains kavicapd_gui_rules.conf, sample service rules file that is included in the distribution kit.","Make sure that the UseKSN parameter is set to 0.","Start the kavicapd service.","Create a .txt file with the following content:","REQMOD icap://icap-server.example.com/req?arg=87 ICAP/1.0","Host: icap-server.example.com","Encapsulated: req-hdr=0, req-body=155","POST /origin-resource/form.pl HTTP/1.1","Host: www.origin-server.example.com","Accept: text/html, text/plain","Accept-Encoding: compress","Pragma: no-cache","Below the content you added to the .txt file, insert a new line.","Below the new line, insert the contents of the KSN test file.","Make sure that every line ends with CRLF, as required by RFC 2616.","Save the file with an appropriate name. In the following example this file is named icap_reqmod_detect_ksn.txt.","Send the message to the port that the kavicapd service listens on (port 1344 by default).","The exact method may vary depending on the operating system. This example shows how to send the message by using the netcat utility:","cat icap_reqmod_detect_ksn.txt | nc localhost 1344","Verify that the KSN test file is not detected.","Set the value of the UseKSN parameter of the ICAP mode configuration file to 1.","Restart the kavicapd service.","Send icap_reqmod_detect_ksn.txt to the kavicapd service again.","Verify that the KSN test file is detected.","Verifying detection capabilities in ICAP mode","179903.htm");
Page[275]=new Array("For Linux systems only.","Kaspersky Scan Engine includes the system audit functionality. If the Kaspersky Scan Engine GUI is used, system audit is enabled by default and cannot be disabled. Also, when you turn on syslog logging, Kaspersky Scan Engine prompts you to turn on system audit as well.","With the system audit, it is much easier to monitor the functioning Kaspersky Scan Engine and to analyze security incidents when they happen.","In order to analyze incidents, you might need to gather the following information:","Who or what initiated the events related to the incident.","What actions did the initiator take, and whether or not they were successful.","If a Kaspersky Scan Engine user is the initiator, then who granted the user access rights.","How the Kaspersky Scan Engine settings have changed.","On the Kaspersky Scan Engine dashboard, you can find information about initiators of events and events details. ","Users that have the role Operator can only view events related to scanning and events initiated by themselves. Users that have the role Administrator can view information without limitations. See also the detailed information about the user roles.","If you do not use the Kaspersky Scan Engine GUI, you can find information about events in the syslog messages. ","System audit","221141.htm");
Page[276]=new Array("Each event in Kaspersky Scan Engine has an Initiator&#8212;someone or something that triggered the event. ","You can find information about the initiator on the Kaspersky Scan Engine dashboard, in the Initiator column of the events table. If you want to display events triggered by a certain initiator, you can use the Initiator filter. ","In the Initiator column, the following values are possible:","The name of the user (the login). This value means that the user has initiated the event through the Kaspersky Scan Engine GUI. For example, logged in or restarted Kaspersky Scan Engine by clicking the Restart button.","Service Scan Engine. This value means that Kaspersky Scan Engine initiated the event, either itself or by user command. For example, Kaspersky Scan Engine itself can run an update on a schedule or run an update after a user has clicked the Update button. Clicking the Update button here is an event initiated by a user, and running the update is a separate event initiated by Kaspersky Scan Engine.","IP address. This value means that an HTTP or ICAP client sent a request to the Kaspersky Scan Engine API. For example, sent a file to scan.","The IP address of a scan request initiator is also displayed in the Client column of the scan results table. You can find this table on the Scan results page of the Kaspersky Scan Engine GUI.","You can also find information about the initiator in syslog messages.","Identification of the event initiator","221146.htm");
Page[277]=new Array("You can find detailed information about any event on the Kaspersky Scan Engine dashboard, in the Details column of the events table.","The detailed information includes the following data:","What action was taken.","Whether the action was successful or not.","Additional information, if any.","From a security point of view, the most important events are those that contain information about the following actions:","User login to the Kaspersky Scan Engine GUI.","An attempt to login with incorrect credentials.","Turning on or turning off the scan engine.","Creating, changing, or deleting a user account.","Changing Kaspersky Scan Engine settings.","Getting detailed information about events on the dashboard","221150.htm");
Page[278]=new Array("If Syslog logging is enabled, Kaspersky Scan Engine sends information about events to the syslog daemon, in CEF or RAW format. ","In CEF format, the information includes:","Name of the event.","Importance level of the event. The higher the level, the higher the importance of the event.","IP address of the computer on which Kaspersky Scan Engine is running, in IPv4 format.","Hostname of the computer on which Kaspersky Scan Engine is running.","Description of the event.","In RAW format, the information includes a description of the event.","Getting detailed information about events from the syslog","221189.htm");
Page[279]=new Array("This section explains how to configure and enable logging in Kaspersky Scan Engine. ","Logging","179684.htm");
Page[280]=new Array("This section describes how to enable logging manually.","You can separately enable logging for Kaspersky Anti-Virus Engine","Logging significantly reduces Kaspersky Scan Engine performance. You are advised to use logging only for debugging purposes.","Enabling logging for Kaspersky Anti-Virus Engine","By default, Kaspersky Scan Engine does not log KAV Engine events.","To enable logging in Kaspersky Anti-Virus Engine:","Create a file named kave.ini in the ppl subdirectory of the installation directory.","Add the following lines to kave.ini:","[LOGGING]","WriteLog=9 ","Specify other parameters, if they are needed.","Save and close kave.ini.","Restart the Kaspersky Scan Engine service:","In HTTP mode, restart the kavhttpd service.","In ICAP mode, restart the kavicapd service.","Logging settings for the kavicapd/kavhttpd service and Kaspersky Anti-Virus Engine are synchronized on start and restart of the klScanEngineUI service. Kaspersky Scan Engine sets the logging level (WriteLog) and log directory (LogsFolder) in kave.ini to be the same as specified in the DebugLogging section of icapdkavlog.conf (for ICAP mode) or httpdkavlog.ini (for HTTP mode).","Enabling logging in HTTP mode","By default, logging in HTTP mode is disabled. Kaspersky Scan Engine checks for the httpdkavlog.ini logging configuration file when the kavhttpd service starts. If this file exists, Kaspersky Scan Engine reads parameters from it.","To enable logging for the kavhttpd service:","Create a file named httpdkavlog.ini in the directory where the kavhttpd binary file is located.","Change the value of the &lt;LogLevel&gt; element to 1.","Specify the rest of the parameters, if needed.","Save and close httpdkavlog.ini.","Restart the kavhttpd service.","Enabling logging in ICAP mode","By default, logging in ICAP mode is disabled. Kaspersky Scan Engine checks the icapdkavlog.conf logging configuration file when the kavicapd service starts.","To enable logging for the kavicapd service:","Open the icapdkavlog.conf logging configuration file.","Specify debug or dbg in the &lt;Level&gt; element.","Specify other parameters, if they are needed.","Save and close icapdkavlog.conf.","Restart the kavicapd service.","Enabling logging in Kaspersky Scan Engine GUI","To enable logging in Kaspersky Scan Engine GUI:","Enable logging in the configuration file that corresponds to the selected Kaspersky Scan Engine mode (HTTP or ICAP).","If HTTP mode is used, enable logging in the httpdkavlog.ini logging configuration file.","If ICAP mode is used, enable logging in the icapdkavlog.conf logging configuration file.","In Kaspersky Scan Engine GUI, go to Settings&nbsp;→ Logging and enable logging.","You can enable or disable logging in Kaspersky Scan Engine GUI without restarting the kavicapd or kavhttpd service.","Manually enabling logging","179928.htm");
Page[281]=new Array("This section describes properties of the kave.ini logging configuration file. The kave.ini logging configuration file defines the logging settings for Kaspersky Anti-Virus Engine. Logging is configured separately for the kavhttpd and kavicapd services.","Logging settings for the kavicapd/kavhttpd service and Kaspersky Anti-Virus Engine are synchronized on start and restart of the klScanEngineUI service. Kaspersky Scan Engine sets the logging level (WriteLog) and log directory (LogsFolder) in kave.ini to be the same as specified in the DebugLogging section of icapdkavlog.conf (for ICAP mode) or httpdkavlog.ini (for HTTP mode).","The following table describes properties of the kave.ini logging configuration file.","Logging configuration file properties","Property","Description","Append","Specifies whether previous log files are kept intact or are deleted on each initialization of Kaspersky Scan Engine.","Possible values:","0","Automatically remove existing log files.","Existing log files in the log directory are automatically removed when Kaspersky Scan Engine is initialized.","1","Keep existing log files.","Kaspersky Scan Engine writes logging information to new log files, each corresponding to a specific process. The option does not make the Kaspersky Scan Engine append information to an existing log.","SizeLimit","Only for Windows platforms. On Unix-like platforms, this parameter is ignored even if it is specified in kave.ini.","Sets the maximum possible size of a log file (in megabytes).","Possible values:","Any positive integer in the range 0 to 4095.","Special cases:","0","No limit for the size of a log file. The log files can grow indefinitely.","Setting the limit to a non-zero value automatically turns on the append mode regardless of the value specified for the Append property.","WriteLog","Logging level.","Recommended values:","0","Logging is disabled.","9","Debug level.","Using other values is not recommended.","LogsFolder","Path to the log directory.","Do not enclose the path in quotation marks and do not use the escape sequence for whitespace.","Possible values:","Relative path","A path is calculated relative to the directory that contains the kave.ini logging configuration file.","If you specify a nonexistent directory, log files are created in a directory that contains the binary file of the service in use (kavhttpd in HTTP mode, and kavicapd in the ICAP mode).","Absolute path","If you specify a nonexistent directory, log files are created in a directory that contains the binary file of the service in use (kavhttpd in HTTP mode, and kavicapd in the ICAP mode).","Local path","The directory that contains kave.ini. A local path can be specified by either setting the value of the LogsFolder parameter to \".\" (without quotation marks) or leaving the value blank.","The full custom path for the log files must not exceed the limit of 260 characters, applied by MAX_PATH macro.<br>This integer number does not include additional length restrictions such as a null terminator used in C strings and other restrictions imposed by platforms: for example, when the file system stores an additional short name in 8.3 format with the original file name, to maintain compatibility with legacy applications.","Syslog","This property specifies whether Kaspersky Scan Engine sends logging data to a syslog daemon.","When using a syslog daemon, you can write logging data to log files, other programs, or redirect them to another host, as configured the configuration file for the syslog daemon.","Possible values:","0","Do not send syslog messages to the syslog daemon. Logging data is written directly to the location specified in the LogsFolder parameter.","1","Redirect logging data to a syslog daemon. In this case, logging data is stored at the location specified in the configuration file of the syslog daemon. The value of the LogsFolder parameter is ignored.","Before redirecting logging data to a syslog daemon, make sure to configure your syslog daemon for debug logging. Add the following line to the syslog.conf configuration file:<br>*.=debug -/var/log/debug<br>The syslog configuration file is typically located at /etc/syslog.conf and controls the output of the syslogd daemon.","Remarks","In some cases, your technical account manager (TAM) may ask you to enable advanced logging. Advanced logging may help Kaspersky specialists investigate troublesome issues.","To enable advanced logging:","Open the kave.ini file (create a new one in the folder with kavehost binary if needed)","In the Logging section add the BssLogsFolder option and specify a location to store the files with advanced logging data.","This location must be separate from your standard logging data location (specified in LogsFolder).","Examples","The following example lists a sample configuration file for each of the target platforms. ","The following sample configuration file may be used on a UNIX-like platform.","[LOGGING]","WriteLog=9","Append=0","LogsFolder=./logs","Syslog=0","Logging configuration file","179926.htm");
Page[282]=new Array("When Kaspersky Scan Engine runs diagnostic logging, some user data may be stored locally in the log files created by Kaspersky Scan Engine. The data is added to the log files without making any changes. Kaspersky Scan Engine does not edit or alter this data, or otherwise send it anywhere. Logged data is stored locally on your computer with the running copy of Kaspersky Scan Engine in the location specified by the kave.ini file.","If protection of logged data is important to you, you must implement a method of protection yourself. For example, you may want to grant only specific user accounts access to the logged data.","The following types of user data are written in a plain text format to log files:","Paths to scanned objects","Scanned URLs","Addresses of scanned memory blocks","Contents of the Kaspersky Scan Engine user agent string:","Version of the user agent string format","Identifier of Kaspersky Scan Engine","Licensing mode","Identifier of the license","Update session identifier","Full version of Kaspersky Scan Engine: major, minor, build, revision, and hotfix","If Kaspersky Scan Engine uses a proxy to establish connection to the Internet, Kaspersky Scan Engine also may log the following information:","Proxy server IP address (IPv4 or IPv6) or host name","Port number of the proxy server","User name for the proxy authentication","Kaspersky Scan Engine does not log passwords for the proxy authentication.","Logged user data","179925.htm");
Page[283]=new Array("This section explains how to integrate Kaspersky Scan Engine with SIEM solutions such as Splunk, KUMA, or ArcSight ESM. ","To be integrated with a SIEM solution, Kaspersky Scan Engine has to send Syslog events in CEF or SYSLOG format to the SIEM solution. ","Integration with SIEM solutions","220775.htm");
Page[284]=new Array("To integrate Kaspersky Scan Engine with Splunk","Configure Splunk.","Configure Kaspersky Scan Engine.","After you integrate Kaspersky Scan Engine with Splunk, you can search for information about events that Kaspersky Scan Engine sent to Splunk.","Integration with Splunk","220777.htm");
Page[285]=new Array("For better parsing of Kaspersky Scan Engine events in CEF format, install CEF Extraction Add-on to your Splunk instance.","To configure Splunk:","Open the Splunk web interface.","Go to Settings &gt; Data inputs.","Selecting Settings &gt; Data inputs","In Local inputs, locate the TCP element in the list, and then click Add new.","Fill out the form that opens:","Port. Specify the port to which Kaspersky Scan Engine must send logs. For example, 9998.","Source name override. Specify scanengine.","Adding a new TCP input","Click Next.","In the next window in Select Source Type, specify the source type:","Specify cefevents if you installed the CEF Extraction Add-on for Splunk.","Selecting cefevents","Specify syslog if you did not install CEF Extraction Add-on for Splunk.","You can specify the App Context and Index fields according to your needs. For example, you can specify the index of the events sent by Kaspersky Scan Engine.","Click Review to check the settings, and then click Submit.","After Kaspersky Scan Engine is configured, you can check if the Splunk configuration is correct.","To check if Splunk is configured correctly:","In the Splunk web interface, open Search &amp; Reporting.","Specify the search parameters as follows:","If you specified cefevents in Source Type earlier, enter the following search string:","source=\"scanengine\" sourcetype=\"cefevents\" ","If you specified syslog in Source Type earlier, enter the following search string:","source=\"scanengine\" sourcetype=\"syslog\" ","Time filter: specify All time (real-time)"," Run search.","If Splunk is configured correctly, it displays events sent by Kaspersky Scan Engine in real time.","Events sent by Kaspersky Scan Engine","Configuring Splunk","220780.htm");
Page[286]=new Array("Searching for object scan results","To display events containing object scan results, ","Use the following search query:","source=\"scanengine\" \"Scan result\" msg=*scan* | eval cs2=coalesce(cs2,\"-\") | rename cs1 as \"Scan Result\", cs2 as \"Virus Name\", fname as \"Object\", src as \"Source Address\", fileHash as \"Object Hashsum\" |table _time, \"Object Hashsum\",Object,\"Scan Result\",\"Virus Name\",\"Source Address\"","Searching for object scan results","Searching for URL check results","To display events containing URL check results, ","Use the following search query:","source=\"scanengine\" \"Scan result\" msg=URL* | rename cs1 as \"Scan Result\", request as \"Scanned URL\", src as \"Source Address\" | table _time, \"Scanned URL\", \"Scan Result\", \"Source Address\"","Searching for URL check results","Searching for Kaspersky Scan Engine events in Splunk","220782.htm");
Page[287]=new Array("To integrate Kaspersky Scan Engine with ArcSight ESM:","Configure ArcSight ESM.","Configure Kaspersky Scan Engine.","After you integrate Kaspersky Scan Engine with ArcSight ESM, you can search for information about events that Kaspersky Scan Engine sent to ArcSight ESM.","Integration with ArcSight ESM","220779.htm");
Page[288]=new Array("For ArcSight ESM to receive events from Kaspersky Scan Engine, an ArcSight SmartConnector of the Syslog Daemon type must be installed. You can install ArcSight SmartConnector on any computer that can connect to Kaspersky Scan Engine and to ArcSight ESM.","To install an ArcSight SmartConnector:","Run the ArcSight SmartConnector installation application.","This application is a component of HP ArcSight and is not included in Kaspersky Scan Engine.","Specify the ArcSight SmartConnector installation directory (hereinafter referred to as %ARCSIGHT_HOME%).","Select Don't create links.","After unpacking the contents of the binary file, select Add a Connector.","Selecting Add a Connector","If this window is not displayed, run the following command:","%ARCSIGHT_HOME%/current/bin/runagentsetup.sh","Select Syslog Daemon as the connector type.","Specify the parameters of the connector in the Enter the parameter details form as follows:","Network port. Specify the port to which Kaspersky Scan Engine must send detection events.","You specify the same port in the Kaspersky Scan Engine Syslog settings.","IP Address. Specify the IP address to which Kaspersky Scan Engine must send detection events.","You specify the same IP address in the Kaspersky Scan Engine Syslog settings.","You can specify (ALL) if you want Arcsight SmartConnector to receive events from all network interfaces of the computer on which it runs. Note that you cannot specify (ALL) in the Kaspersky Scan Engine configuration file.","Protocol. Specify Raw TCP.","Forwarder. Specify false.","Defining connector parameters","Click Next.","Specify ArcSight Manager (encrypted) as the type of destination.","Selecting the type of destination","Click Next.","Specify the parameters of the destination:","Manager Hostname. Specify the host where ArcSight Manager is running.","Manager Port. Specify the port where ArcSight Manager is available. The default value is 8443.","User. Specify the name of the ArcSight ESM user that has rights to register the connector.","Password. Specify the password of the ArcSight ESM user.","AUP Master Destination. Specify false.","Filter Out All Events. Specify false.","Enable Demo CA. Specify false.","Defining destination parameters","Click Next.","Specify the connector details:","Name (you can specify an arbitrary value).","Location (you can specify an arbitrary value).","Location of the device that must send events to the connector (you can specify an arbitrary value or leave it empty).","Comment about the connector (you can specify an arbitrary value or leave it empty).","Click Next.","If the ArcSight Manager parameters are valid, accept importing the certificate from the destination.","If the certificate is imported successfully, install the ArcSight SmartConnector service. ","If you do not run the installation as root, the following warning is displayed:","If you do not run the installation as root","The %ARCSIGHT_HOME%/current/logs/agent.log file contains messages about the installation process.","You can skip the next step that describes how to specify the service parameters.","If you run the installation as root, select Install as a service.","Click Next.","Specify the service parameters.","We recommend that you set the service name, specified in Service Internal Name, to be the same as the connector name.","Defining service parameters","Click Next.","To start ArcSight SmartConnector, run the following command:","/etc/init.d/arc_$service_name start","In this command, $service_name is the service internal name.","After the ArcSight ESM configuration is complete, you can configure Kaspersky Scan Engine.","Configuring ArcSight ESM","220896.htm");
Page[289]=new Array("Searching for events from Kaspersky Scan Engine version 2.0","To search ArcSight ESM for events sent by Kaspersky Scan Engine version 2.0,","Specify the parameters of the search query as follows:","If Kaspersky Scan Engine works in ICAP mode:","DeviceVendor = Kaspersky Lab","AND","DeviceProduct = Kaspersky ICAP Server","Defining parameters of the search query","If Kaspersky Scan Engine works in HTTP mode:","DeviceVendor = Kaspersky Lab","AND","DeviceProduct = Kaspersky HTTP Service","Searching for events from Kaspersky Scan Engine version 2.1","To search ArcSight ESM for events sent by Kaspersky Scan Engine version 2.1,","Specify the parameters of the search query as follows:","If Kaspersky Scan Engine works in ICAP mode:","DeviceVendor = Kaspersky","AND","DeviceProduct = Scan Engine ICAP Service","If Kaspersky Scan Engine works in HTTP mode:","DeviceVendor = Kaspersky","AND","DeviceProduct = Scan Engine HTTP Service","Searching for Kaspersky Scan Engine events in ArcSight ESM","220898.htm");
Page[290]=new Array("To integrate Kaspersky Scan Engine with KUMA:","Configure KUMA","Configure Kaspersky Scan Engine","After you integrate Kaspersky Scan Engine with KUMA, you can search for information about events that Kaspersky Scan Engine sent to KUMA.","Integration with KUMA","220778.htm");
Page[291]=new Array("For KUMA to receive events from Kaspersky Scan Engine, add a new Collector in KUMA.","Configure the new Collector as follows:","In the Transport settings, set the Kind parameter to tcp.","Transport settings","In the Event parsing settings, set the Parsing method parameter to cef.","Event parsing settings","The parameters above are essential for the integration of Kaspersky Scan Engine and KUMA. Configure other parameters according to the KUMA documentation.","After KUMA configuration is complete, you can configure Kaspersky Scan Engine.","Configuring KUMA","220785.htm");
Page[292]=new Array("Searching for events from Kaspersky Scan Engine version 2.1","To search KUMA for events sent by Kaspersky Scan Engine version 2.1:","In KUMA, go to the Events page.","Specify the parameters of the search query as follows:","If Kaspersky Scan Engine works in ICAP mode:","DeviceVendor = Kaspersky","AND","DeviceProduct = Scan Engine ICAP Service","KUMA search query for Kaspersky Scan Engine in ICAP mode","If Kaspersky Scan Engine works in HTTP mode:","DeviceVendor = Kaspersky","AND","DeviceProduct = Scan Engine HTTP Service","KUMA search query for Kaspersky Scan Engine in HTTP mode","Searching for events from Kaspersky Scan Engine version 2.0","To search KUMA for events sent by Kaspersky Scan Engine version 2.0:","In KUMA, go to the Events page.","Specify the parameters of the search query as follows:","If Kaspersky Scan Engine works in ICAP mode:","DeviceVendor = Kaspersky Lab","AND","DeviceProduct = Kaspersky ICAP Server","If Kaspersky Scan Engine works in HTTP mode:","DeviceVendor = Kaspersky Lab","AND","DeviceProduct = Kaspersky HTTP Service","Searching for Kaspersky Scan Engine events in KUMA","220787.htm");
Page[293]=new Array("To configure Kaspersky Scan Engine to interact with a SIEM solution:","Open Kaspersky Scan Engine GUI.","Go to Settings &gt; Logging.","Enable Syslog and set the following parameters:","Format: CEF.","Target: Remote host.","Events: Specify the types of events that Kaspersky Scan Engine must send to the SIEM solution. For more information on event types, see the description of the LoggedEvent element in section \"Configuring logging in ICAP mode\".","The SIEM solution IP address and port.","Kaspersky Scan Engine Syslog settings","Save the settings.","Configuring Kaspersky Scan Engine to interact with a SIEM","220786.htm");
Page[294]=new Array("To deploy and use Kaspersky Scan Engine with Docker and Kubernetes, refer to the documentation on integrating Kaspersky Scan Engine with cloud Kubernetes services.","The documentation also describes integration with Amazon Elastic Kubernetes Service and Microsoft Azure Kubernetes Service.","Integration with Docker and Kubernetes","235568.htm");
Page[295]=new Array("Kaspersky Scan Engine supports multithreading. This feature allows you to use Kaspersky Scan Engine on high-load systems. ","This section describes best practices for boosting performance of Kaspersky Scan Engine.","General recommendations on raising performance","To achieve optimal performance:","Use the number of scanning processes equal to the number of CPU cores and two threads per process.","Enable Keep-Alive for ICAP and HTTP connections.","Recommendations for raising performance of Kaspersky Scan Engine in HTTP mode","The following list presents the recommended order of configuring Kaspersky Scan Engine for peak performance:","Specify the number of scan processes and scan threads that you want in the ScannersCount parameter and the ThreadsCount parameter, respectively."," The threads process scan tasks from the scan queue. The length of the scan queue is specified in the QueueLen parameter of the HTTP mode configuration file.","Specify the maximum number of active TCP connections to Kaspersky Scan Engine in the MaxHTTPSessionsNum parameter.","When Kaspersky Scan Engine works in a high-load environment, it is recommended to make the value of this parameter greater than the value of ThreadsCount, so that the scan queue is filled faster and scan threads do not stand idle. Please notice that Kaspersky Scan Engine loads files into system memory while scanning. The more active sessions Kaspersky Scan Engine has, the more system memory it consumes. You can limit the maximum allowed size of headers and bodies of HTTP messages that are sent to KAV HTTPD by specifying their maximum size in the MaxTCPFileSize parameter.","Specify the desired number of pending TCP connections to Kaspersky Scan Engine in the MaxIncomingConnectionsNum parameter. Notice that this value is passed to the listen(2) system function and may be changed depending on the operating system.","It is recommended to set the value of MaxIncomingConnectionsNum several times greater than the value of MaxHTTPSessionsNum. This way, the pending connections will be put in the connection queue and scan tasks from these clients will not be lost.","Using TLS significantly reduces the performance of Kaspersky Scan Engine. For best results, use TLS 1.3 as it is the most productive.","Recommendations for raising performance of Kaspersky Scan Engine in ICAP mode","Specify the number of scan processes and scan threads that you want in the ScannersCount parameter and the ThreadsCount parameter, respectively.","Boosting performance of Kaspersky Scan Engine","179827.htm");
Page[296]=new Array("This section explains how to uninstall Kaspersky Scan Engine.","Uninstalling Kaspersky Scan Engine","192993.htm");
Page[297]=new Array("This section describes how to uninstall Kaspersky Scan Engine using the uninstall (Linux) and uninstall.exe (Windows).","Before uninstalling Kaspersky Scan Engine, make sure that files from the %service_dir% are not used by any processes.","To uninstall Kaspersky Scan Engine:","Make sure you have root (administrator) privileges.","Go to a directory other than %service_dir% and run uninstall from there, for example, from the command line.","If there is a Kaspersky Scan Engine instance running on the computer, the uninstaller stops it.","Choose whether to delete the database that contains Kaspersky Scan Engine data.","The uninstaller skips this step if the Kaspersky Scan Engine instance you are deleting is part of a cluster containing other instances. You can delete the database when the last Kaspersky Scan Engine instance in the cluster is being deleted.","After this the uninstall removes the following objects:","The database that contains Kaspersky Scan Engine data (if you have chosen this)","The PostgreSQL installation will not be removed, nor will the PostgreSQL database user account that you created during installation. Only the Kaspersky Scan Engine kavebase database will be removed. If you want to re-install Kaspersky Scan Engine, remove this database user account.","To remove the database user account, run the following command:","DROP ROLE \"%account_name%\";","Here, %account_name% is the name of the database user account that you created during installation.","The directory to which Kaspersky Scan Engine is installed","The directory that contains temporary files used by Kaspersky Scan Engine","The Kaspersky Scan Engine service (from the list of services)","Uninstallation using the uninstaller (Linux and Windows)","192994.htm");
Page[298]=new Array("This section explains how to uninstall Kaspersky Scan Engine on Linux operating systems.","Uninstalling Kaspersky Scan Engine on Linux","199825.htm");
Page[299]=new Array("This section describes how to manually uninstall Kaspersky Scan Engine.","Manually uninstalling Kaspersky Scan Engine 2.1 and later","To manually uninstall Kaspersky Scan Engine 2.1 and later:","Make sure you have root (administrator) privileges.","Stop Kaspersky Scan Engine:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","service kavicapd stop","If you used Kaspersky Scan Engine in HTTP mode, run this command:","service kavhttpd stop","If you used Kaspersky Scan Engine GUI, run this command:","service klScanEngineUI stop","Remove Kaspersky Scan Engine from the list of system services:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","systemctl disable kavicapd","If you used Kaspersky Scan Engine in HTTP mode, run this command:","systemctl disable kavhttpd","If you used Kaspersky Scan Engine GUI, run this command:","systemctl disable klScanEngineUI","Delete symbolic links to Kaspersky Scan Engine configuration files:","If you used Kaspersky Scan Engine in ICAP mode, run this command:","rm /etc/kavicapd.xml","If you used Kaspersky Scan Engine in HTTP mode, run this command:","rm /etc/kavhttpd.xml","If you used Kaspersky Scan Engine GUI, run this command:","rm /etc/klScanEngineUI.xml","If you used Kaspersky Scan Engine GUI, open the PostgreSQL database, and then delete the kavebase database and the database user.","Skip this step if you want to use the database later or if the Kaspersky Scan Engine instance you are uninstalling is part of a cluster containing other instances.","To delete the kavebase database, run the following command:","DROP DATABASE kavebase;","To delete the database user, run the following command:  ","DROP ROLE %user_name%;","where %user_name% is the name of the database user created during Kaspersky Scan Engine installation.","For example, to delete the default scanengine database user, run the following command:  ","DROP ROLE scanengine;","Only the superuser can delete a database and its user.","Remove the /opt/kaspersky/ScanEngine directory:","rm &#8211;rf /opt/kaspersky/ScanEngine","Remove the directory that contains temporary files used by Kaspersky Scan Engine:","rm &#8211;rf %temp_dir%","Here %temp_dir% is the temporary directory.","Manually uninstalling Kaspersky Scan Engine 2.0","To manually uninstall Kaspersky Scan Engine 2.0:","Make sure you have root (administrator) privileges.","Stop Kaspersky Scan Engine:","If you use Kaspersky Scan Engine in ICAP mode, run this command:","/etc/init.d/kavicapd stop","If you use Kaspersky Scan Engine in HTTP mode, run this command:","/etc/init.d/kavhttpd stop","If you use Kaspersky Scan Engine GUI, run this command:"," /etc/init.d/klScanEngineUI stop","Remove the executable file and the configuration file:","If you use Kaspersky Scan Engine in ICAP mode, run this command:","rm /etc/init.d/kavicapd /etc/kavicapd.xml","If you use Kaspersky Scan Engine in HTTP mode, run this command:","rm /etc/init.d/kavhttpd /etc/kavhttpd.xml","If you use Kaspersky Scan Engine GUI, run this command:","rm /etc/init.d/klScanEngineUI /etc/klScanEngineUI.xml","If you used Kaspersky Scan Engine GUI, open the PostgreSQL database and  delete the kavebase database and the database user.","Skip this step if you want to use the database later or if the Kaspersky Scan Engine instance you are uninstalling is part of a cluster containing other instances.","To delete the kavebase database, run the following command:","DROP DATABASE kavebase;","To remove the scanengine database user, run the following command:  ","DROP ROLE scanengine;","Remove the /opt/kaspersky/ScanEngine directory:","rm &#8211;rf /opt/kaspersky/ScanEngine","Remove the directory that contains temporary files used by Kaspersky Scan Engine:","rm &#8211;rf %temp_dir%","Here %temp_dir% is the temporary directory.","Manual uninstallation (Linux)","180699.htm");
Page[300]=new Array("This section explains how to uninstall Kaspersky Scan Engine on Windows operating systems.","Uninstalling Kaspersky Scan Engine on Windows","199826.htm");
Page[301]=new Array("This section describes how to manually uninstall Kaspersky Scan Engine.","To manually uninstall Kaspersky Scan Engine:","Make sure that you have administrator privileges.","Stop Kaspersky Scan Engine, run the following command:","sc stop \"Kaspersky ScanEngine\"","If you use Kaspersky Scan Engine GUI, run the following command:","sc stop \"Kaspersky ScanEngine UI\"","If you added Kaspersky Scan Engine to the list of Windows services, delete it by running the following command:","sc delete \"Kaspersky ScanEngine\"","If you used Kaspersky Scan Engine GUI and added it to the list of Windows services, delete it by running the following command:","sc delete \"Kaspersky ScanEngine UI\"","If you use Kaspersky Scan Engine GUI, open the PostgreSQL database and execute the following query:","DROP DATABASE kavebase;","To remove the scanengine database user, run the following command:  ","DROP ROLE scanengine;","Remove the %service_dir% directory. You can do this either by using Windows Explorer, or by running the following command:","del /F %service_dir%","Remove the directory that contains temporary files used by Kaspersky Scan Engine. You can do this either by using Windows Explorer, or by running the following command:","del /F %temp_dir%","Here %temp_dir% is the temporary directory.","Manual uninstallation (Windows)","184741.htm");
Page[302]=new Array("This section describes how to use the kl_access_util utility. With this utility, you can do the following:","Reset the password for the admin account. After the reset, you can change the password in the Kaspersky Scan Engine GUI.","Set an API token used for authentication.","The kl_access_util utility is run from the command line as follows:","./kl_access_util [-r] | [-n &lt;token-name&gt; -t &lt;token-value&gt;] | [-v] | [-h]","The table below describes the kl_access_util options.","kl_access_util options","Option","Description","-r","or","--reset_default_user","Sets the password for the admin account to its default value KAVAdmin!1.","-n &lt;token-name&gt; ","or","--access-token-name &lt;token-name&gt; ","Specifies the name of an API token used for authentication.","If the token with the specified name already exists, Kaspersky Scan Engine updates this token (replaces the old value with the new one specified in -t or --access-token).","If the token with the specified name does not exist, Kaspersky Scan Engine creates a new token with the given name and value.","Combine this option only with -t or --access-token.","-t &lt;token-value&gt;","or","--access-token &lt;token-value&gt;","Specifies the value of an API token used for authentication. The value is assigned to the token with the name specified in -n or --access-token-name. It can be either an existing token that the utility updates or a new token (see the description of the -n option).","The value must be unique and contain from 4 to 100 ASCII characters. There must be at least one uppercase Latin letter, one lowercase Latin letter, one digit, and one of the following special characters: -._~+/).","When creating or updating a token, the utility encrypts the token value.","Combine this option only with -n or --access-token-name.","-v","or","--version","Prints the version of Kaspersky Scan Engine to the command line.","-h","or","--help","Prints the Help information about the kl_access_util utility to the command line.","Using the password utility","179831.htm");
Page[303]=new Array("The kav_encrypt utility allows you to encrypt the user names and passwords stored in kavhttpd.xml, kavicapd.xml, and klScanEngineUI.xml.","The utility is run from the command line as follows:","./kav_encrypt [-m &lt;httpd | icap&gt; -p &lt;user_name:password&gt;] | [-d &lt;user_name:password&gt;] | [-h]","The table below describes the kav_encrypt options.","The kav_encrypt options","Option","Description","-m &lt;httpd | icap&gt;","--mode &lt;httpd | icap&gt;","Specifies the working mode of Kaspersky Scan Engine.","Possible values:","httpd","HTTP mode ","icap","ICAP mode","For Linux systems only.","-p &lt;user_name:password&gt;","--proxy &lt;user_name:password&gt;","Specifies the user name and password of the proxy server that Kaspersky Scan Engine uses to gain access to the Internet.","This option must be used together with the -m option. ","-d &lt;user_name:password&gt;","--database &lt;user_name:password&gt;","Specifies the user name and password of the user that owns the kavebase database.","-h","--help","Prints the Help information about the kav_encrypt utility to the command line.","Using the encrypting utility","181814.htm");
Page[304]=new Array("Kaspersky Scan Engine contains a multitude of various binary modules in the form of dynamic-link libraries, executable files, configuration files, and interface files. A hacker can replace one or more application executable modules or files with other files containing malicious code. To prevent the replacement of modules and files, Kaspersky Scan Engine can check the integrity of application components.","The application checks modules and files for the presence of unauthorized changes or corruption. If an application module or file has an incorrect checksum, it is considered to be corrupted.","The application also checks the integrity of the manifest file containing a list of application files whose integrity is critical for the correct operation of application components.","Starting from Kaspersky Scan Engine version 2.1, KAV SDK objects are delivered as a separate package. For this reason, there are two manifest files in Kaspersky Scan Engine:","integrity_check.xml is used to check the integrity of the Kaspersky Scan Engine files.","integrity_check_sdk.xml is used to check the integrity of the KAV SDK files. This file is delivered in the KAV SDK package.","The integrity of the application components is checked by using the integrity check tool located in the directory %service_dir%, where %service_dir% is the directory of Kaspersky Scan Engine. ","The manifest files integrity_check.xml and integrity_check_sdk.xml (starting from Kaspersky Scan Engine version 2.1) are protected by the cryptographic signature of Kaspersky. The manifest files are located in the %service_dir% directory.","Root user account privileges are required to run the integrity check tool.","To check the integrity of application components, run the following command:","integrity_checker [options]","By default, the tool uses the integrity_check.xml file located in the directory %service_dir%.","To check the integrity of application components using the manifest file located in a directory other than the default one, run the following command:","integrity_checker [options] %path%","where %path% is the path to the manifest file.","You can run the integrity check tool with the following optional settings:","--help&#8212;display Help for tool settings.","--version&#8212;display tool version.","--verbose&#8212;expanded output of performed actions and results. If you specify this setting, the output will contain both successful and unsuccessful results of checking the objects listed in the manifest file. If you do not specify this setting, only objects that did not pass the check will be provided.","--trace &lt;filename&gt;, where &lt;filename&gt; is the name of the file used for logging events that occur during a scan. The events will be logged at the DEBUG level.","The result of checking each manifest file is displayed next to the name of the manifest file in the following format:","SUCCEEDED&#8212;integrity of the files is confirmed (return code 0).","FAILED&#8212;integrity of the files is not confirmed (return code is not 0).","If you build executable files for HTTP mode or ICAP mode from the source code, the integrity check tool will always return FAILED when checking %service_dir%/bin/kavhttpd and %service_dir%/bin/kavhttp_client  (HTTP mode), or  %service_dir%/bin/kavicapd (ICAP mode).","Using the integrity check tool","209025.htm");
Page[305]=new Array("This section describes how to activate Kaspersky Scan Engine.","Licensing modes","Kaspersky Scan Engine supports the following licensing modes:","Offline licensing mode","In this mode, the Kaspersky Scan Engine licensing system uses a key file to activate Kaspersky Scan Engine.","You do not have to be connected to the Internet to use this mode. However, you have to renew the key file regularly to avoid licensing limitations.","Online licensing mode","In this mode, the Kaspersky Scan Engine licensing system uses an activation code to activate Kaspersky Scan Engine.","You must have a stable connection to the Internet to use this mode. When necessary, Kaspersky Scan Engine will connect to the Kaspersky servers and renew the activation code automatically. ","Licensing","179686.htm");
Page[306]=new Array("This section describes how to activate Kaspersky Scan Engine in offline licensing mode after Kaspersky Scan Engine is installed.","You can activate Kaspersky Scan Engine on the license settings page of the Kaspersky Scan Engine GUI.","To activate Kaspersky Scan Engine in offline licensing mode, you need a key file. The key file is provided to you by your Technical Account Manager (TAM).","To activate Kaspersky Scan Engine in offline licensing mode:","Open the configuration file that corresponds to the mode you chose:","If you are using Kaspersky Scan Engine in HTTP mode, open the kavhttpd.xml configuration file.","If you are using Kaspersky Scan Engine in ICAP mode, open the kavicapd.xml configuration file.","Do one of the following:","Copy the key file to the directory specified in the LicensePath element of the configuration file.","For a list of the other directories that Kaspersky Scan Engine automatically searches for the key file, see the description of the LicensePath element:","In kavhttpd.xml (HTTP mode): DirectorySettings &gt; LicensePath.","In kavicapd.xml (ICAP mode): SDKSettings &gt; LicensePath.","If you want to store the key file in a different directory, specify the path to this directory in the LicensePath element of the configuration file and copy the appinfo.kli file there.The appinfo.kli file is located in the /bin directory of the distribution kit.","In the LicensingMode element of the configuration file, specify 1.","Save the configuration file.","Restart the Kaspersky Scan Engine service:","In HTTP mode, restart the kavhttpd service.","In ICAP mode, restart the kavicapd service.","If the activation is successful, Kaspersky Scan Engine will start normally and you will be able to update the anti-virus database. Otherwise, Kaspersky Scan Engine will return an error to the command line.","Activating Kaspersky Scan Engine in offline licensing mode","179852.htm");
Page[307]=new Array("This section describes how to activate Kaspersky Scan Engine in online licensing mode after Kaspersky Scan Engine is installed.","You can activate Kaspersky Scan Engine on the license settings page of the Kaspersky Scan Engine GUI.","To activate Kaspersky Scan Engine in online licensing mode, you need an activation code. The activation code is provided to you by your technical account manager (TAM).","Your computer must be connected to the Internet to activate Kaspersky Scan Engine in online licensing mode. When you use online licensing mode, Kaspersky Scan Engine transfers to Kaspersky information about the installed copy of Kaspersky Scan Engine and activation code. See also the full list of data that is transferred to Kaspersky in online licensing mode.","To activate Kaspersky Scan Engine in online licensing mode:","Create a text file named \"license\".","Copy your activation code to the newly created file.","Make sure that the format of the activation code is correct. The correct format is XXXXX-XXXXX-XXXXX-XXXXX, where X is a number (0-9) or an uppercase Latin letter (A-Z), excluding \"I\" and \"O\". ","The file must not contain any other characters.","Save the file. ","Open the configuration file that corresponds to the your working mode:","If you are using Kaspersky Scan Engine in HTTP mode, open the kavhttpd.xml configuration file.","If you are using Kaspersky Scan Engine in ICAP mode, open the kavicapd.xml configuration file.","Do one of the following:","Copy the license file to the directory specified in the LicensePath element of the configuration file.","For a list of the other directories that Kaspersky Scan Engine automatically searches for the license file, see the description of the LicensePath element:","In kavhttpd.xml (HTTP mode): DirectorySettings &gt; LicensePath.","In kavicapd.xml (ICAP mode): SDKSettings &gt; LicensePath.","If you want to store the license file in a different directory, specify the path to this directory in the LicensePath element and copy the appinfo.kli file to that directory. The appinfo.kli file is located in the /bin directory of the distribution kit.","In the LicensingMode element of the configuration file, specify 2.","Save the configuration file.","Restart the Kaspersky Scan Engine service:","In HTTP mode, restart the kavhttpd service.","In ICAP mode, restart the kavicapd service.","If the activation is successful, Kaspersky Scan Engine will start normally and you will be able to update the anti-virus database. Otherwise Kaspersky Scan Engine will return an error to the command line.","After successful activation in online licensing mode, the licensing information is synchronized with Kaspersky servers. This synchronization can be used, for example, to change the expiration date for the activation code (thus removing the need for a new online activation) or to change the available functionality.","This is done automatically once per day. Maximum time without Internet connection is 15 to 30 days.","In order to synchronize licensing information with Kaspersky servers, your computer must be connected to the Internet.","Activating Kaspersky Scan Engine in online licensing mode","179855.htm");
Page[308]=new Array("The license lifecycle in the offline and online licensing modes is the same. Kaspersky Scan Engine can be used until a certain date, which is called the expiration date. Kaspersky Scan Engine uses a key file or an activation code to determine the expiration date.","If the expiration date has passed, the key file or the activation code expires and you can only use Kaspersky Scan Engine with licensing limitations.","Licensing limitations","Kaspersky Scan Engine can have the following licensing limitations:","If the time received from KSN is at least one day later than the expiration date of your key file or activation code, Kaspersky Scan Engine will work but you will not be able to use File and URL Reputation Checking. Make sure Enable reputation checking and Enable Phishing Protection are turned off (see Settings -&gt; Scanning in the Kaspersky Scan Engine GUI), otherwise you will not be able to start the kavhttpd and kavicapd services.","If the release date of the anti-virus database is later than the expiration date of your key file or activation code, Kaspersky Scan Engine does not update the anti-virus database.","Removing licensing limitations in online licensing mode","To remove the licensing limitations, you can do the following:","If your copy of Kaspersky Scan Engine was not connected to the Internet for the last 15 days or more, the licensing limitations are most likely caused by outdated licensing information. To remove licensing limitations, allow Kaspersky Scan Engine to connect to the Internet.","To prevent this problem, make sure that Kaspersky Scan Engine always has access to the Internet.","If your activation code has expired, obtain a new activation code and activate Kaspersky Scan Engine with it. To activate Kaspersky Scan Engine with a new code, your copy of Kaspersky Scan Engine must be connected to the Internet.","If other options are not possible, use an earlier version of the anti-virus database to initialize Kaspersky Scan Engine. This method does not remove limitations placed on File and URL Reputation Checking functionality.","Removing licensing limitations in offline licensing mode","To remove the licensing limitations, obtain a new key file and activate Kaspersky Scan Engine with it.","Licensing limitations","179860.htm");
Page[309]=new Array("The SSL certificate and a private key that are generated during the installation of Kaspersky Scan Engine allow you to use Kaspersky Scan Engine GUI via HTTPS. The certificate is self-signed, so the browser you use informs you about an untrusted connection. We recommend that you use a certificate that is trusted in your infrastructure. However if you cannot use a trusted certificate, you can add the self-signed certificate as trusted to your browser or operating system.","Kaspersky Scan Engine GUI and SSL certificates","182982.htm");
Page[310]=new Array("Kaspersky Scan Engine GUI uses an SSL certificate for HTTPS connections. By default, Kaspersky Scan Engine GUI uses a self-signed certificate and a private key that are generated during installation of Kaspersky Scan Engine. The generated certificate is valid for two years.","We recommend that you generate a certificate that will be trusted in your infrastructure and configure Kaspersky Scan Engine GUI to use this certificate instead of the self-signed certificate.","Before making changes, create a backup copy of the existing private key, certificate, and Kaspersky Scan Engine configuration file.","To generate a trusted certificate for Kaspersky Scan Engine GUI:","Create a private key and a trusted certificate:","Create a new private and public key pair.","Use the public key to generate an SSL Certificate Signing Request (CSR).","Sign the CSR by using the trusted certificate authority (CA).","This creates a trusted certificate for the private key.","Convert the private key and the trusted certificate to PEM format.","Copy both the private key and the certificate to the %service_dir%/httpsrv directory.","You must configure access to the private key file for ScanEngine GUI so that only the root user and the user account under which the service is running can have the read permission.","Edit the Settings &gt; ServerSettings &gt; SSLCertificatePath and Settings &gt; ServerSettings &gt; SSLPrivatePath elements of the Kaspersky Scan Engine configuration file if necessary so that they will contain the paths to the certificate and private key respectively.","Save the Kaspersky Scan Engine configuration file.","Restart Kaspersky Scan Engine.","Generating SSL certificates for Kaspersky Scan Engine GUI","182983.htm");
Page[311]=new Array("The procedures in this section show you how to add the self-signed certificates generated during Kaspersky Scan Engine installation to the trusted storage. This will remove the security warnings generated by browsers.","The information in this section is applicable to the situation when the user gains access to Kaspersky Scan Engine GUI from the same computer on which Kaspersky Scan Engine GUI runs. If the Settings &gt; ServerSettings &gt; ConnectionString element of the Kaspersky Scan Engine configuration file refers to an external interface, the Kaspersky Scan Engine GUI website will not be considered trusted, because the self-signed certificate can be used only with https://127.0.0.1 and https://localhost addresses.","To avoid potential security risks, it is recommended to use a trusted certificate signed by a certificate authority (CA).","Causing a self-signed certificate to be trusted by a browser (Kaspersky Scan Engine GUI opens in Mozilla Firefox)","You add Kaspersky Scan Engine GUI to the list of Mozilla Firefox trusted sites so that the browser will not display warnings about the certificate.","Causing a self-signed certificate to be trusted by a browser (Kaspersky Scan Engine GUI opens in a browser for Linux)","Procedures for using a browser to import a certificate as trusted (on Linux systems) vary depending on the browser and Linux distribution used. But the procedures share common steps: to open the browser settings form and use the form to import the certificate to a store.","To manually cause a self-signed certificate to be trusted by a browser on a Linux system:","Create a /usr/local/share/ca-certificates/ directory if it does not exist on your computer:","mkdir /usr/local/share/ca-certificates/","Copy your root certificate (.crt file) to the created directory:","cp &lt;full_path_to_the_certificate&gt; /usr/local/share/ca-certificates/","Update the certificates:","sudo update-ca-certificates","If you do not have the ca-certificates package, install it with your package manager.","Removing a certificate from the list of trusted ones","After you have reconfigured or uninstalled Kaspersky Scan Engine, old certificates are no longer used by Kaspersky Scan Engine GUI. You can remove them from the list of trusted certificates.","On a Linux system, the removal procedure is performed in a way that is similar to the addition of a certificate: open the list of the trusted certificates and remove those that you do not need.","Adding the self-signed certificate as trusted to a browser (Linux)","182984.htm");
Page[312]=new Array("The procedures in this section show you how to add the self-signed certificates generated during Kaspersky Scan Engine installation to the trusted storage. This will remove the security warnings generated by browsers.","The information in this section is applicable to the situation when the user gains access to Kaspersky Scan Engine GUI from the same computer on which Kaspersky Scan Engine GUI runs. If the Settings &gt; ServerSettings &gt; ConnectionString element of the Kaspersky Scan Engine configuration file refers to an external interface, the Kaspersky Scan Engine GUI website will not be considered trusted, because the self-signed certificate can be used only with https://127.0.0.1 and https://localhost addresses.","To avoid potential security risks, it is recommended to use a trusted certificate signed by a certificate authority (CA).","Causing a self-signed certificate to be trusted by a browser (Kaspersky Scan Engine GUI is opened in Internet Explorer)","Gaining the browser's trust requires that you perform, in sequence, the following three procedures:","Save the certificate to a local file","To save the certificate to a local file:","Open the https://127.0.0.1 or https://localhost address in Internet Explorer.","The browser informs you of a problem with the security certificate of the website.","Certificate error message","Select the Continue to this website (not recommended) link.","The Certificate Error message appears in the address bar.","Click Certificate Error.","The Untrusted Certificate window opens.","Untrusted Certificate window","Select the View certificates link.","The Certificate window opens with information about the Kaspersky Scan Engine certificate.","Certificate window","Select the Details tab and click Copy to File to create a local copy of the certificate.","The Certificate Export Wizard starts.","Certificate Export Wizard","Follow the Wizard instructions.","Use the default Wizard settings during the certificate export.","Start the certificate import process","To start the certificate import process through Microsoft Management Console (MMC):","From the Search box, navigate to the Run box and enter mmc.","You can now run MMC as Administrator.","Running the MMC","In the MMC-based console that opens, select File &gt; Add/Remove Snap-in.","Selecting Add/Remove Snap-in","The Add or Remove Snap-ins window opens.","In the Available snap-ins list, select Certificates and click Add.","Adding the Certificates snap-in","The Certificates snap-in window opens.","Select Computer account and click Next.","Selecting Computer account","In the Select Computer window that opens, click Finish.","Selecting Local computer","In the tree pane, select Certificates (Local Computer) &gt; Trusted Root Certification Authorities, right-click Certificates, and select All Tasks &gt; Import.","Selecting Import","The Certificate Import Wizard starts.","Import the saved certificate","To add the saved certificate to the Trusted Root Certification Authorities store:","On the Welcome page of the Wizard, click Next.","Certificate Import Wizard","Click Browse and select the certificate that was saved in the \"Save the certificate to a local file\" procedure above.","Importing the previously saved certificate","On the next page of the Certificate Import Wizard, click Next.","Selecting a certificate store","On the last page of the Certificate Import Wizard, click Finish.","Completing the certificate import","Close the MMC-based console and restart the browser.","The security problem (untrusted certificate) is resolved, as shown in the figure below.","Website identification","Causing a self-signed certificate to be trusted by a browser (Kaspersky Scan Engine GUI opens in Google Chrome)","To make the self-signed certificate for Kaspersky Scan Engine GUI trusted when using Google Chrome:","Open the https://127.0.0.1 or https://localhost address in Google Chrome.","A warning is displayed in the address bar that the connection to the site is not secure.","Click the Not secure message.","A window opens with security details about the website.","Click Certificate to view the certificate information. (When the mouse pauses over Certificate, a Show certificate tooltip appears.)","In the Certificate window that opens, select the Details tab and click Copy to File to create a local copy of the certificate.","The Certificate Export Wizard starts.","Certificate Export Wizard","Follow the Wizard instructions.","Use the default Wizard settings during the certificate export.","After the certificate is saved to a local disk, open it and add it to the Trusted Root Certification Authorities store as described in the procedure for Internet Explorer.","Restart the browser.","Causing a self-signed certificate to be trusted by a browser (Kaspersky Scan Engine GUI opens in Mozilla Firefox)","You add Kaspersky Scan Engine GUI to the list of Mozilla Firefox trusted sites so that the browser will not display warnings about the certificate.","Removing a certificate from the list of trusted ones","After you have reconfigured or uninstalled Kaspersky Scan Engine, old certificates are no longer used by Kaspersky Scan Engine. You can remove them from the list of trusted certificates.","To remove a certificate from the list of trusted certificates:","Open the Certificates management console by running the following command:","certmgr.msc","In the tree pane, select Trusted Root Certification Authorities &gt; Certificates.","Certificates management console","In the results pane, right-click the added certificate and select Delete.","Adding the self-signed certificate as trusted to a browser (Windows)","186925.htm");
Page[313]=new Array("This section provides information to help you solve problems you might encounter when using Kaspersky Scan Engine.","If you encounter a problem that is not mentioned in this section, turn on logging, repeat the actions that preceded the problem, and then send the logs and configuration files to your TAM.","Problem: Kaspersky Scan Engine does not start after system reboot and could not be started with systemctl","The cause of this problem might be that the /opt/ directory is located on a mounted device. When Kaspersky Scan Engine initializes after reboot, the device is not yet mounted and the operating system cannot find systemd unit files for Kaspersky Scan Engine.","To solve this problem, try the following actions:","Disable Kaspersky Scan Engine services:","systemctl disable klScanEngineUI","For HTTP mode:","systemctl disable kavhttpd","For ICAP mode:","systemctl disable kavicapd","Delete symbolic links to Kaspersky Scan Engine configuration files:","rm /etc/klScanEngineUI.xml /etc/kavhttpd.xml /etc/kavicapd.xml","Copy Kaspersky Scan Engine unit files to /etc/systemd/system/:","cp /opt/kaspersky/ScanEngine/etc/klScanEngineUI.service /etc/systemd/system/klScanEngineUI.service","For HTTP mode:","cp /opt/kaspersky/ScanEngine/etc/kavhttpd.service /etc/systemd/system/kavhttpd.service","For ICAP mode:","cp /opt/kaspersky/ScanEngine/etc/kavicapd.service /etc/systemd/system/kavicapd.service","Copy Kaspersky Scan Engine configuration files to /etc/:","cp /opt/kaspersky/ScanEngine/etc/klScanEngineUI.xml /etc/klScanEngineUI.xml","For HTTP mode:","cp /opt/kaspersky/ScanEngine/etc/kavhttpd.xml /etc/kavhttpd.xml","For ICAP mode:","cp /opt/kaspersky/ScanEngine/etc/kavicapd.xml /etc/kavicapd.xml","Reload systemd:","systemctl daemon-reload","Enable the Kaspersky Scan Engine services to start on system boot:","systemctl enable klScanEngineUI","For HTTP mode:","systemctl enable kavhttpd","For ICAP mode:","systemctl enable kavicapd","Start Kaspersky Scan Engine services:","service klScanEngineUI start","For HTTP mode:","service kavhttpd start","For ICAP mode:","service kavicapd start","Problem: Kaspersky Scan Engine does start and does not print logs","The cause of this problem might be that Kaspersky Scan Engine cannot find klScanEngineUI.xml, or that the file is corrupted and Kaspersky Scan Engine cannot read it. ","To find the solution to this problem, check the log files that are created in the /tmp/ subdirectory of the Kaspersky Scan Engine installation directory.","Problem: An error occurred while loading data by the Kaspersky Scan Engine GUI (the dashboard or scan results page)","The cause of this problem is a failure of Kaspersky Scan Engine to connect to the kavebase database or read data from it.","To solve this problem, try the following actions:","Check whether the PostgreSQL instance is running.","Check whether the PostgreSQL instance is accessible from your Kaspersky Scan Engine instance.","Check whether the kavebase database persists in the PostgreSQL instance.","If not, create the kavebase database as described in section \"Manual installation (Linux)\".","Check whether the scanengine database user persists in the PostgreSQL instance.","If not, create the scanengine database user as described in section \"Manual installation (Linux)\".","Problem: The Kaspersky Scan Engine GUI is not displayed in a browser","To solve this problem, try the following actions:","Check that the Kaspersky Scan Engine instance and the klScanEngineUI service are running.","Check that you are using a supported browser.","Check that the klScanEngineUI.xml configuration file contains the following:","The value specified in the ServerSettings &gt; EnableUI field is true.","The ServerSettings &gt; ConnectionString element contains one of the following IP addresses:","127.0.0.1","In this case, the Kaspersky Scan Engine GUI is accessible from the same computer on which Kaspersky Scan Engine is installed.","A network IP address","In this case, the Kaspersky Scan Engine GUI is accessible over the network.","Make sure that the firewall does not block access to the computer on which Kaspersky Scan Engine is installed.","Problem: Untrusted connection error when connecting to the Kaspersky Scan Engine GUI","The SSL certificates that are generated during the installation of Kaspersky Scan Engine are self-signed, so the browser you use informs you of an untrusted connection.","To solve this problem, try the following:","(Recommended) Use other certificates that are trusted in your infrastructure.","If you cannot use other certificates, you can add the initially generated certificates as trusted to your browser or operating system.","Problem: An error occurred while saving settings in the Kaspersky Scan Engine GUI","Check whether the settings that you have specified are correct.","Check the status of the kavhttpd or kavicapd service by running one of the commands:","service kavhttpd status","service kavicapd status","Problem: An error occurred while deleting the database during uninstallation, database \"kavebase\" is being accessed by other users","Probable cause: someone else is connected to the kavebase database (for example, using pgAdmin).","Solution: run the following query to kavebase:","SELECT *, pg_terminate_backend(pid)","FROM pg_stat_activity","WHERE pid &lt;&gt; pg_backend_pid()","AND datname = 'kavebase';","Problem: psql not recognized as an internal or external command","This problem may occur in Windows. To solve it, add the PostgreSQL bin directory to the PATH environment variable.","In Windows, do the following:","Go to Control Panel -&gt; System and Security -&gt; System -&gt; Advanced system settings -&gt; Environment variables...","The Environment variables dialog opens.","In the list of System Variables (the lower half of the dialog), select Path, and then click Edit.","Click New, and then type in the path to the PostgreSQL bin directory (for example C:\\Program Files\\PostgreSQL\\13\\bin).","Save changes by clicking OK in all of the dialogs.","Problem: SCRAM authentication requires libpq version 10 or above","This problem can occur when installing Kaspersky Scan Engine if you are using PostgreSQL 13 and the password_encryption value differs from md5.","To solve this problem, do the following:","In the postgresql.conf configuration file, set the password_encryption parameter to md5. ","Save changes.","Restart PostgreSQL:","systemctl restart postgresql-13","Update the password for the database user with administrator rights (for example, the user postgres), which will be used when installing Kaspersky Scan Engine:","alter user postgres with password '%PASSWORD%';","Make sure that the authentication method is set to md5 in the pg_hba.conf file.","Retry the installation of Kaspersky Scan Engine.","Problem: The Kaspersky Scan Engine GUI does not display events (the dashboard or scan results page)","This problem can occur if the kavebase database is damaged.","To solve this problem, do the following:","Stop the following processes:","klScanEngineUI","kavhttpd (HTTP mode) or kavicapd (ICAP mode)","Delete the kavebase database by running the following command:","DROP DATABASE kavebase;","Create a new kavebase database by running the following command:","CREATE DATABASE kavebase OWNER %owner%;","Here,  %owner% is the user that was created for working with kavebase during the installation of Kaspersky Scan Engine.","Import the tables.sql file from the %service_dir%/samples directory by running the following command:","psql -d kavebase -a -f tables.sql","Restart the processes that you stopped in step 1.","After this operation, the admin password for Kaspersky Scan Engine GUI will be restored to the default one and all previous events will be deleted.","Troubleshooting","182962.htm");
Page[314]=new Array("This section provides information about data transferred to Kaspersky during operation of Kaspersky Scan Engine.","Kaspersky protects any information received in accordance with law and applicable Kaspersky rules. Data is transmitted over a secure channel.","Data transferred to Kaspersky","192996.htm");
Page[315]=new Array("During an update, Kaspersky Scan Engine transfers its encrypted user agent string to Kaspersky.","Purpose of data provisioning: calculating Kaspersky's product usage statistics and update statistics.","Region where the data is processed: Moscow, Russia.","Data protection method: secure encryption.","The following information is transferred in the user agent string:","Version of the user agent string format","Identifier of Kaspersky Scan Engine ","Licensing mode","Identifier of the license","Update session identifier","Full version of Kaspersky Scan Engine: major, minor, build, revision, and hotfix","Storage period:","While statistic data is processed: 24 hours. ","After the statistic data is processed: ","License identifier: only the top 1000 identifiers are stored indefinitely.","Other parameters are stored indefinitely. These parameters are not personal data.","See also the detailed information about data provisioning.","Data transferred to Kaspersky during an update","180001.htm");
Page[316]=new Array("In online licensing mode, Kaspersky Scan Engine automatically updates licensing information once per day. When licensing information is updated, Kaspersky Scan Engine transfers to Kaspersky information about the installed copy of Kaspersky Scan Engine and the activation code. This information is necessary to perform online activation.","The following information is transferred:","Activation code provided during the online activation","Identifier of Kaspersky Scan Engine","Identifier of the locale used by Kaspersky Scan Engine ","Full version of the Kaspersky Scan Engine: major, minor, build, revision, and hotfix","System date and time","Unique identifier of the Kaspersky Scan Engine installation","Current activation code status (active or blocked)","Expiration date for the activation code","The functionality that is available with this activation code","The status of the activations limit (if it applies to the activation code)","See also the detailed information about data provisioning.","Data transferred to Kaspersky in online licensing mode","180002.htm");
Page[317]=new Array("When you use the File and URL Reputation Checking feature, Kaspersky Scan Engine transfers to Kaspersky information about the installed copy of Kaspersky Scan Engine and detected objects.","The following information is transferred:","Identifier of Kaspersky Scan Engine","Full version of Kaspersky Scan Engine: major, minor, build, revision, and hotfix","Identifier of the license owner","Checksums of processed files (MD5, SHA256)","Version of KSN","Checksums of the detected object name (MD5, SHA256)","Normalized URL","See also the detailed information about data provisioning.","Data transferred to Kaspersky during File and URL Reputation Checking","192997.htm");
Page[318]=new Array("You can submit a set of statistics to KSN.","This statistics set includes the following:","Information about the version of Kaspersky Scan Engine used","Information about the operating system version of the statistics sender","Identifier of the license owner","Information about detected objects","See also the detailed information about data provisioning.","Statistics submitted to KSN","180772.htm");
Page[319]=new Array("The files containing information about the procedure of data provisioning used in Kaspersky Scan Engine are included in the KAV SDK distribution kit (hereinafter %SDK_kit%):","%SDK_kit%/doc/About data provision.txt&#8212;Describes the procedure of data provisioning for File and URL Reputation Checking.","%SDK_kit%/doc/About data provision - online licensing.txt&#8212;Describes the procedure of data provisioning for online licensing mode.","%SDK_kit%/doc/About data provision extended.txt&#8212;Describes the procedure of data provisioning when you submit statistical information to KSN in Kaspersky Scan Engine for Windows systems.","About data provisioning","185034.htm");
Page[320]=new Array("If you haven't found the solution for your issue in this documentation or other sources, create a request for Kaspersky Technical Support. When contacting Kaspersky Technical Support, provide the necessary information about Kaspersky Scan Engine.","Contacting Technical Support","234774.htm");
Page[321]=new Array("Information about third-party code is contained in two files named legal_notices.txt. One of these files is stored in the doc subdirectory of the Kaspersky Scan Engine installation directory. The other is stored in the doc subdirectory of the KAV SDK installation directory.","Information about third-party code","192998.htm");
Page[322]=new Array("Registered trademarks and service marks are the property of their respective owners.","Safari is a trademark of Apple Inc.","Dell Technologies, Dell, EMC,  and other trademarks are trademarks of Dell Inc. or its subsidiaries.","F5 is a trademark of F5 Networks, Inc. in the U.S. and in certain other countries.","Chrome, Google, Google Chrome are trademarks of Google LLC.","Linux is the registered trademark of Linus Torvalds in the U.S. and other countries.","Internet Explorer, Microsoft, Microsoft Edge, Visual Studio, Win32, Windows, Windows Server are trademarks of the Microsoft group of companies.","Firefox and Mozilla are trademarks of the Mozilla Foundation in the U.S. and other countries.","Oracle and Solaris are registered trademarks of Oracle and/or its affiliates.","Red Hat is a trademark or registered trademark of Red Hat, Inc. or its subsidiaries in the United States and other countries.","Debian is a registered trademark of Software in the Public Interest, Inc.","Splunk is a trademark and registered trademark of Splunk Inc. in the United States and other countries.","UNIX is a registered trademark in the United States and other countries, licensed exclusively through X/Open Company Limited.","Trademark notices","192999.htm");
Page[323]=new Array(" ","&nbsp;","&nbsp;","&nbsp;","Dear User, ","Thank you for choosing Kaspersky as your security software provider. We hope that this document helps you to use our product.","Attention! This document is the property of AO Kaspersky Lab (herein also referred to as Kaspersky): all rights to this document are reserved by the copyright laws of the Russian Federation and by international treaties. Illegal reproduction and distribution of this document or parts hereof incur civil, administrative, or criminal liability under applicable law. ","Any type of reproduction or distribution of any materials, including translations, is allowed only with the written permission of Kaspersky.","This document, and graphic images related to it, may be used for informational, non-commercial, and personal purposes only.","Kaspersky reserves the right to amend this document without additional notification.","Kaspersky assumes no liability for the content, quality, relevance, or accuracy of any materials used in this document to which rights are held by third parties, or for any potential harms associated with use of the document.","Document revision date: 10/24/2023","© 2023 AO Kaspersky Lab","https://www.kaspersky.com<br>https://support.kaspersky.com","About Kaspersky","Copyright","55937.htm");
var PageCount=324;
var parsedMainTitle = 'Kaspersky Scan Engine ';
var reviewDate = 1698129091407;
(function () {
    var maxTextLength = 0;
    var fakeDiv = $('<div/>');
    var text;
    var pageSearch = _.filter(Page, function(page) {
        return page;
    });
    pageSearch = _.map(pageSearch, function (page) {
        return {
            link: page[page.length - 1],
            title: page[page.length - 2],
            text: _.map(page.slice(0, page.length - 2), function(item) {
                text = fakeDiv.html(item).text();
                maxTextLength = Math.max(maxTextLength, text.length);

                return text;
            })
        };
    });

    fakeDiv.remove();

    window.search = function (searchWord, searchWordMinLength) {
        var result = {
            found: false,
            isInit: false,
            results: [],
            resultsCount: 0
        };

        if (searchWord !== '') {
            result.searchWord = searchWord;

            var searchLength = searchWord.length > 5 ? searchWord.length - 2 : searchWordMinLength;

            var fuseOptions = {
                shouldSort: true,
                includeScore: true,
                includeMatches: true,
                minMatchCharLength: searchLength,
                tokenize: true,
                matchAllTokens: true,
                findAllMatches: true,
                threshold: 0.2,
                location: 0,
                distance: maxTextLength,
                keys: [{
                    name: 'title',
                    weight: 0.8
                  }, {
                    name: 'text',
                    weight: 0.2
                  }]
            };


            var fuse = new Fuse(pageSearch, fuseOptions);
            var currentResults = fuse.search(searchWord);

            searchWord = searchWord.replace(/(\\|\[|\*|\+|\(|\)|\.|"|'|`)/g, '\\$1');
            var searchRegExp = new RegExp(searchWord, 'gi');

            if (currentResults.length) {
                result.found = true;
                result.results = _.chain(currentResults)
                    .map(function (result) {
                        var item = result.item;
                        var matches = result.matches.slice(0,2);

                        return {
                            title: item.title.replace(searchRegExp, '<mark>$&</mark>'),
                            link: item.link,
                            texts: _.reduce(matches, function(previous, searchResult) {
                                if (searchResult.key === 'text') {
                                    var originalString = searchResult.value;
                                        var firstEntryPosition = originalString.search(searchRegExp);
                                        if (firstEntryPosition < 0) {
                                            var processedResult = originalString;
                                        } else if (firstEntryPosition < 100) {
                                            var slicePosition = Math.max(30,100-firstEntryPosition);
                                            var sentenceStart = originalString.slice(0,firstEntryPosition);
                                            var contextAfterEntry = originalString.slice(firstEntryPosition, firstEntryPosition + slicePosition);
                                            var afterContext = originalString.slice(firstEntryPosition + slicePosition);
                                            var preResult = sentenceStart + contextAfterEntry + afterContext.slice(0,afterContext.indexOf(' '));
                                            var processedResult = preResult.replace(/[.,:;]$/,"") + '...';
                                        } else {
                                            var beforeFirstEntry = originalString.slice(firstEntryPosition-100,firstEntryPosition);
                                            var startOfSentencePosition = beforeFirstEntry.lastIndexOf('. ');
                                            if (startOfSentencePosition < 0) {
                                                var contextOfEntry = originalString.slice(firstEntryPosition-60,firstEntryPosition+60);
                                                var beforeContext = originalString.slice(0,firstEntryPosition-60);
                                                var afterContext = originalString.slice(firstEntryPosition+60);
                                                var preResult = '...' + beforeContext.slice(beforeContext.lastIndexOf(' ')) + contextOfEntry + afterContext.slice(0,afterContext.indexOf(' '));
                                            } else {
                                                var sentenceContainingEntry = beforeFirstEntry.slice(startOfSentencePosition+2);
                                                var contextAfterEntry = originalString.slice(firstEntryPosition, firstEntryPosition+30);
                                                var afterContext = originalString.slice(firstEntryPosition+30);
                                                var preResult = sentenceContainingEntry + contextAfterEntry + afterContext.slice(0,afterContext.indexOf(' '));
                                            }
                                            var processedResult = preResult.replace(/[.,:;]$/,"") + '...';
                                        }
                                    previous.push(processedResult.replace(searchRegExp, '<mark>$&</mark>'));
                                }
                                return previous;
                            }, [])
                        }
                    })
                    .value();

                result.resultsCount = result.results.length;
            }
        }
        return result;
    };
})();


if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    };
}

window.loadParent = function () {};

if (!window.isTOCLoaded) {
    window.isTOCLoaded = function () {};
}

// hide content to avoid blink
$(window.document.documentElement).css('visibility', 'hidden');

$(function () {
    var $aside, $container, $content, $header, $modalContent, $modalHeader, $overlay, $pageTitle,
        $tooltip, $tooltipContent, tooltipButton;

    $.support.cors = true;
    $.fx.speeds._default = 200;

    var options = {
        helpers: {
            media_hv_min: 568,
            media_hv_middle: 874,
            media_mobile: 768
        },
        isMacProject: Boolean(window['isMacProject']),
        isIE7: Boolean(navigator.appVersion.match('MSIE 7.')),
        isIE8: Boolean(navigator.appVersion.match('MSIE 8.')),
        isIE9: Boolean(navigator.appVersion.match('MSIE 9.')),
        isIE10: Boolean(navigator.appVersion.match('MSIE 10.')),
        isFirefox: Boolean(navigator.userAgent.match('Firefox')),
        isOperaMini: Object.prototype.toString.call(window["operamini"]) === "[object OperaMini]",
        isFileProtocol: window.location.protocol === 'file:',
        isAllInOne: window.location.pathname.match(/(all-in-one\.htm)[l]?$/),
        searchWord: getParam('searchWord', true),
        searchWordMinLength: 2
    };

    options.lessThanIE11 = options.isIE7 || options.isIE8 || options.isIE9 || options.isIE10;

    if (window.Customization) {
        _.each(window.Localization, function(item, key) {
            if (_.isObject(window.Customization[key])) {
                window.Localization[key] = window.Customization[key].Value;
            }
        });
    }

    setParam('searchWord', null, true);

    var HELP = window.HELP = $.extend(true, window.HELP, options);
    var $window = $(window);
    var html = document.documentElement;
    var $html = $(html);
    var $head = $(document.head);
    var $body = $(document.body);
    var title = $html.find('title').text();

    $body.removeClass("no-js");

    var ContainerTemplateFunction = _.template(ContainerTemplate);
    var HeaderTemplateFunction = _.template(HeaderTemplate);
    var FooterTemplateFunction = _.template(FooterTemplate);
    var AsideTemplateFunction = _.template(AsideTemplate);
    var SearchResultsTemplateFunction = _.template(SearchResultsTemplate);
    var MobileSearchResultsTemplateFunction = _.template(MobileSearchResultsTemplate);
    var LangListTemplateFunction = _.template(LangListTemplate);
    var VersionsTemplateFunction = _.template(VersionsTemplate);
    var MenuTemplateFunction = _.template(MenuTemplate);
    var AllInOneMenuTemplateFunction = _.template(AllInOneMenuTemplate);
    var CustomStylesTemplateFunction = _.template(CustomStylesTemplate);

    window.parsedMainTitle = window.parsedMainTitle || "Kaspersky Online Help";
    window.toggleBlock = toggleBlock;
    window.showAll = showAll;
    window.hideAll = hideAll;
    window.togglePopup = togglePopup;
    window.showPopup = showTooltip;
    window.hidePopup = hideTooltip;

    function getParam(param, useSession) {
        return store(param, undefined, { useSession: useSession });
    }

    function setParam(param, value, useSession) {
        if (value === void 0) {
            value = null;
        }

        store(param, value, { useSession: useSession });
    }

    function toggleBlock(id) {
        if (!HELP.isAllInOne) {
            var $block = $('#d' + id);
            var $toggler = $('#h' + id);

            if ($block.length > 0 && $toggler.length > 0) {
                $block.slideToggle();
                $toggler.toggleClass('is-expanded');
                $window.resize();
            }
        }
    }

    function showAll() {
        $('.expandingblock').slideDown();
        $('.expandingblocktemplate').addClass('is-expanded');
        $window.resize();
    }

    function hideAll() {
        $('.expandingblock').slideUp();
        $('.expandingblocktemplate').removeClass('is-expanded');
        $window.resize();
    }

    function togglePopup(id, legacyblockname, show) {
        switch (show) {
            case true:
                showTooltip(id, legacyblockname);
                break;
            case false:
                hideTooltip();
                break;
            default:
                toggleTooltip(id, legacyblockname);
        }
    }

    function calcTooltipPosition() {
        if (tooltipButton) {
            var body = document.body;
            var delta = 30;
            var offset = 10;

            if (options.isIE7 || options.isIE8) {
                offset = 0;
            }

            var bodyHeight = body.clientHeight;
            var bodyWidth = body.clientWidth;
            var linkRect = tooltipButton.getBoundingClientRect();
            var tooltip = $tooltip[0];
            var isToTop = linkRect.top > bodyHeight - linkRect.bottom;
            var isToLeft = linkRect.left > bodyWidth - linkRect.right;
            var coords = {
                top: isToTop ? "" : linkRect.bottom + offset,
                bottom: isToTop ? bodyHeight - linkRect.top + offset : "",
                left: isToLeft ? "" : linkRect.left - delta,
                right: isToLeft ? bodyWidth - linkRect.right - delta : ""
            };

            $tooltip.toggleClass("is-to-top", isToTop).toggleClass("is-to-left", isToLeft).css(coords);

            var tooltipRect = tooltip.getBoundingClientRect();
            coords = {};

            var isOverlapLeft = tooltipRect.left < delta;
            var isOverlapRight = tooltipRect.right > bodyWidth - delta;

            if (isOverlapLeft) {
                coords.left = delta;
            }

            if (isOverlapRight) {
                coords.right = delta;
            }

            if (isOverlapLeft || isOverlapRight) {
                coords.width = "auto";
            } else {
                coords.width = "";
            }

            $tooltip.css(coords);
            tooltipRect = tooltip.getBoundingClientRect();
            coords = {};

            var isOverlapTop = tooltipRect.top < delta;
            var isOverlapBottom = tooltipRect.bottom > bodyHeight - delta;

            if (isOverlapTop) {
                coords.top = delta;
            }

            if (isOverlapBottom) {
                coords.bottom = delta;
            }

            $tooltip.css(coords);
            if (options.isIE7 || options.isIE8) {
                return $tooltip.height(Math.min($tooltipContent[0] != null ? $tooltipContent[0].scrollHeight : void 0, 200));
            }
        }
    }

    function calcHomeBtnVisibility($viewport) {
        return setTimeout(function () {
            var $homeBtn = $viewport.find('.bt-home');

            var calcHeight;
            if ($homeBtn.hasClass('is-shown')) {
                var btn = $homeBtn[0];
                var style = btn.currentStyle || window.getComputedStyle(btn);
                calcHeight = btn.offsetHeight + parseInt(style.marginTop) + parseInt(style.marginBottom);
            } else {
                calcHeight = 0;
            }

            var showBtn = $viewport[0].offsetHeight < $viewport[0].scrollHeight - calcHeight;

            $homeBtn.toggleClass('is-shown', showBtn);
        }, 400);
    }

    function showTooltip(id, btnId) {
        if ($tooltip.data("id") !== id) {
            var content = document.getElementById("d" + id).innerHTML;
            $tooltip.data("id", id);
            $tooltipContent.html(content);
        }

        tooltipButton = document.getElementById(btnId);
        $tooltip.show();

        calcTooltipPosition();
    }

    function hideTooltip() {
        $tooltip.hide();
    }

    function toggleTooltip(id, btnId) {
        if ($tooltip.data("id") !== id || $tooltip.css("display") === "none") {
            showTooltip(id, btnId);
        } else {
            hideTooltip();
        }
    }

    function bindEvents() {
        var $asidePlaceholder = $('.js_aside_placeholder');
        var $menuItems = $('.js_menu_item');
        var $mobileSearch = $('.js_mobile_search_result');
        var $viewport = $('.js_main');
        var mobileMenuToggle = function (button) {
            if (!$mobileSearch.hasClass('is-hidden')) {
                $mobileSearch.addClass('is-hidden');
            }

            $asidePlaceholder.toggleClass('is-active');
            $(button).toggleClass('is-active');
        };

        $('.js_burger').on('click', function (event) {
            event.preventDefault();
            mobileMenuToggle(this);
        });

        $body.on('click', '.js_mobile_menu_deeper', function (event) {
            event.preventDefault();
            mobileMenuShowItem($(this).data('id'));
        });

        $body.on('click', '.bt-home', function (event) {
            event.preventDefault();

            $(".js_content, .js_main").animate({
                scrollTop: 0
            }, '500', 'swing');
        });

        $window.on('resize', function () {
            calcTooltipPosition();
            calcHomeBtnVisibility($('.js_main'));
            calcAsideWidth($asidePlaceholder);
        });

        $viewport.on("scroll", calcTooltipPosition);

        $body.on('click', 'a', function (event) {
            var $self = $(this);
            var url = $self.attr('href');

            if (url && url.indexOf('mailto') === 0) {
                return;
            }

            if ($self.hasClass('hyperlinktemplate') || $self.hasClass('namedhyperlinktemplate')) {
                if (url.indexOf('http') === 0 && url.indexOf('help.kaspersky.com') === -1) {
                    if (window.confirm(HELP.localization.ExternalLinkText)) {
                        return;
                    }

                    event.preventDefault();
                }

                return;
            }

            if (HELP.isAllInOne) {
                if (url) {
                    var hash = url.match( /(.*)\.html?$/ );
                    if (hash && hash[1]) {
                        scrollToHash(hash[1]);

                        $(".js_menu_item").removeClass('is-active');
                        var $menuItem = $self.closest('.js_menu_item');
                        setMenuItemActive($menuItem);

                        if (window.history && window.history.pushState) {
                            window.history.pushState({
                                url: url,
                                hash: hash[1]
                            }, document.title, location.pathname + '#' + hash[1]);
                        }

                        event.stopPropagation();
                        event.preventDefault();

                        trackPage();

                        return;
                    }
                }
            }

            if (window.matchMedia) {
                var mq = window.matchMedia('screen and (max-width: 767px)');
                if (mq.matches) {
                    var toggleSiblings = $self.siblings('.js_contents_toggle');
                    if (toggleSiblings.length > 0 && !$self.hasClass('js_menu_link_direct')) {
                        toggleSiblings.trigger('click');
                        event.preventDefault();
                        return;
                    }
                }
            }

            if (url && url !== '#') {
                var localUrlRegExp = /([\w_]+\.htm)[l]?(#[\w]+(.htm)?)?/i;
                var urlMatches = url.match(localUrlRegExp);
                var isLocalUrl = Boolean(urlMatches && (url === urlMatches[1] || (urlMatches[2] && urlMatches[3])));
                var isLocalAnchor = urlMatches && urlMatches[2] && !urlMatches[3];

                if ($self.closest('.js_search_result_wrapper')) {
                    setParam('searchWord', HELP.searchWord, true);
                }

                var $view = $('.js_tabs_viewport');

                /*if ($view.length) {
                    setParam('asideScrollPosition', $view[0].scrollTop);
                }*/

                var $opened_menus = $('.js_contents_toggle.is-toggled+.js_menu_link');

                if ($opened_menus.length) {
                    setParam('openedMenus', _.map($opened_menus, function (a) {
                        return $(a).attr('href');
                    }));
                }

                if (isLocalUrl) {
                    if ($tooltip) {
                        $tooltip.hide();
                    }

                    var targetUrl = url;

                    if (HELP.isMacProject) {
                        targetUrl = "./pgs/" + urlMatches[2].slice(1);
                        if (HELP.isFileProtocol) {
                            $self.attr('href', targetUrl);
                        }
                    }

                    if (!HELP.isFileProtocol) {
                        event.preventDefault();

                        setNavigation(HELP.isMacProject ? urlMatches[2].slice(1) : url);

                        loadContent(targetUrl, true, null, url);

                        if (window.matchMedia && mq && mq.matches) {
                            $('.js_aside_placeholder').removeClass('is-active');
                            $('.js_burger').removeClass('is-active');
                            $('.js_mobile_aside').addClass('is-hidden');
                        }

                        $('.js_home').toggleClass('is-active', HELP.nav.home.url === HELP.nav.currentPage.url);
                    }
                } else if (isLocalAnchor) {
                    if (window.matchMedia && mq && mq.matches) {
                        $('.js_aside_placeholder').removeClass('is-active');
                        $('.js_burger').removeClass('is-active');
                        $('.js_mobile_aside').addClass('is-hidden');
                    }
                }
            } else {
                event.preventDefault();
            }
        });

        $body.on('click', '.js_menu_link, .js_menu_link_direct', function () {
            var $self = $(this);
            delete HELP.searchWord;
            setParam('searchWord', null, true);

            if (!$self.prev().hasClass('js_contents_toggle')) {
                $menuItems.removeClass('is-active');
            }

            $self.children('.js_contents_toggle').addClass('is-toggled').siblings('.js_contents_level').slideDown();
            $self.closest('.js_menu_item').addClass('is-active');

            var href = $self.attr('href');
            var topicRegExp = /[\w_]+\.htm/;
            var hashRegExp = /#([\w_]+)/;

            if (href.indexOf('#') > -1) {
                var locationMatch = location.pathname.match(topicRegExp);
                var hrefMatch = href.match(topicRegExp);
                var hash = href.match(hashRegExp)[1];
                event.preventDefault();

                if (!(locationMatch.length && hrefMatch.length && locationMatch[0] === hrefMatch[0])) {
                    loadContent(href, true, function() {
                        if (hash) {
                            scrollToHash(hash);
                        }
                    });
                }

                if (hash) {
                    scrollToHash(hash);

                    if (!HELP.isMacProject && window.history && window.history.pushState) {
                        window.history.pushState({
                            url: href,
                            hash: hash
                        }, document.title, href);
                    }
                }
            }
        });

        $(window).on('popstate', function (event) {
            var state = event.originalEvent.state;

            if (state && state.url) {
                if (!HELP.isAllInOne) {
                    loadContent(state.url, false, scroll, state.originalUrl);
                    setNavigation(state.url);
                } else {
                    scroll();
                    trackPage();
                    updateBreadcrumb();
                }
            }

            checkPrintSectionLink();

            function scroll() {
                if (state.hash) {
                    $(".js_menu_item").removeClass('is-active');
                    var $menuItem = $(".js_menu_link[href='" + state.hash + ".htm']").closest('.js_menu_item');
                    autoScrollContents($menuItem);

                    scrollToHash(state.hash);
                }
            }
        });

        $body.on('click', '.js_modal_close', function () {
            $overlay.removeClass('is-visible');
        }).on('click', '.js_overlay', function (event) {
            if (!$(event.target).closest('.js_modal').length) {
                $overlay.removeClass('is-visible');
            }
        });

        if (!HELP.isAllInOne) {
            var xStart = null;
            var yStart = null;

            $body.on('touchstart', '.js_content', function(event) {

                var tableInTopic = $(event.target).closest('.tableintopic');
                if (tableInTopic.length && tableInTopic.width() > tableInTopic.parent().width()) {
                    return;
                }

                var touch = event.originalEvent.touches[0];
                if (touch) {
                    xStart = touch.clientX;
                    yStart = touch.clientY;
                }
            });

            $body.on('touchmove', '.js_content', function(event) {
                if (!xStart || !yStart) {
                    return;
                }

                var touch = event.originalEvent.touches[0];
                var xEnd = touch.clientX;
                var yEnd = touch.clientY;
                var xDiff = xStart - xEnd ;
                var yDiff = yStart - yEnd;

                if (Math.abs(xDiff) > Math.abs(yDiff) && Math.abs(xDiff) > 50) {
                    if (xDiff > 0 && HELP.nav.nextPage) {
                        $('.js_container').addClass('is-loading');
                        $('.js_main').addClass('swipe-left');
                        setTimeout(function () {
                            $('.js_next_link').click();
                        }, 350);
                    } else if(xDiff < 0 && HELP.nav.prevPage) {
                        $('.js_container').addClass('is-loading');
                        $('.js_main').addClass('swipe-right');
                        setTimeout(function () {
                            $('.js_prev_link').click();
                        }, 350);
                    }

                    xStart = null;
                    yStart = null;
                }
            });
        }
    }

    /*
    #* Langs switch --------------------------------------------------------------------------------------------------
     */
    function loadLangs() {
        HELP.currentLangId = document.documentElement.lang;

        if (!window.Langs) {
            $('.js_selector_mobile_langs').remove();
            return;
        }

        var currentId = 'no id';
        var currentName = 'no name';
        var locLangs = window.LangsLocalization;

        window.Langs.forEach(function(item) {
            if (locLangs && locLangs[item.id]) {
                item.name = locLangs[item.id];
            }

            if (item.id === document.documentElement.lang) {
                HELP.currentLangId = currentId = item.id;
                HELP.currentLangCode = currentName = item.name;
            } else if ((document.documentElement.lang === 'zh-CN' && item.id === 'zh-Hans') ||
                        (document.documentElement.lang === 'zh-TW' && item.id === 'zh-Hant')) {
                currentId = item.id;
                HELP.currentLangCode = currentName = item.name;
            }
        });

        if (~['ja-JP', 'ko-KR', 'zh-Hans', 'zh-Hant', 'zh-HantTW', 'zh-CN', 'zh-TW'].indexOf(HELP.currentLangId)) {
            HELP.searchWordMinLength = 2;
        }

        if (window.Langs.length < 2) {
            $('.js_selector_mobile_langs').remove();
            return;
        }

        var isMac = Boolean(window.location.pathname.match(/pgs\/[\w_\.]+/));
        var isMacTitle = Boolean(window.location.pathname.match(/title\.html?$/));
        var LangListHtml = LangListTemplateFunction({
            langs: window.Langs,
            currentLang: {
                name: currentName,
                id: currentId
            },
            localization: HELP.localization,
            isMac: isMac,
            isMacTitle: isMacTitle
        });

        $header.find('.js_header_lang_list').html(LangListHtml);
        $('.js_selector_mobile_langs').html(LangListHtml).find('.js_dropdown').addClass('dropdown_large');

        $body.on('click', '.js_lang_item', function (event) {
            event.preventDefault();

            var $element = $(this);
            var langId = $element.data('lang-id');
            var path = window.location.pathname;
            var currentFolder = window.location.pathname.match(/([\w]+|[\w\.-]+)(\/pgs)?\/[\w_-]+.html?/)[1];

            window.location.href  = path.replace("/" + currentFolder + "/", "/" + langId + "/");
        });
    }

    function triggerSearch() {
        if (HELP.helpers.searchTimeout) {
            clearTimeout(HELP.helpers.searchTimeout);
        }

        HELP.helpers.searchTimeout = setTimeout(function () {
            var searchWord = $('.js_search_text').val().trim();

            if (searchWord.length < HELP.searchWordMinLength) {
                delete HELP.searchWord;
                setParam('searchWord', null, true);

                searchWord = null;

                $('.js-menu-content, .js_search').show();
                $('.js-search-content, .js_search_clear').hide();
            } else {
                HELP.searchWord = searchWord;
                setParam('searchWord', searchWord, true);

                var resultObj = search(searchWord, HELP.searchWordMinLength);
                resultObj.localization = HELP.localization;
                resultObj.isMacProject = HELP.isMacProject;

                var searchResultsHtml = SearchResultsTemplateFunction(resultObj);

                $('.js-menu-content, .js_search').hide();
                $('.js-search-content, .js_search_clear').show();

                $('.js_search_result_wrapper').html(searchResultsHtml);
            }
        }, 300);
    }

    /*
    #* TOC on the left ------------------------------------------------------------------------------------------------------
     */
    function loadMenu(menu) {
        if (!window['Toc']) {
            return;
        }

        var flatMenu = [];
        var currentUrl = HELP.isAllInOne || HELP.isMacProject ?
            /#([\w_]+)/.exec(location.hash) : /\/([\w_]+\.\w+$)/.exec(location.pathname);
        var currentPage = {};
        var currentLevel, parentPage;

        if (currentUrl && currentUrl[1]) {
            currentUrl = currentUrl[1];
        }

        function buildMenu(menu, level, parentId) {
            var isCurrentMenuLevelActive;
            level = level || 0;

            _.each(menu, function (item) {
                item.level = level;
                if (item.url && item.url.match(/#|(title\.html?)/)) {
                    return;
                }

                if (item.hidden) {
                    return;
                }

                flatMenu.push(item);

                if (item.url === currentUrl || item.url === currentUrl + '.htm') {
                    item.isActive = true;
                    currentPage = item;
                    currentLevel = level;
                }

                if (item.children) {
                    item.childIsActive = buildMenu(item.children, level + 1, item.id);
                }

                if (item.isActive || item.childIsActive) {
                    isCurrentMenuLevelActive = true;
                }

                if (level > 0 && parentId) {
                    return item.parentId = parentId;
                }
            });

            return isCurrentMenuLevelActive;
        }

        buildMenu(menu);

        var i, j, ref, item, prevSection, nextSection;
        for (i = j = 0, ref = flatMenu.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            item = flatMenu[i];
            if (item.url === currentUrl || item.url === currentUrl + '.htm') {
                if (i > 0) {
                    prevSection = flatMenu[i - 1];
                }

                if (i !== flatMenu.length - 1) {
                    nextSection = flatMenu[i + 1];
                }
            }
        }

        if (!currentPage.url) {
            nextSection = flatMenu[0];
        }

        window.HELP = $.extend(true, window.HELP, {
            nav: {
                menu: menu,
                flatMenu: flatMenu,
                home: flatMenu[0],
                currentPage: currentPage,
                currentLevel: currentLevel,
                parentPage: parentPage,
                prevPage: prevSection,
                nextPage: nextSection
            }
        });

        var $homeBtn = $body.find('.js_home');
        var $homeBtnLink = $homeBtn.find('.js_home_link');

        if (HELP.nav.home) {
            $homeBtnLink.attr('href', HELP.nav.home.url);
        }

        if (HELP.isAllInOne) {
            $(window).on('load', function() {
                setTimeout(function() {
                    scrollToHash(currentUrl);
                });
            });
        }

        buildLinks($container);

        var MenuHtml = MenuTemplateFunction({
            menu: menu,
            localization: HELP.localization,
            isMacProject: HELP.isMacProject
        });

        $aside.find('.js_menu').html(MenuHtml);

        $('.js_search_text').on('keyup', function (event) {
            if (event.keyCode === 27) {
                $(this).val('');
            } else {

            }
            triggerSearch();
        });

        $('.js_search_clear').on('click', function () {
            $('.js_search_text').val('');
            triggerSearch();

            $('.cont mark').contents().unwrap();
        });

        $('.js_mobile_search_button').on('click', function () {
            var $this = $(this);
            var $result = $('.js_mobile_search_result');
            var $input = $('.js_mobile_search_input');
            var $clearBtn = $('.js_mobile_search_clear');
            var isShow = !$input.hasClass('is-hidden');

            if (isShow) {
                if ($input.val().length > 0) {
                    var searchWord = $input.val().trim();
                    var resultObj = search(searchWord, HELP.searchWordMinLength);

                    resultObj.localization = HELP.localization;
                    resultObj.isMacProject = HELP.isMacProject;
                    var mobileSearchResultsHtml = MobileSearchResultsTemplateFunction(resultObj);

                    $result.html(mobileSearchResultsHtml).removeClass('is-hidden').addClass('is-active');

                    setTimeout(function () {
                        $('.js_aside_placeholder').removeClass('is-active');
                        $('.js_burger').removeClass('is-active');
                    });
                } else {
                    $result.removeClass('is-active').addClass('is-hidden');
                }

                /*$this.removeClass('is-active');
                $input.addClass('is-hidden');
                $clearBtn.addClass('is-hidden');*/
            } else {
                $input.removeClass('is-hidden');
                $clearBtn.removeClass('is-hidden');
                $this.addClass('is-active');

                if (!$result.is(':empty')) {
                    $result.removeClass('is-hidden').addClass('is-active');
                }

                setTimeout(function () {
                    $input.focus();
                }, 100);
            }
        });

        $('.js_mobile_search_clear').on('click', function () {
            var $searchBtn = $('.js_mobile_search_button');
            var $result = $('.js_mobile_search_result');
            var $input = $('.js_mobile_search_input');

            if ($input.val().length > 0) {
                $input.val('');
                HELP.searchWord = null;
                setParam('searchWord', null, true);

                $result.empty();
            }

            $searchBtn.removeClass('is-active');
            $result.addClass('is-hidden');
            $input.addClass('is-hidden');
            $(this).addClass('is-hidden');
        });

        var triggerMobileSearch = _.debounce(function() {
            $('.js_mobile_search_button').trigger('click');
        }, 350);

        $('.js_mobile_search_input').on('keyup', function (event) {
            if (event.keyCode === 13) {
                $('.js_mobile_search_button').trigger('click');
            // } else {
            //     triggerMobileSearch();
            }
        });

        $('.js_contents_toggle').on('click', function (event) {
            event.preventDefault();

            var $toggler = $(this);
            $toggler.toggleClass('is-toggled');

            if ($toggler.hasClass('is-toggled')) {
                $toggler.siblings('.contents').slideDown();
            } else {
                $toggler.siblings('.contents').slideUp();
            }
        });

        var openedClass = 'dropdown__list_opened';
        $('.js_dropdown_btn').on('click', function (event) {
            event.preventDefault();

            var $list = $(this).siblings('.js_dropdown_list');

            $('.js_dropdown_list').not($list).removeClass(openedClass);

            var maxHeight = html.clientHeight - $list.offset().top - this.clientHeight;

            if (HELP.isFirefox && $list.height() > maxHeight) {
                $list.addClass('dropdown__list_firefox-fix');
            }

            $list.css({
                maxHeight: maxHeight
            }).toggleClass(openedClass);

            $body.on('click.dropdown', function (event) {
                if (!$(event.target).closest('.js_dropdown').length) {
                    $list.removeClass(openedClass);
                    $body.off('click.dropdown');
                }
            });
        });

        bindEvents();
    }

    function loadContent(url, saveToHistory, callback, originalUrl) {
        if (saveToHistory == null) {
            saveToHistory = true;
        }

        var loadingTimeout = setTimeout(function () {
            $('.js_container').addClass('is-loading');
        }, 300);

        $.ajax(url, {
            crossDomain: true,
            dataType: "html",
            success: function (response) {
                if (saveToHistory && window.history && window.history.pushState) {
                    window.history.pushState({
                        url: url,
                        originalUrl: originalUrl
                    }, null, originalUrl || url);
                }

                var frameHtml = processHtml(response);
                var langMatches = frameHtml.match(/\slang="(.+?)"/);

                if ((langMatches != null ? langMatches.length : void 0) > 1 && langMatches[1] !== HELP.currentLangId) {
                    window.location = HELP.isMacProject ? originalUrl : url;
                    return;
                }

                var $cont = $(frameHtml).filter('.cont');
                $content.html($cont);

                $(".js_content, .js_main").animate({
                    scrollTop: 0
                }, '200', 'swing');

                title = $cont.find('.heading1, .heading2, .heading3, .heading4, .heading5').first().text();
                document.title = title;
                $(".js_menu_item").removeClass('is-active');

                var scrollToUrl = HELP.isMacProject ? originalUrl : url || HELP.nav.currentPage.url;
                var $menuItem = $(".js_menu_link[href='" + scrollToUrl + "']").closest('.js_menu_item');
                var $index = $('.js_index_literals');
                var $indexLinks = $index.find('.indexlink > a');
                $indexLinks.removeClass('is-active').filter("[href='" + url + "']").addClass('is-active');

                autoScrollContents($menuItem);
                processContent($container);

                checkPrintSectionLink();

                autotestHelperPostprocess();

				if (loadingTimeout) {
                    clearTimeout(loadingTimeout);
                }

                if (callback && typeof callback === 'function') {
                    callback();
                }

                $('.js_container').removeClass('is-loading');
                $('.js_main').removeClass('swipe-left swipe-right');

                trackPage();
                updateBreadcrumb();
            },
            error: function () {
                window.history.back();
                return window.location = url;
            }
        });
    }

    function processHtml(content, menu) {
        if (menu) {
            var AllInOneMenuHtml = AllInOneMenuTemplateFunction({
                menu: menu,
                localization: HELP.localization
            });
            var resultContent = $();

            menu.forEach(getContent);

            function getContent(item) {
                var id = item.url.match(/(\w+)\.html?/)[1];
                resultContent = resultContent.add('#' + id + ', [name=' + id + ']');

                if (item.children) {
                    item.children.forEach(getContent);
                }
            }

            content = AllInOneMenuHtml + $('<div/>').html(resultContent).html();
        }

        if (typeof content === 'string') {
            content = content.replace(/[™®]|&reg;|&#8482;|&#174;/g, '');

            if (HELP.isMacProject) {
                content = content.replace(/"title.htm#([\w]+.htm)"/gi,'"index.htm#$1"');
            }

            if (HELP.searchWord) {
                var searchRegExp = new RegExp(escapeRegExp(HELP.searchWord) + '(?!([^<]+)?>)', "ig");
                content = content.replace(searchRegExp, "<mark>$&</mark>");
            }
        }

        return content;
    }

    function processContent($container) {
        $container.find('.links').remove();
        buildLinks($container);

        $container.find('.cont').toggleClass('mactitlepage', Boolean(location.pathname.match(/title\.htm/)));
        $container.find('style').remove();

        if (!HELP.isAllInOne) {
            $container.find('.popuponclick, .expandingblock').each(function () {
                var $self = $(this);
                var $toggler = $($self.attr('id').replace('d', '#h'));

                if ($toggler.length > 0) {
                    var $wrapper = $toggler.closest(".settingdescr");

                    if ($wrapper.length === 0) {
                        $wrapper = $toggler.parent();
                    }

                    $wrapper.append($self);

                    if ($self.hasClass('expandingblock')) {
                        $wrapper.addClass('expandingblock-wrapper');

                        var img = $toggler.next('img');

                        if (img.length) {
                            $toggler.append(img);
                        }
                    }
                }
            });
        }

        $container.find('.cont [title]').each(function(index, item) {
            var classes = item.className;
            var $item = $(item);

            if (!$item.is('img') &&
                classes.indexOf('hyperlinktemplate') === -1 &&
                classes.indexOf('crossreferencetemplate') === -1) {
                $item.removeAttr('title');
            }
        });

        $container.find('.hyperlinktemplate').each(function() {
            var $self = $(this);
            var $siblingLink = $self.next('span').find('.hyperlinktemplate');

            if ($siblingLink.length) {
                var text = $siblingLink.text();
                $self.append($siblingLink.parent().text(text));
            }

            if (HELP.isIE9 && $html.attr('dir') === 'rtl') {
                $self.html($self.html().replace(/([A-z0-9\s]{3,})/g, '$1&rlm;'));
            }
        });

        var $tables = $container.find(".tableintopic");
        $tables.wrap("<div class='tableintopic-wrapper'/>");
        var $tableRows = $tables.find('tr');
        $tableRows.filter(':nth-child(2n)').addClass('is-even');
        $tableRows.filter(':nth-child(2n+1)').addClass('is-odd');

        $container.find('.popuponhover, .popuponclick').each(function () {
            var $self = $(this);
            var $toggler = $($self.attr('id').replace('d', '#h'));

            if ($toggler.length > 0) {
                return $toggler.wrap("<div class='link-wrapper'/>").after($self);
            }
        });

        $container.find('.js_feedback_link').attr('href', getMailtoLink());

        /*$container.find('.program').each(function(index, item) {
            var $item = $(item);
            if (!$item.parent().hasClass('js_code')) {
                var siblings = $(item).nextUntil(':not(.program)').addBack();

                if (siblings.length > 1) {
                    siblings.wrapAll('<div class="js_code"></div>');
                    siblings.after('\n');
                }
            }
        });

        $container.find('.exampleheading, .examplebodytext, .exampleheadingblue2015, .examplebodytextblue2015')
            .parent().each(function(index, item) {
                $(item).addClass('example-wrapper');
            });

        // Begin KOS Styles
        
        $container.find('.programkos,.programcfgkos,.programmakefilekos,.programedlkos,.programidlkos,.programcdlkos,.programyamlkos,.programckos,.attentionbodykos').each(function(index, item) {
            var $item = $(item);
            var itemClass = $item.attr('class');
            var checkWrapperClass = itemClass == 'attentionbodykos' ? 'attentionbodykos-wrapped' : 'js_code';
            var setWrapperClass;
            switch (itemClass)
            {
                case 'programkos':
                      setWrapperClass = 'js_code cpp bgprogram';
                      break;
                case 'programcfgkos':
                      setWrapperClass = 'js_code cpp bgprogram';
                      break;
                case 'programmakefilekos':
                      setWrapperClass = 'js_code makefile bgprogram';
                      break;
                case 'programedlkos':
                      setWrapperClass = 'js_code java bgprogram';
                      break;
                case 'programidlkos':
                      setWrapperClass = 'js_code java bgprogram';
                      break;
                case 'programcdlkos':
                      setWrapperClass = 'js_code java bgprogram';
                      break;
                case 'programyamlkos':
                      setWrapperClass = 'js_code makefile bgprogram';
                      break;
                case 'programckos':
                      setWrapperClass = 'js_code cpp bgprogram';
                      break;
                case 'attentionbodykos':
                      setWrapperClass = 'attentionbodykos-wrapped';
            }
            if (!$item.parent().hasClass(checkWrapperClass)) {
                var siblings = $(item).nextUntil(':not(.'+itemClass+')').addBack();
                siblings.wrapAll('<div class="'+setWrapperClass+'"></div>');
                siblings.after('\n');
            }
        });

        // End KOS Styles

        setTimeout(function() {
            $container.find('.js_code').each(function(index, item) {
                window.hljs.highlightBlock(item);
            });
        });*/

        $window.resize();
    }

    function buildLinks($container) {
        $pageTitle = $container.find('.heading1, .heading2, .heading3, .heading4').first();
        var $homeBtn = $container.find('.bt-home');
        var $prevBtnPlaceholder = $container.find('.js_prev_btn_placeholder');
        var $nextBtnPlaceholder = $container.find('.js_next_btn_placeholder');
        var PageTitleTemplateFunction = _.template(PageTitleTemplate);
        var BottomLinksTemlateFunctions = _.template(BottomLinksTemplate);
        var NextLinkTemplateTemlateFunctions = _.template(NextLinkTemplate);
        var PrevLinkTemplateTemlateFunctions = _.template(PrevLinkTemplate);

        if (HELP.nav) {
            var PageTitleHtml = PageTitleTemplateFunction({
                titleHtml: $pageTitle.html(),
                localization: HELP.localization
            });

            $pageTitle.html(PageTitleHtml);

            if (!HELP.isAllInOne) {
                var NextLinkHtml = NextLinkTemplateTemlateFunctions({
                    nextPage: HELP.nav.nextPage,
                    isMacProject: HELP.isMacProject
                });

                var PrevLinkHtml = PrevLinkTemplateTemlateFunctions({
                    prevPage: HELP.nav.prevPage,
                    isMacProject: HELP.isMacProject
                });

                $prevBtnPlaceholder.html(PrevLinkHtml);
                $nextBtnPlaceholder.html(NextLinkHtml);

                if ($homeBtn.length === 1 && (!HELP.isMacProject || window.location.hash)) {
                    $homeBtn = $homeBtn.first();

                    if (window.reviewDate) {
                        var reviewDate = new Date(window.reviewDate);

                        if (HELP.lessThanIE11) {
                            reviewDate = formatDate(reviewDate);
                        } else {
                            var locale = HELP.currentLangId === 'en-EN' ? 'en' : HELP.currentLangId;
                            reviewDate = reviewDate.toLocaleString(locale, {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                        }
                    }

                    var separator = {
                        'ja-JP': '、',
                        'fa-IR': '،',
                        'ar-AE': '،'
                    };

                    var BottomLinksHtmls = BottomLinksTemlateFunctions({
                        homeBtnHtml: $homeBtn[0].outerHTML,
                        localization: HELP.localization,
                        serviceInfo: {
                            id:  HELP.isMacProject ? window.location.hash.match(/#(\w+)\.htm/)[1] : window.location.pathname.match(/\/(\w+)\.htm/)[1],
                            reviewDate: reviewDate,
                            separator: separator[HELP.currentLangId] || ','
                        }
                    });

                    $homeBtn.replaceWith(BottomLinksHtmls);
                } else {
                    $homeBtn.remove();
                }
            } else {
                $('.js_all_in_one_header').text(HELP.localization.TableOfContents);
            }
        }
    }

    function autoScrollContents($target, animateSpeed) {
        if (animateSpeed == null) {
            animateSpeed = 2;
        }

        if (!$target || !$target.length) {
            return;
        }

        var $view = $('.js_tabs_viewport');
        var $menuItem = $view.find('.js-menu-content:not(.is-hidden)').find($target);

        if (!$menuItem.length || !$view.length) {
            return;
        }

        setMenuItemActive($menuItem);

        var targetTop = getParam('asideScrollPosition');
        if (targetTop) {
            setParam('asideScrollPosition', null);
            var isFromLocalStorage = true;
        } else {
            var view = $view[0];
            var delta1 = view.clientHeight / 5;
            var delta2 = view.clientHeight / 4;
            var isOverBottom = $menuItem.offset().top > view.clientHeight + $view.offset().top;
            var isOverTop = $menuItem.offset().top < $view.offset().top + $menuItem[0].offsetHeight;
            var targetDelta = $menuItem.offset().top - $view.offset().top;
            targetTop = view.scrollTop + targetDelta;
        }

        var scrollingDuration = Math.min(animateSpeed * Math.abs(targetDelta), 1500);
        if (isFromLocalStorage || isOverTop || isOverBottom) {
            $view.animate({
                scrollTop: targetTop
            }, scrollingDuration, 'swing');
        }
    }

    function loadVersions() {
        if (!HELP.localization.products_b2c || !HELP.localization.products_b2b) {
            return;
        }

        var url = window.location.pathname.split('/');
		if (url[1].toLowerCase() == 'help') {
			url.splice(1, 1); // browser url may have prepending /help/
		}
        var productKey = url[1] && url[1];
        var currentVersionUrl = url[2];
        var allProducts = HELP.localization.products_b2c.concat(HELP.localization.products_b2b).concat(HELP.localization.products_kos || []);
		allProducts.forEach(function(product) {
			product.url = product.url.replace(/\/?help\//gi, ''); // product urls in json may have prepending help/
		});

        function productHasSelectedVersion(item) {
            return _.some(item.versions, function (versionItem) {
                let versionNum = versionItem.url.split('/')[0].toLowerCase();
                return versionNum === currentVersionUrl.toLowerCase()
            });
        }

        var product = _.filter(allProducts, function (item) {
            return item.url.toLowerCase() === productKey.toLowerCase()

                // workaround for #4073658
                && productHasSelectedVersion(item);
        })[0];

        if (!product) { // if workaround above fails, try original code
            var product = _.filter(allProducts, function (item) {
                return item.url.toLowerCase() === productKey.toLowerCase();
            })[0];
        }

        var $productLogo = $('.js_product_logo');

        if (!product) {
            return;
        }

        $productLogo.addClass('top-bar__product_' + product.icon);

        var currentVersion;
        _.some(product.versions, function(item) {
            if (item.url.split('/')[0] === currentVersionUrl) {
                currentVersion = item;
                return true;
            }
            return false;
        });

        if (currentVersion && product.versions.length > 1) {
            var VersionsResultsHtml = VersionsTemplateFunction({
                currentVersion: currentVersion,
                versions: product.versions
            });

            $header.find('.js_header_versions_list').html(VersionsResultsHtml);
            $('.js_selector_mobile_versions')
                .html(VersionsResultsHtml).find('.js_dropdown').addClass('dropdown_large');

            $header.on('click', '.js_version_item', function (event) {
                event.preventDefault();

                var versionUrl = $(this).data('version-url');
                /*var path = window.location.pathname.split('/');
                var currentPage = path[path.length - 1];

                window.location.href  = '/' + productKey + '/' + versionUrl + '/' + currentPage;*/
                var main_url = $('a.header__title-link').attr('href');
                if( ! main_url.endsWith('/')) {
                    main_url += '/'
                }
                window.location.href =  main_url + productKey + '/' + versionUrl;
            });
        } else {
            $('.js_selector_mobile_versions').remove();
        }
    }

    function calcAsideWidth(aside) {
        aside.children().css({
            width: aside.width(),
            top: $('.js_header_placeholder').height()
        });
    }

    function getMailtoLink() {
        var link = 'mailto:?subject=Shared from Kaspersky Online Help: "' +
            window.parsedMainTitle + ' - ' + window.document.title + '"&body=' + window.parsedMainTitle +
            ' - ' + window.document.title + '\n' + window.location.href;
        return encodeURI(link);
    }

    function findSection(menuList, sectionUrl) {
        var result =[];

        menuList.forEach(function(item) {
            if (item.url === sectionUrl) {
                result.push(item);
            } else if (item.children) {
                result = result.concat(findSection(item.children, sectionUrl));
            }
        });

        return result;
    }

    function scrollToHash(hash) {
        var $target = $("[name='" + hash + "'], #" + hash);
        var $main = $('.js_main');

        if ($target.length) {
            $main.animate({
                scrollTop: $target[0].offsetTop - $main[0].offsetTop
            }, '500', 'swing');

            document.documentElement.scrollTop = 0;
        }
    }

    function escapeRegExp(text) {
        return text.toString().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }

    function trackPage() {
        if (window._gaq) {
            window._gaq.push(['_trackPageview', location.pathname + location.search + location.hash]);
        }
    }

    function updateBreadcrumb() {
        var breadPage = HELP.nav.currentPage;
        if (!breadPage.level || breadPage.level == 0) {
            return;
        }
        var breadHtml = breadPage.text;
        while (breadPage.parentId) {
            breadPage = HELP.nav.flatMenu.filter(function (b) { return b.id == breadPage.parentId })[0];
            urlPrefix = HELP.isMacProject ? "index.htm#" : "";
            breadHtml = "<a class=\"breadcrumbLink\" href=\"" + urlPrefix + breadPage.url + "\">" + breadPage.text + "</a>&ensp;>&ensp;" + breadHtml;
        }
        document.getElementsByClassName("cont")[0].insertAdjacentHTML('afterbegin', "<div class=\"breadcrumbBlock\">" + breadHtml + "</div>");
    }

    function setNavigation(url) {
        _.each(HELP.nav.flatMenu, function (item, index) {
            if (item.url === url) {
                HELP.nav.currentPage = item;

                if (index > 0) {
                    HELP.nav.prevPage = HELP.nav.flatMenu[index - 1];
                } else {
                    HELP.nav.prevPage = null;
                }

                if (index !== HELP.nav.flatMenu.length - 1) {
                    HELP.nav.nextPage = HELP.nav.flatMenu[index + 1];
                } else {
                    HELP.nav.nextPage = null;
                }
            }
        });
    }

    function handleCookiePolicy(cookiePolicy) {
        if (window.loadGA) {
            window.loadGA();
        }

        //if (getParam('hideCookiePolicy')) {
        if (true) {
            cookiePolicy.remove();
            return;
        }

        cookiePolicy.find('.js_cookie_policy_btn').on('click', function() {
            cookiePolicy.remove();
            setParam('hideCookiePolicy', true);
        });
    }

    function setMenuItemActive($menuItem) {
        $menuItem
            .addClass('is-active')
            .parents('.js_contents_level')
            .add($menuItem.children('.js_contents_level'))
            .slideDown()
            .siblings('.js_contents_toggle')
            .addClass('is-toggled');
    }

    function formatDate(date) {
        var dd = date.getDate();
        var mm = date.getMonth() + 1;
        var yyyy = date.getFullYear();

        if (dd < 10){
            dd = '0' + dd;
        }

        if (mm < 10){
            mm = '0' + mm;
        }

        return dd + '.' + mm + '.' + yyyy;
    }

    function checkPrintSectionLink() {

        if (HELP.isAllInOne) {
            return;
        }

        var link = $('.js_print_section');

        if (HELP.isMacProject && !window.location.hash) {
            link.hide();
        } else {
            link.show();

            var currentUrl = HELP.isMacProject ?
                window.location.hash.match(/#((\w+)\.htm)/)[1] : window.location.pathname.match(/\/(\w+\.\w+)$/)[1];

            link.attr('href', (HELP.isMacProject ? 'pgs/' : '') + 'all-in-one.htm?sectionUrl=' + currentUrl);
        }
    }

	function autotestHelperPostprocess() {
		if (document.title=="AVAILABILITY OF KASPERSKY SECURITY CLOUD") {
			document.getElementsByClassName("js_content")[0].dataset.atSelector = "at-countryRestrictions"; //requested by KSCloud autotesters
		} else if (document.getElementsByClassName("js_content")[0].dataset.atSelector == "at-countryRestrictions") {
			document.getElementsByClassName("js_content")[0].removeAttribute("data-at-selector");
		}
	}

    /*
    #* Rendering starts here --------------------------------------------------------------------------------------------------
     */
    function firstRender() {
        var $footer, $menuItem;
        var sectionUrl = location.search.split('sectionUrl=')[1];
        var menu = window['Toc'];

        if (sectionUrl) {
            menu = findSection(menu, sectionUrl);
        }

        HELP.localization = window.Localization || {};
        HELP.customization = window.Customization || {};
        HELP.pdfOptions = window.PdfOptions || {};

        $html.toggleClass('ie7', HELP.isIE7).toggleClass('ie8', HELP.isIE8)
             .toggleClass('ie9', HELP.isIE9).toggleClass('ie10', HELP.isIE10)
             .toggleClass('is-opera-mini', HELP.isOperaMini)
             .toggleClass('is-offline', HELP.isFileProtocol);

        if (window['HelpViewer'] !== void 0 && window.sessionStorage && JSON.parse && window.sessionStorage.getItem('isTOCHidden') && JSON.parse(window.sessionStorage.getItem('isTOCHidden'))) {
            $html.removeClass('is-menu-shown');
        }

        if (location.hostname === 'localhost' || location.hostname === 'stage.help.kaspersky.com') {
            $html.addClass('is-test-mode');
        }

        var containerHtml = ContainerTemplateFunction({
            localization: HELP.localization
        });

        var parsedMainTitle = window.parsedMainTitle;
        var titlePreffix;

        if (window.Customization) {
            titlePreffix = HELP.customization.CompanyName;
            parsedMainTitle = HELP.customization.ProductName;
        } else if (parsedMainTitle.indexOf('Kaspersky ') === 0) {
            titlePreffix = parsedMainTitle.slice(0, 9);
            parsedMainTitle = parsedMainTitle.slice(10, parsedMainTitle.length);
        } else if (parsedMainTitle.indexOf('KasperskyOS') === 0) {
            titlePreffix = parsedMainTitle.slice(0, 11);
            parsedMainTitle = parsedMainTitle.slice(12, parsedMainTitle.length);
        }

        var headerHtml = HeaderTemplateFunction({
            titlePreffix: titlePreffix || '',
            title: parsedMainTitle,
            localization: HELP.localization,
            customization: HELP.customization,
            isAllInOne: HELP.isAllInOne,
            isOffline: HELP.isFileProtocol,
            isMacProject: HELP.isMacProject,
            pdfOptions: HELP.pdfOptions
        });

        var footerHtml = FooterTemplateFunction({
            localization: HELP.localization,
            customization: HELP.customization
        });

        var asideHtml = AsideTemplateFunction({
            localization: HELP.localization
        });

        if (window.Customization) {
            var customStyles = CustomStylesTemplateFunction({
                customization: HELP.customization
            });

            $head.append(customStyles);
        }

        $container = $(containerHtml);
        $header = $(headerHtml);
        $footer = $(footerHtml);
        $aside = $(asideHtml);

        var $headerPlaceholder = $container.find('.js_header_placeholder');
        var $asidePlaceholder = $container.find('.js_aside_placeholder');
        var $footerPlaceholder = $container.find('.js_footer_placeholder');

        $headerPlaceholder.append($header);
        $asidePlaceholder.append($aside);
        $footerPlaceholder.append($footer);
        $content = $container.find('.js_content');
        $content.append(processHtml($body.html(), sectionUrl ? menu : null));
        $body.html($container);
        processContent($container);
        $body.addClass('js_tabs');

        var $viewport = $('<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">');
        $head.append($viewport);
        $html.find('base').remove();

        if ($.inArray($html.attr('lang'), ['ar-AE', 'fa-IR']) > -1) {
            $html.attr('dir', 'rtl');
        } else {
            $html.attr('dir', 'ltr');
        }

        FastClick.attach(document.body);

        $overlay = $body.find('.js_overlay');
        loadLangs();
        loadVersions();
        loadMenu(menu);
        handleCookiePolicy($body.find('.js_cookie_policy'));
        checkPrintSectionLink();

        if (HELP.searchWord) {
            $body.find('.js_search_text').val(HELP.searchWord);
            triggerSearch();
        }

        if (HELP.nav.currentPage && HELP.nav.currentPage.url) {
            $menuItem = $(".js_menu_link[href='" + HELP.nav.currentPage.url + "']").closest('.js_menu_item');
            autoScrollContents($menuItem, 0);
        }

        var localUrlRegExp = /([\w_]+\.htm)[l]?(#[\w]+(.htm))?/i;
        var urlMatches = window.location.href.match(localUrlRegExp);
        if (HELP.isMacProject) {
            if (urlMatches[2] && urlMatches[3]) {
                loadContent("./pgs/" + urlMatches[2].slice(1), false, null, urlMatches[0]);
            } else {
                loadContent("./pgs/" + HELP.nav.nextPage.url, false, null, urlMatches[0] + '#' + HELP.nav.nextPage.url);
            }
        } else if (window.history && window.history.replaceState && !HELP.isAllInOne) {
            var initialUrl = /\/([\w_-]+\.\w+$)/.exec(location.pathname)[1]+location.hash;
            window.history.replaceState({
                url: initialUrl
            }, null, initialUrl);
        }

        $modalContent = $overlay.find('.js_modal_content');
        $modalHeader = $overlay.find('.js_modal_header');
        $tooltip = $body.find('.js_tooltip');
        $tooltipContent = $body.find('.js_tooltip_content');

        if (HELP.isIE7 || HELP.isIE8) {
            setTimeout(function () {
                calcAsideWidth($asidePlaceholder);
            }, 500);
        }

        $(".downloadhyperlinktemplate").attr("download", "").addClass("hyperlinktemplate");

        autotestHelperPostprocess();
        updateBreadcrumb();

        var kasperskyFont100 = new window.FontFaceObserver('KasperskySans', { weight: 100 });
        var kasperskyFont300 = new window.FontFaceObserver('KasperskySans', { weight: 300 });
        var kasperskyFont600 = new window.FontFaceObserver('KasperskySans', { weight: 600 });
        var kasperskyFont700 = new window.FontFaceObserver('KasperskySans', { weight: 700 });

        Promise.all([
            kasperskyFont100.load(null, 3000),
            kasperskyFont300.load(null, 3000),
            kasperskyFont600.load(null, 3000),
            kasperskyFont700.load(null, 3000)
        ]).then(showPage, showPage);

        function showPage() {
            $html.css('visibility', 'visible');
            $window.resize();

            if (HELP.isAllInOne) {
                window.print();
            }
        }
    }

    firstRender();
});